"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[13940],{73811:(e,t,n)=>{n.d(t,{ZP:()=>a});var r=n(85893),s=n(11151);function i(e){const t={code:"code",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "userInfo": {\n    "email": "w3a-heroes@web3auth.com",\n    "name": "Web3Auth Heroes",\n    "profileImage": "https://lh3.googleusercontent.com/a/Ajjjsdsmdjmnm...",\n    "verifier": "torus",\n    "verifierId": "w3a-heroes@web3auth.com",\n    "typeOfLogin": "google",\n    "aggregateVerifier": "w3a-google-sapphire",\n    "dappShare": "", // 24 words of seed phrase will be sent only incase of custom verifiers\n    "idToken": "<jwtToken issued by Web3Auth>",\n    "oAuthIdToken": "<jwtToken issued by OAuth Provider>", // will be sent only incase of custom verifiers\n    "oAuthAccessToken": "<accessToken issued by OAuth Provider>", // will be sent only incase of custom verifiers\n    "isMfaEnabled": false // Returns whether the user has enabled MFA or not\n  }\n}\n'})})}function a(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},64877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>h,toc:()=>d});var r=n(85893),s=n(11151),i=n(73811);const a={title:"Using dApp Share in PnP Flutter SDK",sidebar_label:"dApp Share",displayed_sidebar:"sdk",description:"Web3Auth PnP Flutter SDK - dApp Share | Documentation - Web3Auth"},o=void 0,h={id:"sdk/pnp/flutter/dapp-share",title:"Using dApp Share in PnP Flutter SDK",description:"Web3Auth PnP Flutter SDK - dApp Share | Documentation - Web3Auth",source:"@site/docs/sdk/pnp/flutter/dapp-share.mdx",sourceDirName:"sdk/pnp/flutter",slug:"/sdk/pnp/flutter/dapp-share",permalink:"/docs/sdk/pnp/flutter/dapp-share",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/sdk/pnp/flutter/dapp-share.mdx",tags:[],version:"current",frontMatter:{title:"Using dApp Share in PnP Flutter SDK",sidebar_label:"dApp Share",displayed_sidebar:"sdk",description:"Web3Auth PnP Flutter SDK - dApp Share | Documentation - Web3Auth"},sidebar:"sdk",previous:{title:"Multi Factor Authentication",permalink:"/docs/sdk/pnp/flutter/mfa"},next:{title:"Web3Auth PnP Unity SDK",permalink:"/docs/sdk/pnp/unity/"}},l={},d=[{value:"Web3Auth Infrastructure at a glance",id:"web3auth-infrastructure-at-a-glance",level:2},{value:"The User Experience in Mobile Platforms",id:"the-user-experience-in-mobile-platforms",level:2},{value:"dApp Share in Flutter",id:"dapp-share-in-flutter",level:2},{value:"Sample Response in Flutter",id:"sample-response-in-flutter",level:4},{value:"Example",id:"example",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"web3auth-infrastructure-at-a-glance",children:"Web3Auth Infrastructure at a glance"}),"\n",(0,r.jsxs)(t.p,{children:["If you go through the ",(0,r.jsx)(t.a,{href:"/infrastructure/",children:"Web3Auth infrastructure"})," you'll notice that to enable the non custodiality of Web3Auth, we split the private\nkey into multiple parts, ie. ",(0,r.jsx)(t.code,{children:"shares"}),". These shares are a part of the off chain multisig, where multiple shares are stored in different places and can\nbe used to reconstruct the private key dynamically in the user's frontend application. For a glance at the structure of the shares, these are the\nfollowing:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.code,{children:"ShareA"})," is managed by a login service via node operators"]}),": This share is further split amongst a network of nodes and retrieved via\nconventional authentication flows."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.code,{children:"ShareB"})," is stored on the user's device"]}),": Implementation is device and system specific. For example, on mobile devices, the share could be\nstored in device storage secured via biometrics."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.code,{children:"ShareC"})," is a recovery share"]}),": An extra share to be kept by the user, possibly kept on a separate device, downloaded or based on user input with\nenough entropy (eg. password, security questions, hardware device etc.)."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Similar to existing 2FA systems, a user needs to prove ownership of at least 2 out of 3 (2/3) shares, in order to retrieve their private key. This\ninitial setup provides several benefits."}),"\n",(0,r.jsx)(t.h2,{id:"the-user-experience-in-mobile-platforms",children:"The User Experience in Mobile Platforms"}),"\n",(0,r.jsx)(t.p,{children:"The user experience on mobile platforms is very different from the web platforms. This is because the user has to be redirected to a browser where\nthey can login using their socials and then back to the app once they have been successfully authenticated. This user experience shifts the context\nbetween two applications, whereas, in the web platforms, the context remains within the browser only."}),"\n",(0,r.jsxs)(t.p,{children:["For the seamless login flow, we need to reconstruct the Shares ",(0,r.jsx)(t.code,{children:"A"})," and ",(0,r.jsx)(t.code,{children:"B"}),". ",(0,r.jsx)(t.code,{children:"Share B"})," is managed by the login service and is provided on successful\nauthentication. Whereas in web platforms, ",(0,r.jsx)(t.code,{children:"Share A"})," is stored in the browser context. We can still store it in the browser context for mobile devices,\nbut this has a few risks like users accidentally deleting browser data. This is a bigger problem in mobile devices since the user doesn't realize that\nthe browser is being used to login within the app and clearing the browser data can cause their logins to fail. Hence, to tackle this issue, Web3Auth\nissues a dApp Share, ie. a backup share that can be stored by the app developer directly within their application and used to reconstruct the private\nkey after successful login by the user."]}),"\n",(0,r.jsx)(t.h2,{id:"dapp-share-in-flutter",children:"dApp Share in Flutter"}),"\n",(0,r.jsx)(t.p,{children:"Web3Auth issues a dApp Share, ie. a backup share that can be stored by the app developer directly within their application and used to reconstruct the\nprivate key after successful login by the user."}),"\n",(0,r.jsx)(t.p,{children:"After a successful login from a user, the user details are returned as a response to the application on mobile devices."}),"\n",(0,r.jsx)(t.h4,{id:"sample-response-in-flutter",children:"Sample Response in Flutter"}),"\n",(0,r.jsx)(i.ZP,{}),"\n",(0,r.jsxs)(t.p,{children:["If you notice, the reponses has a field called ",(0,r.jsx)(t.code,{children:"dappShare"})," which is a 24 words seed phrase that can be used to reconstruct the private key. This\ndappShare is a supplement to the ",(0,r.jsx)(t.code,{children:"Share A"})," and represents half of the private key. The application can store the dApp share in its own application's\nlocal storage safely."]}),"\n",(0,r.jsx)(t.p,{children:"Now, while logging in, the user can use their social accounts to obtain one share, and the application provides the dApp Share, removing the need to\nstore the share in the browser context and enabling the user to login seamlessly. This can be done by passing over the stored dApp share value in the\nlogin function."}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["One major thing to note here is that the ",(0,r.jsx)(t.code,{children:"dappShare"})," is only available for custom verifiers and not the standard web3auth verifiers. This is done to\nmake sure that an application only has access to the corresponding share to the private key of their application's user. Hence, to use dApp Share, one\nhas to use the custom authentication feature of Web3Auth. Also, the dApp Share is only returned to users who have enabled 2FA to their account."]})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:'final Web3AuthResponse response = await Web3AuthFlutter.login(LoginParams(\n  loginProvider: Provider.google,\n  // highlight-next-line\n  dappShare: "<24 words seed phrase>"\n));\n'})}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"Future<void> initWeb3Auth() async {\n  HashMap themeMap = HashMap<String, String>();\n  themeMap['primary'] = \"#229954\";\n\n  Uri redirectUrl;\n  if (Platform.isAndroid) {\n    redirectUrl = Uri.parse('{SCHEME}://{HOST}/auth');\n    // w3a://com.example.w3aflutter/auth\n  } else if (Platform.isIOS) {\n    redirectUrl = Uri.parse('{bundleId}://auth');\n    // com.example.w3aflutter://openlogin\n  } else {\n    throw UnKnownException('Unknown platform');\n  }\n\n  await Web3AuthFlutter.init(\n    Web3AuthOptions(\n      clientId: \"WEB3AUTH_CLIENT_ID\",\n      network: Network.testnet,\n      redirectUrl: redirectUrl,\n    ),\n  );\n}\n\nfinal Web3AuthResponse response = await Web3AuthFlutter.login(LoginParams(\n  loginProvider: Provider.google,\n  // highlight-next-line\n  dappShare: \"<24 words seed phrase>\"\n));\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var r=n(67294);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);