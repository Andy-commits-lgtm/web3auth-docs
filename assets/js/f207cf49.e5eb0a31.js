"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[70128],{92341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var r=t(85893),i=t(11151),a=t(85162),s=t(74866);const o={title:"EIP1193 (EVM) Provider",displayed_sidebar:"sdk",description:"EIP1193 Provider for EVM Compatible Chains | Documentation - Web3Auth"},d=void 0,c={id:"sdk/helper-sdks/providers/evm",title:"EIP1193 (EVM) Provider",description:"EIP1193 Provider for EVM Compatible Chains | Documentation - Web3Auth",source:"@site/docs/sdk/helper-sdks/providers/evm.mdx",sourceDirName:"sdk/helper-sdks/providers",slug:"/sdk/helper-sdks/providers/evm",permalink:"/docs/sdk/helper-sdks/providers/evm",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/sdk/helper-sdks/providers/evm.mdx",tags:[],version:"current",frontMatter:{title:"EIP1193 (EVM) Provider",displayed_sidebar:"sdk",description:"EIP1193 Provider for EVM Compatible Chains | Documentation - Web3Auth"},sidebar:"sdk",previous:{title:"Providers",permalink:"/docs/sdk/helper-sdks/providers/"},next:{title:"Solana Provider",permalink:"/docs/sdk/helper-sdks/providers/solana"}},l={},h=[{value:"<code>@web3auth/ethereum-provider</code>",id:"web3authethereum-provider",level:2},{value:"Installation",id:"installation",level:2},{value:"<code>@web3auth/ethereum-provider</code>",id:"web3authethereum-provider-1",level:4},{value:"Initialisation",id:"initialisation",level:2},{value:"Assign the <code>EthereumPrivateKeyProvider</code> class to a variable",id:"assign-the-ethereumprivatekeyprovider-class-to-a-variable",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Chain Config",id:"chain-config",level:3},{value:"Example",id:"example",level:4},{value:"Setting up the provider",id:"setting-up-the-provider",level:2},{value:"For Web3Auth PnP Web SDKs",id:"for-web3auth-pnp-web-sdks",level:3},{value:"For Single Factor Auth Web SDK",id:"for-single-factor-auth-web-sdk",level:3},{value:"For tKey JS SDK",id:"for-tkey-js-sdk",level:3},{value:"Using the provider",id:"using-the-provider",level:2},{value:"Get User account and Balance",id:"get-user-account-and-balance",level:3},{value:"<code>web3.eth.getAccounts()</code>",id:"web3ethgetaccounts",level:4},{value:"Send Transaction",id:"send-transaction",level:3},{value:"<code>web3.eth.sendTransaction(object)</code>",id:"web3ethsendtransactionobject",level:4},{value:"Sign a message",id:"sign-a-message",level:3},{value:"Personal Sign",id:"personal-sign",level:4},{value:"<code>web3.eth.personal.sign(originalMessage, fromAddress)</code>",id:"web3ethpersonalsignoriginalmessage-fromaddress",level:4},{value:"Sign Typed Data V1",id:"sign-typed-data-v1",level:4},{value:"<code>eth_signTypedData</code>",id:"eth_signtypeddata",level:4},{value:"Sign Typed Data v3",id:"sign-typed-data-v3",level:4},{value:"<code>eth_signTypedData_v3</code>",id:"eth_signtypeddata_v3",level:4},{value:"Sign Typed Data v4",id:"sign-typed-data-v4",level:4},{value:"<code>eth_signTypedData_v4</code>",id:"eth_signtypeddata_v4",level:4},{value:"Fetch User&#39;s Private Key",id:"fetch-users-private-key",level:3},{value:"<code>eth_private_key</code>",id:"eth_private_key",level:4}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"web3authethereum-provider",children:(0,r.jsx)(n.a,{href:"https://npmjs.com/package/@web3auth/ethereum-provider",children:(0,r.jsx)(n.code,{children:"@web3auth/ethereum-provider"})})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:(0,r.jsx)(n.code,{children:"EIP1193"})})," Provider can be used to interact with any EVM compatible blockchain. This is a wrapper around\nthe ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:(0,r.jsx)(n.code,{children:"Ethereum JavaScript Provider API"})})," with some additional functionalities around Web3Auth Private Key\nhandling."]}),"\n",(0,r.jsx)(n.p,{children:"In this section we'll explore more about how you can use this provider with our SDKs."}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.h4,{id:"web3authethereum-provider-1",children:(0,r.jsx)(n.a,{href:"https://npmjs.com/package/@web3auth/ethereum-provider",children:(0,r.jsx)(n.code,{children:"@web3auth/ethereum-provider"})})}),"\n",(0,r.jsxs)(s.Z,{groupId:"npm2yarn",children:[(0,r.jsx)(a.Z,{value:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save @web3auth/ethereum-provider\n"})})}),(0,r.jsx)(a.Z,{value:"yarn",label:"Yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @web3auth/ethereum-provider\n"})})}),(0,r.jsx)(a.Z,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @web3auth/ethereum-provider\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"initialisation",children:"Initialisation"}),"\n",(0,r.jsxs)(n.p,{children:["Import the ",(0,r.jsx)(n.code,{children:"EthereumPrivateKeyProvider"})," ",(0,r.jsx)(n.strong,{children:"class"})," from ",(0,r.jsx)(n.code,{children:"@web3auth/ethereum-provider"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { EthereumPrivateKeyProvider } from "@web3auth/ethereum-provider";\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"assign-the-ethereumprivatekeyprovider-class-to-a-variable",children:["Assign the ",(0,r.jsx)(n.code,{children:"EthereumPrivateKeyProvider"})," class to a variable"]}),"\n",(0,r.jsx)(n.p,{children:"After creating your Web3Auth instance, you need to initialize the Torus Wallet UI Plugin and add it to a class for further usage."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const privateKeyProvider = new EthereumPrivateKeyProvider({ config: EthereumPrivKeyProviderConfig });\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This constructor takes an object with a config of ",(0,r.jsx)(n.code,{children:"EthereumPrivKeyProviderConfig"})," as input."]}),"\n",(0,r.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"EthereumPrivKeyProviderConfig"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'export interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, "chainNamespace">;\n}\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * web socket target Url for the chain\n   */\n  wsTarget?: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n  /**\n   * Number of decimals for the currency ticker (e.g: 18)\n   */\n  decimals?: number;\n};\nexport interface BaseProviderConfig extends BaseConfig {\n  chainConfig: Partial<CustomChainConfig>;\n  networks?: Record<string, CustomChainConfig>;\n  skipLookupNetwork?: boolean;\n}\nexport interface BaseConfig {\n  /**\n   *  Determines if this controller is enabled\n   */\n  disabled?: boolean;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"chain-config",children:"Chain Config"}),"\n",(0,r.jsxs)(n.p,{children:["While connecting your preferred chain, you need to pass the chainConfig as a parameter. The Chain IDs for the supported chains can be found on\n",(0,r.jsx)(n.a,{href:"https://chainlist.org/",children:"ChainList"}),". Please note that you need to pass over the hex value of the chain id in the provider config."]}),"\n",(0,r.jsx)(n.p,{children:"Some of the commonly used L2s and the Ethereum chain ids are listed below."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Hex"}),(0,r.jsx)(n.th,{children:"Decimal"}),(0,r.jsx)(n.th,{children:"Network"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0x1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Ethereum Mainnet"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0xAA36A7"}),(0,r.jsx)(n.td,{children:"11155111"}),(0,r.jsx)(n.td,{children:"Sepolia Testnet"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0x38"}),(0,r.jsx)(n.td,{children:"56"}),(0,r.jsx)(n.td,{children:"Binance Smart Chain Mainnet"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0x89"}),(0,r.jsx)(n.td,{children:"137"}),(0,r.jsx)(n.td,{children:"Polygon Mainnet"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0xA86A"}),(0,r.jsx)(n.td,{children:"43114"}),(0,r.jsx)(n.td,{children:"Avalanche C-Chain"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0xA"}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Optimism"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0xE"}),(0,r.jsx)(n.td,{children:"14"}),(0,r.jsx)(n.td,{children:"Flare"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0x13"}),(0,r.jsx)(n.td,{children:"19"}),(0,r.jsx)(n.td,{children:"Songbird"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: "0x1",\n  rpcTarget: "https://rpc.ankr.com/eth",\n  displayName: "Ethereum Mainnet",\n  blockExplorer: "https://etherscan.io",\n  ticker: "ETH",\n  tickerName: "Ethereum",\n};\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\n  config: { chainConfig },\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"setting-up-the-provider",children:"Setting up the provider"}),"\n",(0,r.jsx)(n.h3,{id:"for-web3auth-pnp-web-sdks",children:"For Web3Auth PnP Web SDKs"}),"\n",(0,r.jsxs)(n.p,{children:["If you are using ",(0,r.jsx)(n.code,{children:'chainNamespace: "eip155"'})," while initializing ",(0,r.jsx)(n.code,{children:"Web3Auth"})," or ",(0,r.jsx)(n.code,{children:"Web3AuthNoModal"})," with the ",(0,r.jsx)(n.code,{children:"OpenloginAdapter"}),", you need to add the\n",(0,r.jsx)(n.code,{children:"privateKeyProvider"})," to the OpenLogin instance."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: "0x1",\n  rpcTarget: "https://rpc.ankr.com/eth",\n  displayName: "Ethereum Mainnet",\n  blockExplorer: "https://etherscan.io",\n  ticker: "ETH",\n  tickerName: "Ethereum",\n};\n\nconst web3auth = new Web3AuthNoModal({\n  clientId,\n  chainConfig,\n  web3AuthNetwork: "sapphire_mainnet",\n});\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\n  config: { chainConfig },\n});\n\nconst openloginAdapter = new OpenloginAdapter({\n  privateKeyProvider,\n  adapterSettings: {...},\n  mfaSettings: {...},\n  loginSettings: {...},\n});\nweb3auth.configureAdapter(openloginAdapter);\n\nconst web3authProvider = await web3auth.connectTo(\n  WALLET_ADAPTERS.OPENLOGIN,\n  {\n    loginProvider: "google",\n  }\n);\n\n// use this provider to interact with the blockchain\n'})}),"\n",(0,r.jsx)(n.h3,{id:"for-single-factor-auth-web-sdk",children:"For Single Factor Auth Web SDK"}),"\n",(0,r.jsx)(n.p,{children:"While using the SFA Web SDK, you need to pass the provider during the initialisation of SDK, while calling the init() function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: "0x1",\n  rpcTarget: "https://rpc.ankr.com/eth",\n  displayName: "Ethereum Mainnet",\n  blockExplorer: "https://etherscan.io",\n  ticker: "ETH",\n  tickerName: "Ethereum",\n};\n\nconst web3authSfa = new Web3Auth({\n  clientId, // Get your Client ID from the Web3Auth Dashboard\n  chainConfig,\n  web3AuthNetwork: "sapphire_mainnet",\n  usePnPKey: false, // Setting this to true returns the same key as PnP Web SDK, By default, this SDK returns CoreKitKey.\n});\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\n  config: { chainConfig },\n});\n\nweb3authSfa.init(privateKeyProvider);\n\nconst web3authProvider = await web3authSFAuth.connect({\n  verifier,\n  verifierId: sub,\n  idToken,\n});\n\n// use this provider to interact with the blockchain\n'})}),"\n",(0,r.jsx)(n.h3,{id:"for-tkey-js-sdk",children:"For tKey JS SDK"}),"\n",(0,r.jsx)(n.p,{children:"In tKey JS SDK, there is not internal method of passing the provider directly. Hence, you need to setup the provider using the private key generated\nfrom tKey, using the setupProvider function of the EthereumPrivateKeyProvider."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"setupProvider(privKey: string): Promise<void>;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// please complete the tKey setup and login before this.\nconst chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: "0x1",\n  rpcTarget: "https://rpc.ankr.com/eth",\n  displayName: "Ethereum Mainnet",\n  blockExplorer: "https://etherscan.io",\n  ticker: "ETH",\n  tickerName: "Ethereum",\n};\n\nconst reconstructedKey = await tKey.reconstructKey();\nprivateKey = reconstructedKey?.privKey.toString("hex");\n\nconst ethereumPrivateKeyProvider = new EthereumPrivateKeyProvider({\n  config: { chainConfig },\n});\n\nawait ethereumPrivateKeyProvider.setupProvider(privateKey);\nprovider = ethereumPrivateKeyProvider.provider;\n\n// use this provider to interact with the blockchain\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-the-provider",children:"Using the provider"}),"\n",(0,r.jsxs)(n.p,{children:["On connection, you can use this ",(0,r.jsx)(n.code,{children:"provider"})," as an ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-1193",children:(0,r.jsx)(n.code,{children:"EIP1193"})})," provider with ",(0,r.jsx)(n.code,{children:"web3.js"})," or ",(0,r.jsx)(n.code,{children:"ethers"})," library."]}),"\n",(0,r.jsxs)(s.Z,{defaultValue:"web3",values:[{label:"web3.js",value:"web3"},{label:"ethers.js",value:"ethers"}],children:[(0,r.jsx)(a.Z,{value:"web3",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Web3 from "web3";\n\nconst web3 = new Web3(provider);\n'})})}),(0,r.jsx)(a.Z,{value:"ethers",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { ethers } from "ethers";\n\nconst provider = new ethers.providers.Web3Provider(provider);\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Once you have set up the provider, you can use the standard functions in the web3 library to get user's account, perform transactions, sign a message\netc. Here we have listed a few examples to help you get started."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["** Please refer to all the updated JSON RPC Methods with the Provider on the\n",(0,r.jsx)(n.a,{href:"https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods",children:"Official Ethereum Documentation"})," **"]})}),"\n",(0,r.jsx)(n.h3,{id:"get-user-account-and-balance",children:"Get User account and Balance"}),"\n",(0,r.jsx)(n.h4,{id:"web3ethgetaccounts",children:(0,r.jsx)(n.code,{children:"web3.eth.getAccounts()"})}),"\n",(0,r.jsx)(n.p,{children:"This method is used to fetch the address of the connected account."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// Get user's Ethereum public address\nconst address = (await web3.eth.getAccounts())[0];\n\n// Get user's balance in ether\nconst balance = web3.utils.fromWei(\n  await web3.eth.getBalance(address), // Balance is in wei\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"send-transaction",children:"Send Transaction"}),"\n",(0,r.jsx)(n.h4,{id:"web3ethsendtransactionobject",children:(0,r.jsx)(n.code,{children:"web3.eth.sendTransaction(object)"})}),"\n",(0,r.jsx)(n.p,{children:"This function is used to broadcast a transaction on chain."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// Get user\'s Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst destination = "0xE0cef4417a772512E6C95cEf366403839b0D6D6D";\nconst amount = web3.utils.toWei(1); // Convert 1 ether to wei\n\n// Submit transaction to the blockchain and wait for it to be mined\nconst receipt = await web3.eth.sendTransaction({\n  from: fromAddress,\n  to: destination,\n  value: amount,\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sign-a-message",children:"Sign a message"}),"\n",(0,r.jsx)(n.p,{children:"The following example shows how to sign different types of messages with the connected user's private key."}),"\n",(0,r.jsx)(n.h4,{id:"personal-sign",children:"Personal Sign"}),"\n",(0,r.jsx)(n.h4,{id:"web3ethpersonalsignoriginalmessage-fromaddress",children:(0,r.jsx)(n.code,{children:"web3.eth.personal.sign(originalMessage, fromAddress)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// Get user\'s Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = "YOUR_MESSAGE";\n\nconst signedMessage = await web3.eth.personal.sign(originalMessage, fromAddress);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"sign-typed-data-v1",children:"Sign Typed Data V1"}),"\n",(0,r.jsx)(n.h4,{id:"eth_signtypeddata",children:(0,r.jsx)(n.code,{children:"eth_signTypedData"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// Get user\'s Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = [\n  {\n    type: "string",\n    name: "fullName",\n    value: "John Doe",\n  },\n  {\n    type: "uint32",\n    name: "userId",\n    value: "1234",\n  },\n];\nconst params = [originalMessage, fromAddress];\nconst method = "eth_signTypedData";\n\nconst signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress,\n});\n'})}),"\n",(0,r.jsx)(n.h4,{id:"sign-typed-data-v3",children:"Sign Typed Data v3"}),"\n",(0,r.jsx)(n.h4,{id:"eth_signtypeddata_v3",children:(0,r.jsx)(n.code,{children:"eth_signTypedData_v3"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// Get user\'s Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {\n        name: "name",\n        type: "string",\n      },\n      {\n        name: "version",\n        type: "string",\n      },\n      {\n        name: "verifyingContract",\n        type: "address",\n      },\n    ],\n    Greeting: [\n      {\n        name: "contents",\n        type: "string",\n      },\n    ],\n  },\n  primaryType: "Greeting",\n  domain: {\n    name: "web3auth",\n    version: "1",\n    verifyingContract: "0xE0cef4417a772512E6C95cEf366403839b0D6D6D",\n  },\n  message: {\n    contents: "Hello, from web3auth!",\n  },\n};\nconst params = [fromAddress, originalMessage];\nconst method = "eth_signTypedData_v3";\n\nconst signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress,\n});\n'})}),"\n",(0,r.jsx)(n.h4,{id:"sign-typed-data-v4",children:"Sign Typed Data v4"}),"\n",(0,r.jsx)(n.h4,{id:"eth_signtypeddata_v4",children:(0,r.jsx)(n.code,{children:"eth_signTypedData_v4"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'/*\n  Sign Typed Data v4 adds support for\n  arrays and recursive data types.\n\n  Otherwise, it works the same as Sign Typed Data v3.\n*/\n\n// Get user\'s Ethereum public address\nconst fromAddress = (await web3.eth.getAccounts())[0];\n\nconst originalMessage = {\n  types: {\n    EIP712Domain: [\n      {\n        name: "name",\n        type: "string",\n      },\n      {\n        name: "version",\n        type: "string",\n      },\n      {\n        name: "verifyingContract",\n        type: "address",\n      },\n    ],\n    Greeting: [\n      {\n        name: "contents",\n        type: "string",\n      },\n    ],\n  },\n  primaryType: "Greeting",\n  domain: {\n    name: "web3auth",\n    version: "1",\n    verifyingContract: "0xE0cef4417a772512E6C95cEf366403839b0D6D6D",\n  },\n  message: {\n    contents: "Hello, from web3auth!",\n  },\n};\nconst params = [fromAddress, originalMessage];\nconst method = "eth_signTypedData_v4";\n\nconst signedMessage = await web3.currentProvider.sendAsync({\n  id: 1,\n  method,\n  params,\n  fromAddress,\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fetch-users-private-key",children:"Fetch User's Private Key"}),"\n",(0,r.jsx)(n.h4,{id:"eth_private_key",children:(0,r.jsx)(n.code,{children:"eth_private_key"})}),"\n",(0,r.jsxs)(n.p,{children:["This method is used to fetch the private key of logged in user. It is only available for ",(0,r.jsx)(n.code,{children:"in-app"})," adapters like ",(0,r.jsx)(n.code,{children:"openlogin"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'//Assuming user is already logged in.\nasync getPrivateKey() {\n  const privateKey = await web3auth.provider.request({\n    method: "eth_private_key"\n  });\n  //Do something with privateKey\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>s});t(67294);var r=t(36905);const i={tabItem:"tabItem_Ymn6"};var a=t(85893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,s),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(67294),i=t(36905),a=t(12466),s=t(16550),o=t(20469),d=t(91980),c=t(67392),l=t(50012);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d._X)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=u(e),[s,d]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[c,h]=g({queryString:t,groupId:i}),[m,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,a]=(0,l.Nk)(t);return[i,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:i}),x=(()=>{const e=c??m;return p({value:e,tabValues:a})?e:null})();(0,o.Z)((()=>{x&&d(x)}),[x]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),v(e)}),[h,v,a]),tabValues:a}}var v=t(72389);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(85893);function f(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:o}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.o5)(),l=e=>{const n=e.currentTarget,t=d.indexOf(n),i=o[t].value;i!==r&&(c(n),s(i))},h=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>d.push(e),onKeyDown:h,onClick:l,...a,className:(0,i.Z)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=m(e);return(0,b.jsxs)("div",{className:(0,i.Z)("tabs-container",x.tabList),children:[(0,b.jsx)(f,{...e,...n}),(0,b.jsx)(j,{...e,...n})]})}function w(e){const n=(0,v.Z)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(67294);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);