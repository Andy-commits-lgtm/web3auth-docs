"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[7536],{96938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var s=t(85893),i=t(11151);const d={title:"External Wallets",displayed_sidebar:"docs",description:"External Wallets | Documentation - Web3Auth",image:"images/docs-meta-cards/documentation-card.png"},r=void 0,a={id:"pnp/features/server-side-verification/external-wallets",title:"External Wallets",description:"External Wallets | Documentation - Web3Auth",source:"@site/docs/pnp/features/server-side-verification/external-wallets.mdx",sourceDirName:"pnp/features/server-side-verification",slug:"/pnp/features/server-side-verification/external-wallets",permalink:"/docs/pnp/features/server-side-verification/external-wallets",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/pnp/features/server-side-verification/external-wallets.mdx",tags:[],version:"current",frontMatter:{title:"External Wallets",displayed_sidebar:"docs",description:"External Wallets | Documentation - Web3Auth",image:"images/docs-meta-cards/documentation-card.png"},sidebar:"docs",previous:{title:"Social Login Users",permalink:"/docs/pnp/features/server-side-verification/social-login-users"},next:{title:"Interoperability",permalink:"/docs/pnp/features/interoperability"}},o={},l=[{value:"Get idToken",id:"get-idtoken",level:2},{value:"<code>authenticateUser</code>",id:"authenticateuser",level:3},{value:"Returns",id:"returns",level:4},{value:"Sample <code>idToken</code> payload",id:"sample-idtoken-payload",level:3},{value:"Verifying JWT Token (idToken)",id:"verifying-jwt-token-idtoken",level:2},{value:"Getting <code>address</code> and <code>idToken</code> in Frontend",id:"getting-address-and-idtoken-in-frontend",level:3},{value:"Verifying <code>idToken</code> in Backend",id:"verifying-idtoken-in-backend",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Web3Auth's SDK has abstracted the Server Side Verification Flow that was present in ",(0,s.jsx)(n.code,{children:"Auth.js"})," SDK aka Sign-in with Web3 to allow External Wallet users\nto login smoothly and allowing dApps to verify the JWT Token(",(0,s.jsx)(n.code,{children:"idToken"}),") using Web3Auth's JWKS endpoint."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["If you're still looking for the old flow, visit ",(0,s.jsx)(n.a,{href:"https://siww.web3auth.io/",children:"Sign-in with Web3"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"get-idtoken",children:"Get idToken"}),"\n",(0,s.jsxs)(n.p,{children:["After a user is logged in using one of the supported ",(0,s.jsx)(n.a,{href:"/sdk/pnp/web/adapters/#currently-available-adapters",children:"Wallets"}),". One can obtain the ",(0,s.jsx)(n.code,{children:"idToken"})," by\ncalling ",(0,s.jsx)(n.code,{children:"web3auth.authenticateUser()"})," of Web3Auth."]}),"\n",(0,s.jsx)(n.h3,{id:"authenticateuser",children:(0,s.jsx)(n.code,{children:"authenticateUser"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"await web3auth.authenticateUser();\n"})}),"\n",(0,s.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "idToken": "<jwtToken issued by Web3Auth>"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The External Wallet's ",(0,s.jsx)(n.code,{children:"idToken"})," payload is different than the Social login's ",(0,s.jsx)(n.code,{children:"idToken"}),"."]})}),"\n",(0,s.jsxs)(n.h3,{id:"sample-idtoken-payload",children:["Sample ",(0,s.jsx)(n.code,{children:"idToken"})," payload"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "iat": 1661158877,\n  "iss": "<issuer-name>",\n  "aud": "https://requesting.website",\n  "wallets": [\n    {\n      "address": "0x809d4310d578649d8539e718030ee11e603ee8f3",\n      "type": "ethereum"\n    }\n  ],\n  "exp": 1661245277\n}\n'})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"iat"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:'The "iat" (issued at) claim identifies the time at which the JWT was issued.'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"aud"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsxs)(n.td,{children:['The "audience" claim identifies the recipients that the JWT is intended for. (Here, it\'s ',(0,s.jsx)(n.code,{children:"website's url"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"iss"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsxs)(n.td,{children:['The "issuer" claim identifies who issued the JWT. ',(0,s.jsx)("br",{})," Here, issuer could be ",(0,s.jsx)(n.code,{children:"torus-evm"}),", ",(0,s.jsx)(n.code,{children:"torus-solana"}),", ",(0,s.jsx)(n.code,{children:"metamask"}),", ",(0,s.jsx)(n.code,{children:"phantom"}),", ",(0,s.jsx)(n.code,{children:"walletconnect-v1"}),", ",(0,s.jsx)(n.code,{children:"coinbase"}),", ",(0,s.jsx)(n.code,{children:"slope"}),", ",(0,s.jsx)(n.code,{children:"solflare"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"wallets"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"array"})}),(0,s.jsxs)(n.td,{children:["list of wallets for which this token is issued: ",(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"address"})," : Wallet public address"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"type"}),' Network Type such as "ethereum", "solana" or "starkware" incase of external wallets ']})]})]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"verifying-jwt-token-idtoken",children:"Verifying JWT Token (idToken)"}),"\n",(0,s.jsxs)(n.p,{children:["In order to verify the JWT Token(",(0,s.jsx)(n.code,{children:"idToken"}),") you need the wallet's ",(0,s.jsx)(n.code,{children:"address"})," and the ",(0,s.jsx)(n.code,{children:"idToken"})," obtained from the ",(0,s.jsx)(n.code,{children:"authenticateUser()"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"getting-address-and-idtoken-in-frontend",children:["Getting ",(0,s.jsx)(n.code,{children:"address"})," and ",(0,s.jsx)(n.code,{children:"idToken"})," in Frontend"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Get user\'s Ethereum public address\nconst address = (await web3.eth.getAccounts())[0];\n// Get user\'s Solana public address\nconst address = await solanaWallet.requestAccounts();\n\n// For other chains, please refer to https://web3auth.io/docs/connect-blockchain/\n\n/* Assuming user is logged in, get the token containtaing idToken */\nconst token = await web3auth.authenticateUser();\n\n// Verify idToken at your backend server\nconst res = await fetch("/api/verify", {\n  method: "POST",\n  headers: {\n    "Content-Type": "application/json",\n    Authorization: "Bearer " + token.idToken,\n  },\n  body: JSON.stringify({ public_address: address }),\n});\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"verifying-idtoken-in-backend",children:["Verifying ",(0,s.jsx)(n.code,{children:"idToken"})," in Backend"]}),"\n",(0,s.jsxs)(n.admonition,{title:"JWKS endpoint",type:"info",children:[(0,s.jsx)(n.p,{children:"Please note, the JWKS endpoint for External wallets are different from Social logins."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["JWKS Endpoint: ",(0,s.jsx)(n.code,{children:"https://authjs.web3auth.io/jwks"})]}),"\n"]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import * as jose from \"jose\"\n\n// passed from the frontend in the Authorization header\nconst idToken = req.headers.authorization?.split(' ')[1];\n\n// passed from the frontend in the request body\nconst publicAddress = req.body.public_address;\n\n// Get the JWK set used to sign the JWT issued by Web3Auth\n// highlight-next-line\nconst jwks = jose.createRemoteJWKSet(new URL(\"https://authjs.web3auth.io/jwks\"));\n\n// Verify the JWT using Web3Auth's JWKS\nconst jwtDecoded = await jose.jwtVerify(idToken, jwks, { algorithms: [\"ES256\"] });\n\n// Incase of Non-Torus Users\n// Checking Wallet's `publicAddress` against the decoded JWT wallet's address\nif ((jwtDecoded.payload as any).wallets[0].address.toLowerCase() === publicAddress.toLowerCase()) {\n  // Verified\n  res.status(200).json({name: 'Verification Successful'})\n} else {\n  res.status(400).json({name: 'Verification Failed'})\n}\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(67294);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);