"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[15618],{94054:n=>{n.exports=JSON.parse('{"Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/react-modal-quick-start/src/App.tsx":"import { useEffect, useState } from \\"react\\";\\n// IMP START - Quick Start\\nimport { Web3Auth } from \\"@web3auth/modal\\";\\nimport { CHAIN_NAMESPACES, IProvider } from \\"@web3auth/base\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\nimport \\"./App.css\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId =\\n  \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3Auth({\\n  clientId,\\n  chainConfig,\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n// IMP END - SDK Initialization\\n\\nfunction App() {\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [loggedIn, setLoggedIn] = useState(false);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.initModal();\\n        // IMP END - SDK Initialization\\n        setProvider(web3auth.provider);\\n\\n        if (web3auth.connected) {\\n          setLoggedIn(true);\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }, []);\\n\\n  const login = async () => {\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connect();\\n    // IMP END - Login\\n    setProvider(web3authProvider);\\n    if (web3auth.connected) {\\n      setLoggedIn(true);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    setProvider(null);\\n    setLoggedIn(false);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n    console.log(...args);\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <button onClick={login} className=\\"card\\">\\n      Login\\n    </button>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/modal\\" rel=\\"noreferrer\\">\\n          Web3Auth{\\" \\"}\\n        </a>\\n        & ReactJS (Webpack) Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{loggedIn ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-modal-sdk/quick-starts/react-modal-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/react-modal-quick-start/package.json":"{\\n  \\"name\\": \\"react-modal-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@types/node\\": \\"^18.11.18\\",\\n    \\"@types/react\\": \\"^18.0.26\\",\\n    \\"@types/react-dom\\": \\"^18.0.10\\",\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/modal\\": \\"^7.3.1\\",\\n    \\"react\\": \\"^18.2.0\\",\\n    \\"react-dom\\": \\"^18.2.0\\",\\n    \\"react-scripts\\": \\"5.0.1\\",\\n    \\"typescript\\": \\"^4.9.4\\",\\n    \\"web-vitals\\": \\"^3.1.0\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"eslintConfig\\": {\\n    \\"extends\\": [\\n      \\"react-app\\",\\n      \\"react-app/jest\\"\\n    ]\\n  },\\n  \\"browserslist\\": {\\n    \\"production\\": [\\n      \\"chrome >= 67\\",\\n      \\"edge >= 79\\",\\n      \\"firefox >= 68\\",\\n      \\"opera >= 54\\",\\n      \\"safari >= 14\\"\\n    ],\\n    \\"development\\": [\\n      \\"last 1 chrome version\\",\\n      \\"last 1 firefox version\\",\\n      \\"last 1 safari version\\"\\n    ]\\n  },\\n  \\"devDependencies\\": {\\n    \\"buffer\\": \\"^6.0.3\\",\\n    \\"eslint-config-react-app\\": \\"^7.0.1\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"react-app-rewired\\": \\"^2.2.1\\",\\n    \\"source-map-loader\\": \\"^4.0.1\\"\\n  },\\n  \\"scripts\\": {\\n    \\"start\\": \\"react-app-rewired start\\",\\n    \\"build\\": \\"react-app-rewired build\\",\\n    \\"test\\": \\"react-app-rewired test\\",\\n    \\"eject\\": \\"react-scripts eject\\",\\n    \\"lint\\": \\"react-scripts lint\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/react-modal-quick-start/config-overrides.js":"const webpack = require(\\"webpack\\");\\n\\nmodule.exports = function override(config) {\\n  const fallback = config.resolve.fallback || {};\\n  // IMP START - Bundler Issues\\n  Object.assign(fallback, {\\n    crypto: false,\\n    stream: false,\\n    assert: false,\\n    http: false,\\n    https: false,\\n    os: false,\\n    url: false,\\n    zlib: false\\n  });\\n  config.resolve.fallback = fallback;\\n  config.plugins = (config.plugins || []).concat([\\n    new webpack.ProvidePlugin({\\n      process: \\"process/browser\\",\\n      Buffer: [\\"buffer\\", \\"Buffer\\"],\\n    }),\\n  ]);\\n  // IMP END - Bundler Issues\\n  config.ignoreWarnings = [/Failed to parse source map/];\\n  config.module.rules.push({\\n    test: /\\\\.(js|mjs|jsx)$/,\\n    enforce: \\"pre\\",\\n    loader: require.resolve(\\"source-map-loader\\"),\\n    resolve: {\\n      fullySpecified: false,\\n    },\\n  });\\n  return config;\\n};\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/nextjs-modal-quick-start/app/page.tsx":"/* eslint-disable @typescript-eslint/no-use-before-define */\\n/* eslint-disable no-console */\\n/* eslint-disable @typescript-eslint/no-shadow */\\n\\n\\"use client\\";\\n\\nimport { useEffect, useState } from \\"react\\";\\n// IMP START - Quick Start\\nimport { Web3Auth } from \\"@web3auth/modal\\";\\nimport { CHAIN_NAMESPACES, IProvider } from \\"@web3auth/base\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId =\\n  \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3Auth({\\n  clientId,\\n  chainConfig,\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n// IMP END - SDK Initialization\\n\\nfunction App() {\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [loggedIn, setLoggedIn] = useState(false);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.initModal();\\n        // IMP END - SDK Initialization\\n        setProvider(web3auth.provider);\\n\\n        if (web3auth.connected) {\\n          setLoggedIn(true);\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }, []);\\n\\n  const login = async () => {\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connect();\\n    // IMP END - Login\\n    setProvider(web3authProvider);\\n    if (web3auth.connected) {\\n      setLoggedIn(true);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    setProvider(null);\\n    setLoggedIn(false);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n      console.log(...args);\\n    }\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <button onClick={login} className=\\"card\\">\\n      Login\\n    </button>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/modal\\" rel=\\"noreferrer\\">\\n          Web3Auth{\\" \\"}\\n        </a>\\n        & NextJS Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{loggedIn ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-modal-sdk/quick-starts/nextjs-modal-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/nextjs-modal-quick-start/package.json":"{\\n  \\"name\\": \\"nextjs-modal-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"dev\\": \\"next dev\\",\\n    \\"build\\": \\"next build\\",\\n    \\"start\\": \\"next start\\",\\n    \\"lint\\": \\"next lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/modal\\": \\"^7.3.1\\",\\n    \\"next\\": \\"13.4.9\\",\\n    \\"react\\": \\"18.2.0\\",\\n    \\"react-dom\\": \\"18.2.0\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@types/elliptic\\": \\"^6.4.14\\",\\n    \\"@types/node\\": \\"20.4.1\\",\\n    \\"@types/react\\": \\"18.2.14\\",\\n    \\"@types/react-dom\\": \\"18.2.7\\",\\n    \\"eslint\\": \\"8.44.0\\",\\n    \\"eslint-config-next\\": \\"13.4.9\\",\\n    \\"typescript\\": \\"5.1.6\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/angular-modal-quick-start/src/app/app.component.ts":"import { Component } from \\"@angular/core\\";\\n// IMP START - Quick Start\\nimport { CHAIN_NAMESPACES, IProvider } from \\"@web3auth/base\\";\\nimport { Web3Auth } from \\"@web3auth/modal\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3Auth({\\n  clientId,\\n  chainConfig,\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n// IMP END - SDK Initialization\\n\\n@Component({\\n  selector: \\"app-root\\",\\n  templateUrl: \\"./app.component.html\\",\\n  styleUrls: [\\"./app.component.css\\"],\\n})\\n\\nexport class AppComponent {\\n  title = \\"angular-app\\";\\n\\n  provider: IProvider | null = null;\\n\\n  isModalLoaded = false;\\n\\n  loggedIn = false;\\n\\n  async ngOnInit() {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.initModal();\\n        // IMP END - SDK Initialization\\n        this.provider = web3auth.provider;\\n\\n        if (web3auth.connected) {\\n          this.loggedIn = true;\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }\\n\\n  login = async () => {\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connect();\\n    // IMP END - Login\\n    this.provider = web3authProvider;\\n    if (web3auth.connected) {\\n      this.loggedIn = true;\\n    }\\n  };\\n\\n  getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    this.uiConsole(user);\\n  };\\n\\n  logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    this.provider = null;\\n    this.loggedIn = false;\\n    this.uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  getAccounts = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    this.uiConsole(address);\\n  };\\n\\n  getBalance = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    this.uiConsole(balance);\\n  };\\n\\n  signMessage = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    this.uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  uiConsole(...args: any[]) {\\n    const el = document.querySelector(\\"#console-ui>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n  }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/angular-modal-quick-start/src/app/app.component.html":"<div class=\\"content\\">\\n  <h1 class=\\"title\\">\\n    <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/modal\\">Web3Auth</a> & AngularJS\\n    Example\\n  </h1>\\n  <div class=\\"setting\\">\\n    <div\\n      *ngIf=\\"loggedIn; else elseBlock\\"\\n      class=\\"card-container\\"\\n    >\\n      <button class=\\"card card-small\\" (click)=\\"getUserInfo()\\">\\n        Get User Info\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getAccounts()\\">\\n        Get Accounts\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getBalance()\\">\\n        Get Balance\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"signMessage()\\">\\n        Sign Message\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"logout()\\">Log Out</button>\\n    </div>\\n    <ng-template #elseBlock>\\n      <div class=\\"card-container\\">\\n        <button class=\\"card card-small\\" (click)=\\"login()\\">Login</button>\\n      </div>\\n    </ng-template>\\n    <div class=\\"console\\" id=\\"console-ui\\">\\n      <p class=\\"code\\">Logged In</p>\\n    </div>\\n  </div>\\n  <footer class=\\"footer\\">\\n    <a\\n      href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-modal-sdk/quick-starts/angular-modal-quick-start\\"\\n      target=\\"_blank\\"\\n      rel=\\"noopener noreferrer\\"\\n    >\\n      Source code\\n    </a>\\n  </footer>\\n</div>\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/angular-modal-quick-start/src/polyfills.ts":"/* eslint-disable @typescript-eslint/no-var-requires */\\nimport \\"zone.js\\"; // Included with Angular CLI.\\n\\n// IMP START - Bundler Issues\\n(window as any).global = window;\\nglobal.Buffer = global.Buffer || require(\\"buffer\\").Buffer;\\nglobal.process = global.process || require(\\"process\\");\\n// IMP END - Bundler Issues\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/angular-modal-quick-start/package.json":"{\\n  \\"name\\": \\"angular-modal-quick-start\\",\\n  \\"version\\": \\"0.0.0\\",\\n  \\"scripts\\": {\\n    \\"ng\\": \\"ng\\",\\n    \\"start\\": \\"ng serve\\",\\n    \\"build\\": \\"ng build\\",\\n    \\"watch\\": \\"ng build --watch --configuration development\\",\\n    \\"test\\": \\"ng test\\",\\n    \\"lint\\": \\"ng line\\"\\n  },\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@angular/animations\\": \\"~14.2.7\\",\\n    \\"@angular/common\\": \\"~14.2.7\\",\\n    \\"@angular/compiler\\": \\"~14.2.7\\",\\n    \\"@angular/core\\": \\"~14.2.7\\",\\n    \\"@angular/forms\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser-dynamic\\": \\"~14.2.7\\",\\n    \\"@angular/router\\": \\"~14.2.7\\",\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/modal\\": \\"^7.3.1\\",\\n    \\"empty-module\\": \\"^0.0.2\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@angular-devkit/build-angular\\": \\"~14.2.6\\",\\n    \\"@angular/cli\\": \\"~14.2.6\\",\\n    \\"@angular/compiler-cli\\": \\"~14.2.7\\",\\n    \\"@types/jasmine\\": \\"~4.3.0\\",\\n    \\"@types/keccak\\": \\"^3.0.1\\",\\n    \\"@types/node\\": \\"^18.11.2\\",\\n    \\"@types/readable-stream\\": \\"^2.3.14\\",\\n    \\"jasmine-core\\": \\"~4.4.0\\",\\n    \\"karma\\": \\"~6.4.1\\",\\n    \\"karma-chrome-launcher\\": \\"~3.1.1\\",\\n    \\"karma-coverage\\": \\"~2.2.0\\",\\n    \\"karma-jasmine\\": \\"~5.1.0\\",\\n    \\"karma-jasmine-html-reporter\\": \\"~2.0.0\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"typescript\\": \\"~4.8.0\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/angular-modal-quick-start/tsconfig.json":"/* To learn more about this file see: https://angular.io/config/tsconfig. */\\n{\\n  \\"compileOnSave\\": false,\\n  \\"compilerOptions\\": {\\n    \\"baseUrl\\": \\"./\\",\\n    \\"outDir\\": \\"./dist/out-tsc\\",\\n    \\"forceConsistentCasingInFileNames\\": true,\\n    \\"strict\\": true,\\n    \\"noImplicitOverride\\": true,\\n    \\"noPropertyAccessFromIndexSignature\\": true,\\n    \\"noImplicitReturns\\": true,\\n    \\"noFallthroughCasesInSwitch\\": true,\\n    \\"sourceMap\\": true,\\n    \\"declaration\\": false,\\n    \\"downlevelIteration\\": true,\\n    \\"experimentalDecorators\\": true,\\n    \\"moduleResolution\\": \\"node\\",\\n    \\"importHelpers\\": true,\\n    \\"skipLibCheck\\": true,\\n    \\"target\\": \\"es2020\\",\\n    \\"module\\": \\"es2020\\",\\n    \\"lib\\": [\\n      \\"es2020\\",\\n      \\"dom\\"\\n    ],\\n    \\"paths\\":{\\n      \\"crypto\\": [\\"./node_modules/empty-module\\"],\\n      \\"stream\\": [\\"./node_modules/empty-module\\"],\\n      \\"assert\\": [\\"./node_modules/empty-module\\"],\\n      \\"http\\": [\\"./node_modules/empty-module\\"],\\n      \\"https\\": [\\"./node_modules/empty-module\\"],\\n      \\"os\\": [\\"./node_modules/empty-module\\"],\\n      \\"zlib\\": [\\"./node_modules/empty-module\\"],\\n      \\"url\\": [\\"./node_modules/empty-module\\"],\\n      \\"process\\": [\\"./node_modules/process\\"]\\n    }\\n  },\\n  \\"angularCompilerOptions\\": {\\n    \\"enableI18nLegacyMessageIdFormat\\": false,\\n    \\"strictInjectionParameters\\": true,\\n    \\"strictInputAccessModifiers\\": true,\\n    \\"strictTemplates\\": true\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/vanillajs-modal-quick-start/index.html":"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Web3Auth Getting Started</title>\\n  <meta charset=\\"UTF-8\\" />\\n  <link rel=\\"stylesheet\\" href=\\"style.css\\" />\\n</head>\\n\\n<body>\\n  <div class=\\"container\\">\\n    <h1 class=\\"title\\">\\n      <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/modal\\">Web3Auth</a> & JS Ethereum\\n      Example\\n    </h1>\\n    \x3c!-- Logged In --\x3e\\n    <div class=\\"grid btn-logged-in\\">\\n      <button id=\\"get-user-info\\" class=\\"btn\\">Get User Info</button>\\n      <button id=\\"get-accounts\\" class=\\"btn\\">Get Accounts</button>\\n      <button id=\\"get-balance\\" class=\\"btn\\">Get Balance</button>\\n      <button id=\\"sign-message\\" class=\\"btn\\">Sign Message</button>\\n      <button id=\\"logout\\" class=\\"btn\\">Logout</button>\\n      <div class=\\"console\\" id=\\"console\\">\\n        <p id=\\"code\\" class=\\"code\\"></p>\\n      </div>\\n    </div>\\n\\n    \x3c!-- Logged Logout --\x3e\\n    <div class=\\"grid btn-logged-out\\">\\n      <button id=\\"login\\" class=\\"btn\\">Login</button>\\n    </div>\\n    <footer class=\\"footer\\">\\n      <a href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-modal-sdk/quick-starts/vanillajs-modal-quick-start\\"\\n        target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n        Source code\\n      </a>\\n    </footer>\\n  </div>\\n\\n  <script src=\\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\\"><\/script>\\n  <script src=\\"https://cdn.jsdelivr.net/npm/buffer@6\\"><\/script>\\n  \x3c!--IMP START - Quick Start--\x3e\\n  <script src=\\"https://cdn.jsdelivr.net/npm/@web3auth/modal\\"><\/script>\\n  \x3c!--IMP END - Quick Start--\x3e\\n  <script src=\\"https://cdn.jsdelivr.net/npm/web3@4.1.1/dist/web3.min.js\\"><\/script>\\n  <script src=\\"script.js\\"><\/script>\\n</body>\\n\\n</html>","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/vanillajs-modal-quick-start/script.js":"let web3auth = null;\\n\\n(async function init() {\\n  $(\\".btn-logged-in\\").hide();\\n  $(\\"#sign-tx\\").hide();\\n  // IMP START - SDK Initialization\\n  // IMP START - Dashboard Registration\\n\\n  const clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get your clientId from https://dashboard.web3auth.io\\n  // IMP END - Dashboard Registration\\n\\n  const chainConfig = {\\n    chainNamespace: \\"eip155\\",\\n    chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n    rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n    displayName: \\"Ethereum Mainnet\\",\\n    blockExplorer: \\"https://etherscan.io/\\",\\n    ticker: \\"ETH\\",\\n    tickerName: \\"Ethereum\\",\\n  };\\n\\n  web3auth = new window.Modal.Web3Auth({\\n    clientId,\\n    chainConfig,\\n    web3AuthNetwork: \\"sapphire_mainnet\\",\\n  });\\n\\n  await web3auth.initModal();\\n  // IMP END - SDK Initialization\\n\\n  if (web3auth.connected) {\\n    $(\\".btn-logged-in\\").show();\\n    $(\\".btn-logged-out\\").hide();\\n    if (web3auth.connected === \\"openlogin\\") {\\n      $(\\"#sign-tx\\").show();\\n    }\\n  } else {\\n    $(\\".btn-logged-out\\").show();\\n    $(\\".btn-logged-in\\").hide();\\n  }\\n})();\\n\\n$(\\"#login\\").click(async function (event) {\\n  try {\\n    // IMP START - Login\\n    await web3auth.connect();\\n    // IMP END - Login\\n    $(\\".btn-logged-out\\").hide();\\n    $(\\".btn-logged-in\\").show();\\n    uiConsole(\\"Logged in Successfully!\\");\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#get-user-info\\").click(async function (event) {\\n  try {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n// IMP START - Blockchain Calls\\n$(\\"#get-accounts\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#get-balance\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#sign-message\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n// IMP END - Blockchain Calls\\n\\n$(\\"#logout\\").click(async function (event) {\\n  try {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    $(\\".btn-logged-in\\").hide();\\n    $(\\".btn-logged-out\\").show();\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\nfunction uiConsole(...args) {\\n  const el = document.querySelector(\\"#console>p\\");\\n  if (el) {\\n    el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    console.log(...args);\\n  }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/vanillajs-modal-quick-start/style.css":"html,\\nbody {\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tfont-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\\n\\t\\tUbuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\\n}\\n\\na {\\n\\tcolor: inherit;\\n\\ttext-decoration: none;\\n}\\n\\n* {\\n\\tbox-sizing: border-box;\\n}\\n.container {\\n\\twidth: 60%;\\n\\tmargin: auto;\\n\\tpadding: 0 2rem;\\n}\\n\\n.main {\\n\\tmin-height: 100vh;\\n\\tpadding: 4rem 0;\\n\\tflex: 1;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n}\\n\\n.title {\\n\\tline-height: 1.15;\\n\\tfont-size: 3rem;\\n\\ttext-align: center;\\n\\tmargin: 50px;\\n}\\n\\n.title a {\\n\\tcolor: #0070f3;\\n\\ttext-decoration: none;\\n}\\n\\n.console {\\n\\tmax-width: 100%;\\n}\\n\\n.code {\\n\\tbackground: #fafafa;\\n\\tborder-radius: 5px;\\n\\tpadding: 0.75rem;\\n\\tfont-size: 1.1rem;\\n\\tfont-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\\n\\t\\tBitstream Vera Sans Mono, Courier New, monospace;\\n\\toverflow-wrap: break-word;\\n}\\n\\n.grid {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tflex-direction: column;\\n}\\n\\n.btn {\\n\\tmargin: 0.5rem;\\n\\tpadding: 0.7rem;\\n\\ttext-align: center;\\n\\tcolor: #0070f3;\\n\\ttext-decoration: none;\\n\\tborder: 1px solid #0070f3;\\n\\tborder-radius: 10px;\\n\\ttransition: color 0.15s ease, border-color 0.15s ease;\\n\\twidth: 100%;\\n\\tbackground-color: white;\\n}\\n\\n.btn:hover,\\n.btn:focus,\\n.btn:active {\\n\\tcursor: pointer;\\n\\tbackground-color: #fafafa;\\n}\\n\\n.row {\\n\\tdisplay: flex;\\n\\tmargin-bottom: 0.5rem;\\n\\twidth: 100%;\\n}\\n.label {\\n\\tflex-basis: 45%;\\n\\tpadding-right: 10px;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: right;\\n\\tfont-weight: bold;\\n}\\n\\n.select {\\n\\tflex-basis: 30%;\\n\\ttext-align: left;\\n\\tpadding: 0.3rem 0.8rem;\\n\\tfont-size: 1rem;\\n\\tborder-radius: 8px;\\n}\\n\\n.footer {\\n\\tdisplay: flex;\\n\\tflex: 1;\\n\\tpadding: 2rem 0;\\n\\tborder-top: 1px solid #eaeaea;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tmargin-top: 10rem;\\n}\\n\\n.footer a {\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tflex-grow: 1;\\n}\\n\\n.logo {\\n\\theight: 1.5rem;\\n\\tmargin-left: 0.5rem;\\n}\\n\\n@media (max-width: 1200px) {\\n\\t.container {\\n\\t\\twidth: 100%;\\n\\t}\\n}\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/vue-modal-quick-start/vue.config.js":"const { defineConfig } = require(\\"@vue/cli-service\\");\\nconst { ProvidePlugin } = require(\\"webpack\\");\\nconst { BundleAnalyzerPlugin } = require(\\"webpack-bundle-analyzer\\");\\n\\nmodule.exports = defineConfig({\\n  transpileDependencies: true,\\n  lintOnSave: false,\\n  // IMP START - Bundler Issues\\n  configureWebpack: (config) => {\\n    config.devtool = \\"source-map\\";\\n    config.resolve.symlinks = false;\\n    config.resolve.fallback = {\\n      crypto: false,\\n      stream: false,\\n      assert: false,\\n      os: false,\\n      https: false,\\n      http: false,\\n      url: \\"url\\",\\n      zlib: false,\\n    };\\n    config.plugins.push(new ProvidePlugin({ Buffer: [\\"buffer\\", \\"Buffer\\"] }));\\n    config.plugins.push(new ProvidePlugin({ process: [\\"process/browser\\"] }));\\n    // IMP END - Bundler Issues\\n    config.plugins.push(\\n      new BundleAnalyzerPlugin({\\n        analyzerMode: \\"disabled\\",\\n      })\\n    );\\n  },\\n});\\n","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/vue-modal-quick-start/package.json":"{\\n  \\"name\\": \\"vue-modal-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"serve\\": \\"vue-cli-service serve\\",\\n    \\"build\\": \\"vue-cli-service build\\",\\n    \\"lint\\": \\"vue-cli-service lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/modal\\": \\"^7.3.1\\",\\n    \\"core-js\\": \\"^3.26.1\\",\\n    \\"vue\\": \\"^3.3.4\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@typescript-eslint/eslint-plugin\\": \\"^5.46.1\\",\\n    \\"@typescript-eslint/parser\\": \\"^5.46.1\\",\\n    \\"@vue/cli-plugin-babel\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-eslint\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-typescript\\": \\"~5.0.8\\",\\n    \\"@vue/cli-service\\": \\"~5.0.8\\",\\n    \\"@vue/eslint-config-typescript\\": \\"^11.0.2\\",\\n    \\"eslint\\": \\"^8.29.0\\",\\n    \\"eslint-plugin-vue\\": \\"^9.8.0\\",\\n    \\"typescript\\": \\"~4.9.4\\",\\n    \\"url\\": \\"^0.11.3\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-modal-sdk/quick-starts/vue-modal-quick-start/src/Home.vue":"\x3c!-- eslint-disable vue/no-ref-as-operand --\x3e\\n<template>\\n  <div id=\\"app\\">\\n    <h2>\\n      <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/modal\\" rel=\\"noreferrer\\">\\n        Web3Auth\\n      </a>\\n      Vue.js Quick Start\\n    </h2>\\n\\n    <button v-if=\\"!loggedIn\\" class=\\"card\\" @click=\\"login\\" style=\\"cursor: pointer\\">\\n      Login\\n    </button>\\n\\n    <div v-if=\\"loggedIn\\">\\n      <div class=\\"flex-container\\">\\n        <div>\\n          <button class=\\"card\\" @click=\\"getUserInfo\\" style=\\"cursor: pointer\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getAccounts\\" style=\\"cursor: pointer\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getBalance\\" style=\\"cursor: pointer\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"signMessage\\" style=\\"cursor: pointer\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"logout\\" style=\\"cursor: pointer\\">\\n            Logout\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\"console\\" style=\\"white-space: pre-line\\">\\n      <p style=\\"white-space: pre-line\\"></p>\\n    </div>\\n\\n    <footer class=\\"footer\\">\\n      <a href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-modal-sdk/quick-starts/vue-modal-quick-start\\"\\n        target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n        Source code\\n      </a>\\n    </footer>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\nimport { ref, onMounted } from \\"vue\\";\\n// IMP START - Quick Start\\nimport { Web3Auth } from \\"@web3auth/modal\\";\\nimport { CHAIN_NAMESPACES, IProvider } from \\"@web3auth/base\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\nexport default {\\n  // eslint-disable-next-line vue/multi-word-component-names\\n  name: \\"Home\\",\\n  props: {\\n    msg: String,\\n  },\\n  setup() {\\n    const loggedIn = ref<boolean>(false);\\n    let provider = <IProvider | null>(null);\\n\\n    // IMP START - SDK Initialization\\n    // IMP START - Dashboard Registration\\n    const clientId =\\n      \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n    // IMP END - Dashboard Registration\\n\\n    const chainConfig = {\\n      chainNamespace: CHAIN_NAMESPACES.EIP155,\\n      chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n      rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n      displayName: \\"Ethereum Mainnet\\",\\n      blockExplorer: \\"https://etherscan.io/\\",\\n      ticker: \\"ETH\\",\\n      tickerName: \\"Ethereum\\",\\n    };\\n\\n    const web3auth = new Web3Auth({\\n      clientId,\\n      chainConfig,\\n      web3AuthNetwork: \\"sapphire_mainnet\\",\\n    });\\n    // IMP END - SDK Initialization\\n\\n    onMounted(async () => {\\n      const init = async () => {\\n        try {\\n          // IMP START - SDK Initialization\\n          await web3auth.initModal();\\n          // IMP END - SDK Initialization\\n          provider = web3auth.provider;\\n\\n          if (web3auth.connected) {\\n            loggedIn.value = true;\\n          }\\n        } catch (error) {\\n          console.error(error);\\n        }\\n      };\\n\\n      init();\\n    });\\n\\n    const login = async () => {\\n      // IMP START - Login\\n      provider = await web3auth.connect();\\n      // IMP END - Login\\n      if (web3auth.connected) {\\n        loggedIn.value = true;\\n      }\\n    };\\n\\n    const getUserInfo = async () => {\\n      // IMP START - Get User Information\\n      const user = await web3auth.getUserInfo();\\n      // IMP END - Get User Information\\n      uiConsole(user);\\n    };\\n\\n    const logout = async () => {\\n      // IMP START - Logout\\n      await web3auth.logout();\\n      // IMP END - Logout\\n      provider = null;\\n      loggedIn.value = false;\\n      uiConsole(\\"logged out\\");\\n    };\\n\\n    // IMP START - Blockchain Calls\\n    const getAccounts = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = await web3.eth.getAccounts();\\n      uiConsole(address);\\n    };\\n\\n    const getBalance = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = (await web3.eth.getAccounts())[0];\\n\\n      // Get user\'s balance in ether\\n      const balance = web3.utils.fromWei(\\n        await web3.eth.getBalance(address), // Balance is in wei\\n        \\"ether\\"\\n      );\\n      uiConsole(balance);\\n    };\\n\\n    const signMessage = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n      const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n      // Sign the message\\n      const signedMessage = await web3.eth.personal.sign(\\n        originalMessage,\\n        fromAddress,\\n        \\"test password!\\" // configure your own password here.\\n      );\\n      uiConsole(signedMessage);\\n    };\\n    // IMP END - Blockchain Calls\\n\\n    function uiConsole(...args: any[]): void {\\n      const el = document.querySelector(\\"#console>p\\");\\n      if (el) {\\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\\n      }\\n      console.log(...args);\\n    }\\n\\n    return {\\n      loggedIn,\\n      provider,\\n      web3auth,\\n      login,\\n      logout,\\n      getUserInfo,\\n      getAccounts,\\n      getBalance,\\n      signMessage,\\n    };\\n  },\\n};\\n<\/script>\\n\\n\x3c!-- Add \\"scoped\\" attribute to limit CSS to this component only --\x3e\\n<style scoped>\\n#app {\\n  width: 80%;\\n  margin: auto;\\n  padding: 0 2rem;\\n}\\n\\nh3 {\\n  margin: 40px 0 0;\\n}\\n\\nul {\\n  list-style-type: none;\\n  padding: 0;\\n}\\n\\nli {\\n  display: inline-block;\\n  margin: 0 10px;\\n}\\n\\na {\\n  color: #42b983;\\n}\\n\\n.card {\\n  margin: 0.5rem;\\n  padding: 0.7rem;\\n  text-align: center;\\n  color: #0070f3;\\n  background-color: #fafafa;\\n  text-decoration: none;\\n  border: 1px solid #0070f3;\\n  border-radius: 10px;\\n  transition: color 0.15s ease, border-color 0.15s ease;\\n  width: 100%;\\n}\\n\\n.card:hover,\\n.card:focus,\\n.card:active {\\n  cursor: pointer;\\n  background-color: #f1f1f1;\\n}\\n\\n.flex-container {\\n  display: flex;\\n  flex-flow: row wrap;\\n}\\n\\n.flex-container>div {\\n  width: 100px;\\n  margin: 10px;\\n  text-align: center;\\n  line-height: 75px;\\n  font-size: 30px;\\n}\\n\\n#console {\\n  width: 100%;\\n  height: 100%;\\n  overflow: auto;\\n  word-wrap: break-word;\\n  font-size: 16px;\\n  font-family: monospace;\\n  text-align: left;\\n}\\n</style>\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/react-no-modal-quick-start/src/App.tsx":"import { useEffect, useState } from \\"react\\";\\n// IMP START - Quick Start\\nimport { Web3AuthNoModal } from \\"@web3auth/no-modal\\";\\nimport { CHAIN_NAMESPACES, IProvider, WALLET_ADAPTERS } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\nimport { OpenloginAdapter } from \\"@web3auth/openlogin-adapter\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\nimport \\"./App.css\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId =\\n  \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3AuthNoModal({\\n  clientId,\\n  chainConfig,\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n\\nconst privateKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig } });\\nconst openloginAdapter = new OpenloginAdapter({\\n  privateKeyProvider: privateKeyProvider,\\n});\\nweb3auth.configureAdapter(openloginAdapter);\\n// IMP END - SDK Initialization\\n\\nfunction App() {\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [loggedIn, setLoggedIn] = useState(false);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.init();\\n        // IMP END - SDK Initialization\\n        setProvider(web3auth.provider);\\n\\n        if (web3auth.connected) {\\n          setLoggedIn(true);\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }, []);\\n\\n  const login = async () => {\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connectTo(\\n      WALLET_ADAPTERS.OPENLOGIN,\\n      {\\n        loginProvider: \\"google\\",\\n      }\\n    );\\n    // IMP END - Login\\n    setProvider(web3authProvider);\\n    if (web3auth.connected) {\\n      setLoggedIn(true);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    setProvider(null);\\n    setLoggedIn(false);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n    console.log(...args);\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <button onClick={login} className=\\"card\\">\\n      Login\\n    </button>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/no-modal\\" rel=\\"noreferrer\\">\\n          Web3Auth{\\" \\"}\\n        </a>\\n        & ReactJS (Webpack) Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{loggedIn ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-no-modal-sdk/quick-starts/react-no-modal-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/react-no-modal-quick-start/package.json":"{\\n  \\"name\\": \\"react-no-modal-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@types/node\\": \\"^18.11.18\\",\\n    \\"@types/react\\": \\"^18.0.26\\",\\n    \\"@types/react-dom\\": \\"^18.0.10\\",\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/no-modal\\": \\"^7.3.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.3.1\\",\\n    \\"@web3auth/openlogin-adapter\\": \\"^7.3.1\\",\\n    \\"react\\": \\"^18.2.0\\",\\n    \\"react-dom\\": \\"^18.2.0\\",\\n    \\"react-scripts\\": \\"5.0.1\\",\\n    \\"typescript\\": \\"^4.9.4\\",\\n    \\"web-vitals\\": \\"^3.1.0\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"eslintConfig\\": {\\n    \\"extends\\": [\\n      \\"react-app\\",\\n      \\"react-app/jest\\"\\n    ]\\n  },\\n  \\"browserslist\\": {\\n    \\"production\\": [\\n      \\"chrome >= 67\\",\\n      \\"edge >= 79\\",\\n      \\"firefox >= 68\\",\\n      \\"opera >= 54\\",\\n      \\"safari >= 14\\"\\n    ],\\n    \\"development\\": [\\n      \\"last 1 chrome version\\",\\n      \\"last 1 firefox version\\",\\n      \\"last 1 safari version\\"\\n    ]\\n  },\\n  \\"devDependencies\\": {\\n    \\"buffer\\": \\"^6.0.3\\",\\n    \\"eslint-config-react-app\\": \\"^7.0.1\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"react-app-rewired\\": \\"^2.2.1\\",\\n    \\"source-map-loader\\": \\"^4.0.1\\"\\n  },\\n  \\"scripts\\": {\\n    \\"start\\": \\"react-app-rewired start\\",\\n    \\"build\\": \\"react-app-rewired build\\",\\n    \\"test\\": \\"react-app-rewired test\\",\\n    \\"eject\\": \\"react-scripts eject\\",\\n    \\"lint\\": \\"react-scripts lint\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/react-no-modal-quick-start/config-overrides.js":"const webpack = require(\\"webpack\\");\\n\\nmodule.exports = function override(config) {\\n  const fallback = config.resolve.fallback || {};\\n  // IMP START - Bundler Issues\\n  Object.assign(fallback, {\\n    crypto: false,\\n    stream: false,\\n    assert: false,\\n    http: false,\\n    https: false,\\n    os: false,\\n    url: false,\\n    zlib: false,\\n  });\\n  config.resolve.fallback = fallback;\\n  config.plugins = (config.plugins || []).concat([\\n    new webpack.ProvidePlugin({\\n      process: \\"process/browser\\",\\n      Buffer: [\\"buffer\\", \\"Buffer\\"],\\n    }),\\n  ]);\\n  // IMP END - Bundler Issues\\n  config.ignoreWarnings = [/Failed to parse source map/];\\n  config.module.rules.push({\\n    test: /\\\\.(js|mjs|jsx)$/,\\n    enforce: \\"pre\\",\\n    loader: require.resolve(\\"source-map-loader\\"),\\n    resolve: {\\n      fullySpecified: false,\\n    },\\n  });\\n  return config;\\n};\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/nextjs-no-modal-quick-start/app/page.tsx":"/* eslint-disable @typescript-eslint/no-use-before-define */\\n/* eslint-disable no-console */\\n/* eslint-disable @typescript-eslint/no-shadow */\\n\\n\\"use client\\";\\n\\nimport { useEffect, useState } from \\"react\\";\\n// IMP START - Quick Start\\nimport { Web3AuthNoModal } from \\"@web3auth/no-modal\\";\\nimport { CHAIN_NAMESPACES, IProvider, WALLET_ADAPTERS } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\nimport { OpenloginAdapter } from \\"@web3auth/openlogin-adapter\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId =\\n  \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3AuthNoModal({\\n  clientId,\\n  chainConfig,\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n\\nconst privateKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig } });\\nconst openloginAdapter = new OpenloginAdapter({\\n  privateKeyProvider: privateKeyProvider,\\n});\\nweb3auth.configureAdapter(openloginAdapter);\\n// IMP END - SDK Initialization\\n\\nfunction App() {\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [loggedIn, setLoggedIn] = useState(false);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.init();\\n        // IMP END - SDK Initialization\\n        setProvider(web3auth.provider);\\n\\n        if (web3auth.connected) {\\n          setLoggedIn(true);\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }, []);\\n\\n  const login = async () => {\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connectTo(\\n      WALLET_ADAPTERS.OPENLOGIN,\\n      {\\n        loginProvider: \\"google\\",\\n      }\\n    );\\n    // IMP END - Login\\n    setProvider(web3authProvider);\\n    if (web3auth.connected) {\\n      setLoggedIn(true);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    setProvider(null);\\n    setLoggedIn(false);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n      console.log(...args);\\n    }\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <button onClick={login} className=\\"card\\">\\n      Login\\n    </button>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/no-modal\\" rel=\\"noreferrer\\">\\n          Web3Auth{\\" \\"}\\n        </a>\\n        & NextJS Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{loggedIn ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-no-modal-sdk/quick-starts/nextjs-no-modal-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/nextjs-no-modal-quick-start/package.json":"{\\n  \\"name\\": \\"nextjs-no-modal-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"dev\\": \\"next dev\\",\\n    \\"build\\": \\"next build\\",\\n    \\"start\\": \\"next start\\",\\n    \\"lint\\": \\"next lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/no-modal\\": \\"^7.3.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.3.1\\",\\n    \\"@web3auth/openlogin-adapter\\": \\"^7.3.1\\",\\n    \\"next\\": \\"13.4.9\\",\\n    \\"react\\": \\"18.2.0\\",\\n    \\"react-dom\\": \\"18.2.0\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@types/elliptic\\": \\"^6.4.14\\",\\n    \\"@types/node\\": \\"20.4.1\\",\\n    \\"@types/react\\": \\"18.2.14\\",\\n    \\"@types/react-dom\\": \\"18.2.7\\",\\n    \\"eslint\\": \\"8.44.0\\",\\n    \\"eslint-config-next\\": \\"13.4.9\\",\\n    \\"typescript\\": \\"5.1.6\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/angular-no-modal-quick-start/src/app/app.component.ts":"import { Component } from \\"@angular/core\\";\\n// IMP START - Quick Start\\nimport { Web3AuthNoModal } from \\"@web3auth/no-modal\\";\\nimport { CHAIN_NAMESPACES, IProvider, WALLET_ADAPTERS } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\nimport { OpenloginAdapter } from \\"@web3auth/openlogin-adapter\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3AuthNoModal({\\n  clientId,\\n  chainConfig,\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n\\nconst privateKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig } });\\nconst openloginAdapter = new OpenloginAdapter({\\n  privateKeyProvider: privateKeyProvider,\\n});\\nweb3auth.configureAdapter(openloginAdapter);\\n// IMP END - SDK Initialization\\n\\n@Component({\\n  selector: \\"app-root\\",\\n  templateUrl: \\"./app.component.html\\",\\n  styleUrls: [\\"./app.component.css\\"],\\n})\\n\\nexport class AppComponent {\\n  title = \\"angular-app\\";\\n\\n  provider: IProvider | null = null;\\n\\n  isModalLoaded = false;\\n\\n  loggedIn = false;\\n\\n  async ngOnInit() {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.init();\\n        // IMP END - SDK Initialization\\n        this.provider = web3auth.provider;\\n\\n        if (web3auth.connected) {\\n          this.loggedIn = true;\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }\\n\\n  login = async () => {\\n    // IMP START - Login\\n\\n    const web3authProvider = await web3auth.connectTo(\\n      WALLET_ADAPTERS.OPENLOGIN,\\n      {\\n        loginProvider: \\"google\\",\\n      }\\n    );\\n    // IMP END - Login\\n\\n    this.provider = web3authProvider;\\n    if (web3auth.connected) {\\n      this.loggedIn = true;\\n    }\\n  };\\n\\n  getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    this.uiConsole(user);\\n  };\\n\\n  logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    this.provider = null;\\n    this.loggedIn = false;\\n    this.uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  getAccounts = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    this.uiConsole(address);\\n  };\\n\\n  getBalance = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    this.uiConsole(balance);\\n  };\\n\\n  signMessage = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    this.uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  uiConsole(...args: any[]) {\\n    const el = document.querySelector(\\"#console-ui>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n  }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/angular-no-modal-quick-start/src/app/app.component.html":"<div class=\\"content\\">\\n  <h1 class=\\"title\\">\\n    <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/no-modal\\">Web3Auth</a> & AngularJS\\n    Example\\n  </h1>\\n  <div class=\\"setting\\">\\n    <div\\n      *ngIf=\\"loggedIn; else elseBlock\\"\\n      class=\\"card-container\\"\\n    >\\n      <button class=\\"card card-small\\" (click)=\\"getUserInfo()\\">\\n        Get User Info\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getAccounts()\\">\\n        Get Accounts\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getBalance()\\">\\n        Get Balance\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"signMessage()\\">\\n        Sign Message\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"logout()\\">Log Out</button>\\n    </div>\\n    <ng-template #elseBlock>\\n      <div class=\\"card-container\\">\\n        <button class=\\"card card-small\\" (click)=\\"login()\\">Login</button>\\n      </div>\\n    </ng-template>\\n    <div class=\\"console\\" id=\\"console-ui\\">\\n      <p class=\\"code\\">Logged In</p>\\n    </div>\\n  </div>\\n  <footer class=\\"footer\\">\\n    <a\\n      href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-no-modal-sdk/quick-starts/angular-no-modal-quick-start\\"\\n      target=\\"_blank\\"\\n      rel=\\"noopener noreferrer\\"\\n    >\\n      Source code\\n    </a>\\n  </footer>\\n</div>\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/angular-no-modal-quick-start/src/polyfills.ts":"/* eslint-disable @typescript-eslint/no-var-requires */\\nimport \\"zone.js\\"; // Included with Angular CLI.\\n\\n// IMP START - Bundler Issues\\n(window as any).global = window;\\nglobal.Buffer = global.Buffer || require(\\"buffer\\").Buffer;\\nglobal.process = global.process || require(\\"process\\");\\n// IMP END - Bundler Issues\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/angular-no-modal-quick-start/package.json":"{\\n  \\"name\\": \\"angular-no-modal-quick-start\\",\\n  \\"version\\": \\"0.0.0\\",\\n  \\"scripts\\": {\\n    \\"ng\\": \\"ng\\",\\n    \\"start\\": \\"ng serve\\",\\n    \\"build\\": \\"ng build\\",\\n    \\"watch\\": \\"ng build --watch --configuration development\\",\\n    \\"test\\": \\"ng test\\",\\n    \\"lint\\": \\"ng line\\"\\n  },\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@angular/animations\\": \\"~14.2.7\\",\\n    \\"@angular/common\\": \\"~14.2.7\\",\\n    \\"@angular/compiler\\": \\"~14.2.7\\",\\n    \\"@angular/core\\": \\"~14.2.7\\",\\n    \\"@angular/forms\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser-dynamic\\": \\"~14.2.7\\",\\n    \\"@angular/router\\": \\"~14.2.7\\",\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/no-modal\\": \\"^7.3.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.3.1\\",\\n    \\"@web3auth/openlogin-adapter\\": \\"^7.3.1\\",\\n    \\"empty-module\\": \\"^0.0.2\\",\\n    \\"web3\\": \\"^4.1.2\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@angular-devkit/build-angular\\": \\"~14.2.6\\",\\n    \\"@angular/cli\\": \\"~14.2.6\\",\\n    \\"@angular/compiler-cli\\": \\"~14.2.7\\",\\n    \\"@types/jasmine\\": \\"~4.3.0\\",\\n    \\"@types/keccak\\": \\"^3.0.1\\",\\n    \\"@types/node\\": \\"^18.11.2\\",\\n    \\"@types/readable-stream\\": \\"^2.3.14\\",\\n    \\"jasmine-core\\": \\"~4.4.0\\",\\n    \\"karma\\": \\"~6.4.1\\",\\n    \\"karma-chrome-launcher\\": \\"~3.1.1\\",\\n    \\"karma-coverage\\": \\"~2.2.0\\",\\n    \\"karma-jasmine\\": \\"~5.1.0\\",\\n    \\"karma-jasmine-html-reporter\\": \\"~2.0.0\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"typescript\\": \\"~4.8.0\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/angular-no-modal-quick-start/tsconfig.json":"/* To learn more about this file see: https://angular.io/config/tsconfig. */\\n{\\n  \\"compileOnSave\\": false,\\n  \\"compilerOptions\\": {\\n    \\"baseUrl\\": \\"./\\",\\n    \\"outDir\\": \\"./dist/out-tsc\\",\\n    \\"forceConsistentCasingInFileNames\\": true,\\n    \\"strict\\": true,\\n    \\"noImplicitOverride\\": true,\\n    \\"noPropertyAccessFromIndexSignature\\": true,\\n    \\"noImplicitReturns\\": true,\\n    \\"noFallthroughCasesInSwitch\\": true,\\n    \\"sourceMap\\": true,\\n    \\"declaration\\": false,\\n    \\"downlevelIteration\\": true,\\n    \\"experimentalDecorators\\": true,\\n    \\"moduleResolution\\": \\"node\\",\\n    \\"importHelpers\\": true,\\n    \\"skipLibCheck\\": true,\\n    \\"target\\": \\"es2020\\",\\n    \\"module\\": \\"es2020\\",\\n    \\"lib\\": [\\n      \\"es2020\\",\\n      \\"dom\\"\\n    ],\\n    \\"paths\\":{\\n      \\"crypto\\": [\\"./node_modules/empty-module\\"],\\n      \\"stream\\": [\\"./node_modules/empty-module\\"],\\n      \\"assert\\": [\\"./node_modules/empty-module\\"],\\n      \\"http\\": [\\"./node_modules/empty-module\\"],\\n      \\"https\\": [\\"./node_modules/empty-module\\"],\\n      \\"os\\": [\\"./node_modules/empty-module\\"],\\n      \\"zlib\\": [\\"./node_modules/empty-module\\"],\\n      \\"url\\": [\\"./node_modules/empty-module\\"],\\n      \\"process\\": [\\"./node_modules/process\\"]\\n    }\\n  },\\n  \\"angularCompilerOptions\\": {\\n    \\"enableI18nLegacyMessageIdFormat\\": false,\\n    \\"strictInjectionParameters\\": true,\\n    \\"strictInputAccessModifiers\\": true,\\n    \\"strictTemplates\\": true\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/vue-no-modal-quick-start/vue.config.js":"const { defineConfig } = require(\\"@vue/cli-service\\");\\nconst { ProvidePlugin } = require(\\"webpack\\");\\nconst { BundleAnalyzerPlugin } = require(\\"webpack-bundle-analyzer\\");\\n\\nmodule.exports = defineConfig({\\n  transpileDependencies: true,\\n  lintOnSave: false,\\n  // IMP START - Bundler Issues\\n  configureWebpack: (config) => {\\n    config.devtool = \\"source-map\\";\\n    config.resolve.symlinks = false;\\n    config.resolve.fallback = {\\n      crypto: false,\\n      stream: false,\\n      assert: false,\\n      os: false,\\n      https: false,\\n      http: false,\\n      url: \\"url\\",\\n      zlib: false,\\n    };\\n    config.plugins.push(new ProvidePlugin({ Buffer: [\\"buffer\\", \\"Buffer\\"] }));\\n    config.plugins.push(new ProvidePlugin({ process: [\\"process/browser\\"] }));\\n    // IMP END - Bundler Issues\\n    config.plugins.push(\\n      new BundleAnalyzerPlugin({\\n        analyzerMode: \\"disabled\\",\\n      })\\n    );\\n  },\\n});\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/vue-no-modal-quick-start/package.json":"{\\n  \\"name\\": \\"vue-no-modal-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"serve\\": \\"vue-cli-service serve\\",\\n    \\"build\\": \\"vue-cli-service build\\",\\n    \\"lint\\": \\"vue-cli-service lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.3.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.3.1\\",\\n    \\"@web3auth/no-modal\\": \\"^7.3.1\\",\\n    \\"@web3auth/openlogin-adapter\\": \\"^7.3.1\\",\\n    \\"core-js\\": \\"^3.26.1\\",\\n    \\"vue\\": \\"^3.3.4\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@typescript-eslint/eslint-plugin\\": \\"^5.46.1\\",\\n    \\"@typescript-eslint/parser\\": \\"^5.46.1\\",\\n    \\"@vue/cli-plugin-babel\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-eslint\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-typescript\\": \\"~5.0.8\\",\\n    \\"@vue/cli-service\\": \\"~5.0.8\\",\\n    \\"@vue/eslint-config-typescript\\": \\"^11.0.2\\",\\n    \\"eslint\\": \\"^8.29.0\\",\\n    \\"eslint-plugin-vue\\": \\"^9.8.0\\",\\n    \\"typescript\\": \\"~4.9.4\\",\\n    \\"url\\": \\"^0.11.3\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/vue-no-modal-quick-start/src/Home.vue":"\x3c!-- eslint-disable vue/no-ref-as-operand --\x3e\\n<template>\\n  <div id=\\"app\\">\\n    <h2>\\n      <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/no-modal\\" rel=\\"noreferrer\\"> Web3Auth </a>\\n      Vue.js Quick Start\\n    </h2>\\n\\n    <button v-if=\\"!loggedIn\\" class=\\"card\\" @click=\\"login\\" style=\\"cursor: pointer\\">Login</button>\\n\\n    <div v-if=\\"loggedIn\\">\\n      <div class=\\"flex-container\\">\\n        <div>\\n          <button class=\\"card\\" @click=\\"getUserInfo\\" style=\\"cursor: pointer\\">Get User Info</button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getAccounts\\" style=\\"cursor: pointer\\">Get Accounts</button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getBalance\\" style=\\"cursor: pointer\\">Get Balance</button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"signMessage\\" style=\\"cursor: pointer\\">Sign Message</button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"logout\\" style=\\"cursor: pointer\\">Logout</button>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\"console\\" style=\\"white-space: pre-line\\">\\n      <p style=\\"white-space: pre-line\\"></p>\\n    </div>\\n\\n    <footer class=\\"footer\\">\\n      <a\\n        href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-no-modal-sdk/quick-starts/vue-no-modal-quick-start\\"\\n        target=\\"_blank\\"\\n        rel=\\"noopener noreferrer\\"\\n      >\\n        Source code\\n      </a>\\n    </footer>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\nimport { ref, onMounted } from \\"vue\\";\\n// IMP START - Quick Start\\nimport { Web3AuthNoModal } from \\"@web3auth/no-modal\\";\\nimport { CHAIN_NAMESPACES, IProvider, WALLET_ADAPTERS } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\nimport { OpenloginAdapter } from \\"@web3auth/openlogin-adapter\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\nexport default {\\n  // eslint-disable-next-line vue/multi-word-component-names\\n  name: \\"Home\\",\\n  props: {\\n    msg: String,\\n  },\\n  setup() {\\n    const loggedIn = ref<boolean>(false);\\n    let provider = <IProvider | null>null;\\n\\n    // IMP START - SDK Initialization\\n    // IMP START - Dashboard Registration\\n    const clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n    // IMP END - Dashboard Registration\\n\\n    const chainConfig = {\\n      chainNamespace: CHAIN_NAMESPACES.EIP155,\\n      chainId: \\"0xaa36a7\\", // Please use 0x1 for Mainnet, 11155111(0xaa36a7) for Sepolia Testnet\\n      rpcTarget: \\"https://rpc.ankr.com/eth_sepolia\\",\\n      displayName: \\"Sepolia Testnet\\",\\n      blockExplorer: \\"https://sepolia.etherscan.io/\\",\\n      ticker: \\"ETH\\",\\n      tickerName: \\"Ethereum\\",\\n    };\\n\\n    const web3auth = new Web3AuthNoModal({\\n      clientId,\\n      chainConfig,\\n      web3AuthNetwork: \\"sapphire_mainnet\\",\\n    });\\n\\n    const privateKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig } });\\n    const openloginAdapter = new OpenloginAdapter({\\n      privateKeyProvider: privateKeyProvider,\\n    });\\n    web3auth.configureAdapter(openloginAdapter);\\n    // IMP END - SDK Initialization\\n\\n    onMounted(async () => {\\n      const init = async () => {\\n        try {\\n          // IMP START - SDK Initialization\\n          await web3auth.init();\\n          // IMP END - SDK Initialization\\n          provider = web3auth.provider;\\n\\n          if (web3auth.connected) {\\n            loggedIn.value = true;\\n          }\\n        } catch (error) {\\n          console.error(error);\\n        }\\n      };\\n\\n      init();\\n    });\\n\\n    const login = async () => {\\n      // IMP START - Login\\n      provider = await web3auth.connectTo(WALLET_ADAPTERS.OPENLOGIN, {\\n        loginProvider: \\"google\\",\\n      });\\n      // IMP END - Login\\n\\n      if (web3auth.connected) {\\n        loggedIn.value = true;\\n      }\\n    };\\n\\n    const getUserInfo = async () => {\\n      // IMP START - Get User Information\\n      const user = await web3auth.getUserInfo();\\n      // IMP END - Get User Information\\n      uiConsole(user);\\n    };\\n\\n    const logout = async () => {\\n      // IMP START - Logout\\n      await web3auth.logout();\\n      // IMP END - Logout\\n      provider = null;\\n      loggedIn.value = false;\\n      uiConsole(\\"logged out\\");\\n    };\\n\\n    // IMP START - Blockchain Calls\\n    const getAccounts = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = await web3.eth.getAccounts();\\n      uiConsole(address);\\n    };\\n\\n    const getBalance = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = (await web3.eth.getAccounts())[0];\\n\\n      // Get user\'s balance in ether\\n      const balance = web3.utils.fromWei(\\n        await web3.eth.getBalance(address), // Balance is in wei\\n        \\"ether\\"\\n      );\\n      uiConsole(balance);\\n    };\\n\\n    const signMessage = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n      const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n      // Sign the message\\n      const signedMessage = await web3.eth.personal.sign(\\n        originalMessage,\\n        fromAddress,\\n        \\"test password!\\" // configure your own password here.\\n      );\\n      uiConsole(signedMessage);\\n    };\\n    // IMP END - Blockchain Calls\\n\\n    function uiConsole(...args: any[]): void {\\n      const el = document.querySelector(\\"#console>p\\");\\n      if (el) {\\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\\n      }\\n      console.log(...args);\\n    }\\n\\n    return {\\n      loggedIn,\\n      provider,\\n      web3auth,\\n      login,\\n      logout,\\n      getUserInfo,\\n      getAccounts,\\n      getBalance,\\n      signMessage,\\n    };\\n  },\\n};\\n<\/script>\\n\\n\x3c!-- Add \\"scoped\\" attribute to limit CSS to this component only --\x3e\\n<style scoped>\\n#app {\\n  width: 80%;\\n  margin: auto;\\n  padding: 0 2rem;\\n}\\n\\nh3 {\\n  margin: 40px 0 0;\\n}\\n\\nul {\\n  list-style-type: none;\\n  padding: 0;\\n}\\n\\nli {\\n  display: inline-block;\\n  margin: 0 10px;\\n}\\n\\na {\\n  color: #42b983;\\n}\\n\\n.card {\\n  margin: 0.5rem;\\n  padding: 0.7rem;\\n  text-align: center;\\n  color: #0070f3;\\n  background-color: #fafafa;\\n  text-decoration: none;\\n  border: 1px solid #0070f3;\\n  border-radius: 10px;\\n  transition: color 0.15s ease, border-color 0.15s ease;\\n  width: 100%;\\n}\\n\\n.card:hover,\\n.card:focus,\\n.card:active {\\n  cursor: pointer;\\n  background-color: #f1f1f1;\\n}\\n\\n.flex-container {\\n  display: flex;\\n  flex-flow: row wrap;\\n}\\n\\n.flex-container > div {\\n  width: 100px;\\n  margin: 10px;\\n  text-align: center;\\n  line-height: 75px;\\n  font-size: 30px;\\n}\\n\\n#console {\\n  width: 100%;\\n  height: 100%;\\n  overflow: auto;\\n  word-wrap: break-word;\\n  font-size: 16px;\\n  font-family: monospace;\\n  text-align: left;\\n}\\n</style>\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/vanillajs-no-modal-quick-start/index.html":"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n<title>Web3Auth Getting Started</title>\\n<meta charset=\\"UTF-8\\" />\\n  <link rel=\\"stylesheet\\" href=\\"style.css\\" />\\n</head>\\n\\n<body>\\n  <div class=\\"container\\">\\n    <h1 class=\\"title\\">\\n      <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/modal\\">Web3Auth</a> & JS Ethereum\\n      Example\\n    </h1>\\n    \x3c!-- Logged In --\x3e\\n    <div class=\\"grid btn-logged-in\\">\\n      <button id=\\"get-user-info\\" class=\\"btn\\">Get User Info</button>\\n      <button id=\\"get-accounts\\" class=\\"btn\\">Get Accounts</button>\\n      <button id=\\"get-balance\\" class=\\"btn\\">Get Balance</button>\\n      <button id=\\"sign-message\\" class=\\"btn\\">Sign Message</button>\\n      <button id=\\"logout\\" class=\\"btn\\">Logout</button>\\n      <div class=\\"console\\" id=\\"console\\">\\n        <p id=\\"code\\" class=\\"code\\"></p>\\n      </div>\\n    </div>\\n\\n    \x3c!-- Logged Logout --\x3e\\n    <div class=\\"grid btn-logged-out\\">\\n      <button id=\\"login\\" class=\\"btn\\">Login</button>\\n    </div>\\n    <footer class=\\"footer\\">\\n      <a href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-modal-sdk/quick-starts/vanillajs-modal-quick-start\\"\\n        target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n        Source code\\n      </a>\\n    </footer>\\n  </div>\\n\\n  <script src=\\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\\"><\/script>\\n  <script src=\\"https://cdn.jsdelivr.net/npm/buffer@6\\"><\/script>\\n  \x3c!--IMP START - Quick Start--\x3e\\n  <script src=\\"https://cdn.jsdelivr.net/npm/@web3auth/no-modal\\"><\/script>\\n  <script src=\\"https://cdn.jsdelivr.net/npm/@web3auth/ethereum-provider\\"><\/script>\\n  <script src=\\"https://cdn.jsdelivr.net/npm/@web3auth/openlogin-adapter\\"><\/script>\\n  \x3c!--IMP END - Quick Start--\x3e\\n  <script src=\\"https://cdn.jsdelivr.net/npm/web3@4.1.1/dist/web3.min.js\\"><\/script>\\n  <script src=\\"script.js\\"><\/script>\\n</body>\\n\\n</html>","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/vanillajs-no-modal-quick-start/script.js":"let web3auth = null;\\n\\n(async function init() {\\n  $(\\".btn-logged-in\\").hide();\\n  $(\\"#sign-tx\\").hide();\\n  // IMP START - SDK Initialization\\n  // IMP START - Dashboard Registration\\n\\n  const clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get your clientId from https://dashboard.web3auth.io\\n  // IMP END - Dashboard Registration\\n\\n  const chainConfig = {\\n    chainNamespace: \\"eip155\\",\\n    chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n    rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n    displayName: \\"Ethereum Mainnet\\",\\n    blockExplorer: \\"https://etherscan.io/\\",\\n    ticker: \\"ETH\\",\\n    tickerName: \\"Ethereum\\",\\n  };\\n\\n  web3auth = new window.NoModal.Web3AuthNoModal({\\n    clientId,\\n    chainConfig,\\n    web3AuthNetwork: \\"sapphire_mainnet\\",\\n  });\\n\\n  const privateKeyProvider = new window.EthereumProvider.EthereumPrivateKeyProvider({ config: { chainConfig } });\\n  const openloginAdapter = new window.OpenloginAdapter.OpenloginAdapter({\\n    privateKeyProvider,\\n  });\\n  web3auth.configureAdapter(openloginAdapter);\\n\\n  await web3auth.init();\\n  // IMP END - SDK Initialization\\n\\n  if (web3auth.connected) {\\n    $(\\".btn-logged-in\\").show();\\n    $(\\".btn-logged-out\\").hide();\\n  } else {\\n    $(\\".btn-logged-out\\").show();\\n    $(\\".btn-logged-in\\").hide();\\n  }\\n})();\\n\\n$(\\"#login\\").click(async function (event) {\\n  try {\\n    // IMP START - Login\\n    await web3auth.connectTo(\\"openlogin\\", {\\n      loginProvider: \\"google\\",\\n    }); // IMP END - Login\\n    $(\\".btn-logged-out\\").hide();\\n    $(\\".btn-logged-in\\").show();\\n    uiConsole(\\"Logged in Successfully!\\");\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#get-user-info\\").click(async function (event) {\\n  try {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n// IMP START - Blockchain Calls\\n$(\\"#get-accounts\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#get-balance\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#sign-message\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n// IMP END - Blockchain Calls\\n\\n$(\\"#logout\\").click(async function (event) {\\n  try {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    $(\\".btn-logged-in\\").hide();\\n    $(\\".btn-logged-out\\").show();\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\nfunction uiConsole(...args) {\\n  const el = document.querySelector(\\"#console>p\\");\\n  if (el) {\\n    el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    console.log(...args);\\n  }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/web-no-modal-sdk/quick-starts/vanillajs-no-modal-quick-start/style.css":"html,\\nbody {\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tfont-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\\n\\t\\tUbuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\\n}\\n\\na {\\n\\tcolor: inherit;\\n\\ttext-decoration: none;\\n}\\n\\n* {\\n\\tbox-sizing: border-box;\\n}\\n.container {\\n\\twidth: 60%;\\n\\tmargin: auto;\\n\\tpadding: 0 2rem;\\n}\\n\\n.main {\\n\\tmin-height: 100vh;\\n\\tpadding: 4rem 0;\\n\\tflex: 1;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n}\\n\\n.title {\\n\\tline-height: 1.15;\\n\\tfont-size: 3rem;\\n\\ttext-align: center;\\n\\tmargin: 50px;\\n}\\n\\n.title a {\\n\\tcolor: #0070f3;\\n\\ttext-decoration: none;\\n}\\n\\n.console {\\n\\tmax-width: 100%;\\n}\\n\\n.code {\\n\\tbackground: #fafafa;\\n\\tborder-radius: 5px;\\n\\tpadding: 0.75rem;\\n\\tfont-size: 1.1rem;\\n\\tfont-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\\n\\t\\tBitstream Vera Sans Mono, Courier New, monospace;\\n\\toverflow-wrap: break-word;\\n}\\n\\n.grid {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tflex-direction: column;\\n}\\n\\n.btn {\\n\\tmargin: 0.5rem;\\n\\tpadding: 0.7rem;\\n\\ttext-align: center;\\n\\tcolor: #0070f3;\\n\\ttext-decoration: none;\\n\\tborder: 1px solid #0070f3;\\n\\tborder-radius: 10px;\\n\\ttransition: color 0.15s ease, border-color 0.15s ease;\\n\\twidth: 100%;\\n\\tbackground-color: white;\\n}\\n\\n.btn:hover,\\n.btn:focus,\\n.btn:active {\\n\\tcursor: pointer;\\n\\tbackground-color: #fafafa;\\n}\\n\\n.row {\\n\\tdisplay: flex;\\n\\tmargin-bottom: 0.5rem;\\n\\twidth: 100%;\\n}\\n.label {\\n\\tflex-basis: 45%;\\n\\tpadding-right: 10px;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: right;\\n\\tfont-weight: bold;\\n}\\n\\n.select {\\n\\tflex-basis: 30%;\\n\\ttext-align: left;\\n\\tpadding: 0.3rem 0.8rem;\\n\\tfont-size: 1rem;\\n\\tborder-radius: 8px;\\n}\\n\\n.footer {\\n\\tdisplay: flex;\\n\\tflex: 1;\\n\\tpadding: 2rem 0;\\n\\tborder-top: 1px solid #eaeaea;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tmargin-top: 10rem;\\n}\\n\\n.footer a {\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tflex-grow: 1;\\n}\\n\\n.logo {\\n\\theight: 1.5rem;\\n\\tmargin-left: 0.5rem;\\n}\\n\\n@media (max-width: 1200px) {\\n\\t.container {\\n\\t\\twidth: 100%;\\n\\t}\\n}\\n","Web3Auth/web3auth-pnp-examples/main/unity/unity-quick-start/Assets/Web3AuthScript.cs":"using System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.UI;\\nusing Newtonsoft.Json;\\nusing TMPro;\\nusing Nethereum.Web3;\\nusing Nethereum.Util;\\nusing Nethereum.Signer;\\nusing Nethereum.Hex.HexConvertors.Extensions;\\nusing Nethereum.ABI.Encoders;\\nusing Nethereum.Hex.HexTypes;\\nusing Nethereum.Web3.Accounts;\\nusing Nethereum.Web3.Accounts.Managed;\\n\\npublic class Web3AuthScript : MonoBehaviour\\n{\\n    Web3Auth web3Auth;\\n    public TextMeshProUGUI console;\\n    private string userEmail = \\"\\";\\n    private string privateKey;\\n    private string userInfo;\\n    private Account account;\\n    Web3 web3;\\n    const string rpcURL = \\"https://rpc.ankr.com/eth\\";\\n\\n    // Start is called before the first frame update\\n    void Start()\\n    {\\n        // IMP START - Quick Start\\n        web3Auth = GetComponent<Web3Auth>();\\n        // IMP END - Quick Start\\n\\n        // IMP START - SDK Initialization\\n        // IMP START - Dashboard Registration\\n        var clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // Get your Web3Auth Client ID on https://dashboard.web3auth.io\\n        // IMP END - Dashboard Registration\\n\\n        web3Auth.setOptions(new Web3AuthOptions()\\n        {\\n            clientId,\\n            redirectUrl = new System.Uri(\\"w3aexample://com.web3auth.unityexample/auth\\"),\\n            network = Web3Auth.Network.SAPPHIRE_MAINNET,\\n        });\\n        // IMP END - SDK Initialization\\n        web3Auth.onLogin += onLogin;\\n        web3Auth.onLogout += onLogout;\\n        web3 = new Web3(rpcURL);\\n        updateConsole(\\"Ready to Login!\\");\\n    }\\n\\n    public void GrabEmailFromInputField(string input)\\n    {\\n        userEmail = input;\\n    }\\n\\n    public void login()\\n    {\\n        if (userEmail == \\"\\")\\n        {\\n            Debug.Log(\\"Please enter your email.\\");\\n            updateConsole(\\"Please enter your email.\\");\\n            return;\\n        }\\n        // IMP START - Login\\n        var selectedProvider = Provider.EMAIL_PASSWORDLESS;\\n\\n        var options = new LoginParams()\\n        {\\n            loginProvider = selectedProvider,\\n            extraLoginOptions = new ExtraLoginOptions()\\n            {\\n                login_hint = userEmail\\n            }\\n        };\\n\\n        web3Auth.login(options);\\n        // IMP END - Login\\n    }\\n\\n    private void onLogin(Web3AuthResponse response)\\n    {\\n        // IMP START - Get User Information\\n        userInfo = JsonConvert.SerializeObject(response.userInfo, Formatting.Indented);\\n        // IMP END - Get User Information\\n        // IMP START - Blockchain Calls\\n        privateKey = response.privKey;\\n        var newAccount = new Account(privateKey);\\n        account = newAccount;\\n        // IMP END - Blockchain Calls\\n\\n        Debug.Log(JsonConvert.SerializeObject(response, Formatting.Indented));\\n        updateConsole(JsonConvert.SerializeObject(response, Formatting.Indented));\\n    }\\n\\n    public void getUserInfo()\\n    {\\n        if (account == null)\\n        {\\n            Debug.Log(\\"Please Login First\\");\\n            updateConsole(\\"Please Login First\\");\\n            return;\\n        }\\n        Debug.Log(userInfo);\\n        updateConsole(userInfo);\\n    }\\n\\n    public void logout()\\n    {\\n        // IMP START - Logout\\n        web3Auth.logout();\\n        // IMP END - Logout\\n    }\\n\\n    private void onLogout()\\n    {\\n        privateKey = null;\\n        userInfo = null;\\n        account = null;\\n\\n        Debug.Log(\\"Logged out!\\");\\n        updateConsole(\\"Logged out!\\");\\n    }\\n\\n    // IMP START - Blockchain Calls\\n    public void getAccount()\\n    {\\n        if (account == null)\\n        {\\n            Debug.Log(\\"Please Login First\\");\\n            updateConsole(\\"Please Login First\\");\\n            return;\\n        }\\n        Debug.Log(account.Address);\\n        updateConsole(account.Address);\\n    }\\n\\n    public void getBalance()\\n    {\\n        if (account == null)\\n        {\\n            Debug.Log(\\"Please Login First\\");\\n            updateConsole(\\"Please Login First\\");\\n            return;\\n        }\\n        var balance = web3.Eth.GetBalance.SendRequestAsync(account.Address).Result.Value;\\n\\n        Debug.Log(balance);\\n        updateConsole(balance.ToString());\\n    }\\n\\n    public void signMessage()\\n    {\\n        if (account == null)\\n        {\\n            Debug.Log(\\"Please Login First\\");\\n            updateConsole(\\"Please Login First\\");\\n            return;\\n        }\\n        var msg = \\"wee test message 18/09/2017 02:55PM\\";\\n        var signer = new EthereumMessageSigner();\\n        var signature = signer.EncodeUTF8AndSign(msg, new EthECKey(privateKey));\\n\\n        Debug.Log(signature);\\n        updateConsole(signature.ToString());\\n    }\\n    // IMP END - Blockchain Calls\\n\\n    public void updateConsole(string message)\\n    {\\n        console.text = message;\\n    }\\n\\n    // Update is called once per frame\\n    void Update()\\n    {\\n\\n    }\\n}","Web3Auth/web3auth-pnp-examples/main/unity/unity-quick-start/Assets/Plugins/Android/AndroidManifest.xml":"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<manifest\\n    xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    package=\\"com.unity3d.player\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\">\\n    \\n    \x3c!-- // IMP START - Android Custom Tabs --\x3e\\n    <uses-permission android:name=\\"android.permission.ACCESS_NETWORK_STATE\\" />\\n    <uses-permission android:name=\\"android.permission.INTERNET\\" />\\n\\n    <queries xmlns:android=\\"http://schemas.android.com/apk/res/android\\">\\n\\t\\t<intent>\\n\\t\\t\\t<action android:name=\\"android.support.customtabs.action.CustomTabsService\\" />\\n\\t\\t</intent>\\n\\t</queries>\\n    \x3c!-- // IMP END - Android Custom Tabs --\x3e\\n    <application>\\n        <activity android:name=\\"com.unity3d.player.UnityPlayerActivity\\"\\n                  android:theme=\\"@style/UnityThemeSelector\\">\\n            <intent-filter>\\n                <action android:name=\\"android.intent.action.MAIN\\" />\\n                <category android:name=\\"android.intent.category.LAUNCHER\\" />\\n            </intent-filter>\\n            \x3c!-- // IMP START - Configure Deep Link --\x3e\\n            <intent-filter>\\n\\t\\t\\t\\t<action android:name=\\"android.intent.action.VIEW\\" />\\n\\t\\t\\t\\t<category android:name=\\"android.intent.category.DEFAULT\\" />\\n\\t\\t\\t\\t<category android:name=\\"android.intent.category.BROWSABLE\\" />\\n\\t\\t\\t\\t<data android:scheme=\\"w3aexample\\" android:host=\\"com.web3auth.unityexample\\"\\n\\t\\t\\t\\t\\tandroid:pathPrefix=\\"/auth\\"\\n\\t\\t\\t\\t\\tandroid:pathPattern=\\"/*\\" />\\n\\t\\t\\t</intent-filter>\\n            \x3c!-- // IMP END - Configure Deep Link --\x3e\\n            <meta-data android:name=\\"unityplayer.UnityActivity\\" android:value=\\"true\\" />\\n        </activity>\\n    </application>\\n</manifest>\\n","Web3Auth/web3auth-pnp-examples/main/unity/unity-quick-start/Packages/manifest.json":"{\\n  \\"dependencies\\": {\\n    \\"com.unity.ai.navigation\\": \\"1.1.5\\",\\n    \\"com.unity.collab-proxy\\": \\"2.1.0\\",\\n    \\"com.unity.feature.development\\": \\"1.0.1\\",\\n    \\"com.unity.ide.rider\\": \\"3.0.25\\",\\n    \\"com.unity.ide.visualstudio\\": \\"2.0.21\\",\\n    \\"com.unity.ide.vscode\\": \\"1.2.5\\",\\n    \\"// IMP START\\": \\"// IMP START - Web3Auth Installation\\",\\n    \\"com.unity.nuget.newtonsoft-json\\": \\"3.2.1\\",\\n    \\"// IMP END\\": \\"// IMP END - Web3Auth Installation\\",\\n    \\"com.unity.test-framework\\": \\"1.1.33\\",\\n    \\"com.unity.textmeshpro\\": \\"3.0.6\\",\\n    \\"com.unity.timeline\\": \\"1.7.5\\",\\n    \\"com.unity.ugui\\": \\"1.0.0\\",\\n    \\"com.unity.visualscripting\\": \\"1.9.1\\",\\n    \\"com.unity.modules.ai\\": \\"1.0.0\\",\\n    \\"com.unity.modules.androidjni\\": \\"1.0.0\\",\\n    \\"com.unity.modules.animation\\": \\"1.0.0\\",\\n    \\"com.unity.modules.assetbundle\\": \\"1.0.0\\",\\n    \\"com.unity.modules.audio\\": \\"1.0.0\\",\\n    \\"com.unity.modules.cloth\\": \\"1.0.0\\",\\n    \\"com.unity.modules.director\\": \\"1.0.0\\",\\n    \\"com.unity.modules.imageconversion\\": \\"1.0.0\\",\\n    \\"com.unity.modules.imgui\\": \\"1.0.0\\",\\n    \\"com.unity.modules.jsonserialize\\": \\"1.0.0\\",\\n    \\"com.unity.modules.particlesystem\\": \\"1.0.0\\",\\n    \\"com.unity.modules.physics\\": \\"1.0.0\\",\\n    \\"com.unity.modules.physics2d\\": \\"1.0.0\\",\\n    \\"com.unity.modules.screencapture\\": \\"1.0.0\\",\\n    \\"com.unity.modules.terrain\\": \\"1.0.0\\",\\n    \\"com.unity.modules.terrainphysics\\": \\"1.0.0\\",\\n    \\"com.unity.modules.tilemap\\": \\"1.0.0\\",\\n    \\"com.unity.modules.ui\\": \\"1.0.0\\",\\n    \\"com.unity.modules.uielements\\": \\"1.0.0\\",\\n    \\"com.unity.modules.umbra\\": \\"1.0.0\\",\\n    \\"com.unity.modules.unityanalytics\\": \\"1.0.0\\",\\n    \\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\",\\n    \\"com.unity.modules.unitywebrequestassetbundle\\": \\"1.0.0\\",\\n    \\"com.unity.modules.unitywebrequestaudio\\": \\"1.0.0\\",\\n    \\"com.unity.modules.unitywebrequesttexture\\": \\"1.0.0\\",\\n    \\"com.unity.modules.unitywebrequestwww\\": \\"1.0.0\\",\\n    \\"com.unity.modules.vehicles\\": \\"1.0.0\\",\\n    \\"com.unity.modules.video\\": \\"1.0.0\\",\\n    \\"com.unity.modules.vr\\": \\"1.0.0\\",\\n    \\"com.unity.modules.wind\\": \\"1.0.0\\",\\n    \\"com.unity.modules.xr\\": \\"1.0.0\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/react-native/rn-bare-quick-start/App.tsx":"import React, { useEffect, useState } from \'react\';\\nimport {\\n  StyleSheet,\\n  Text,\\n  View,\\n  Button,\\n  ScrollView,\\n  Dimensions,\\n  TextInput,\\n} from \'react-native\';\\nimport \'@ethersproject/shims\';\\nimport { ethers } from \'ethers\';\\n\\n// IMP START - Quick Start\\nimport * as WebBrowser from \'@toruslabs/react-native-web-browser\';\\nimport EncryptedStorage from \'react-native-encrypted-storage\';\\nimport Web3Auth, {\\n  LOGIN_PROVIDER,\\n  OPENLOGIN_NETWORK,\\n} from \'@web3auth/react-native-sdk\';\\nimport { EthereumPrivateKeyProvider } from \'@web3auth/ethereum-provider\';\\nimport { IProvider } from \'@web3auth/base\';\\n// IMP END - Quick Start\\n\\nconst scheme = \'web3authrnexample\'; // Or your desired app redirection scheme\\n// IMP START - Whitelist bundle ID\\nconst resolvedRedirectUrl = `${scheme}://openlogin`;\\n// IMP END - Whitelist bundle ID\\n\\n// IMP START - Dashboard Registration\\nconst clientId =\\n  \'BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\'; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - SDK Initialization\\nconst chainConfig = {\\n  chainId: \'0x1\',\\n  rpcTarget: \'https://rpc.ankr.com/eth\',\\n  displayName: \'mainnet\',\\n  blockExplorer: \'https://etherscan.io/\',\\n  ticker: \'ETH\',\\n  tickerName: \'Ethereum\',\\n};\\n\\nconst ethereumPrivateKeyProvider = new EthereumPrivateKeyProvider({\\n  config: {\\n    chainConfig,\\n  },\\n});\\n\\nconst web3auth = new Web3Auth(WebBrowser, EncryptedStorage, {\\n  clientId,\\n  network: OPENLOGIN_NETWORK.SAPPHIRE_MAINNET, // or other networks\\n});\\n// IMP END - SDK Initialization\\n\\nexport default function App() {\\n  const [loggedIn, setLoggedIn] = useState(false);\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [console, setConsole] = useState<string>(\'\');\\n  const [email, setEmail] = useState<string>(null);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      // IMP START - SDK Initialization\\n      await web3auth.init();\\n\\n      if (web3auth.privKey) {\\n        await ethereumPrivateKeyProvider.setupProvider(web3auth.privKey);\\n        // IMP END - SDK Initialization\\n        setProvider(ethereumPrivateKeyProvider);\\n        uiConsole(\'Logged In\');\\n        setLoggedIn(true);\\n      }\\n    };\\n    init();\\n  }, []);\\n\\n  const login = async () => {\\n    try {\\n      if (!web3auth.ready) {\\n        setConsole(\'Web3auth not initialized\');\\n        return;\\n      }\\n      if (!email) {\\n        setConsole(\'Enter email first\');\\n        return;\\n      }\\n\\n      setConsole(\'Logging in\');\\n      // IMP START - Login\\n      await web3auth.login({\\n        loginProvider: LOGIN_PROVIDER.EMAIL_PASSWORDLESS,\\n        // IMP START - Whitelist bundle ID\\n        redirectUrl: resolvedRedirectUrl,\\n        // IMP END - Whitelist bundle ID\\n        extraLoginOptions: {\\n          login_hint: email,\\n        },\\n      });\\n\\n      if (web3auth.privKey) {\\n        await ethereumPrivateKeyProvider.setupProvider(web3auth.privKey);\\n        // IMP END - Login\\n        setProvider(ethereumPrivateKeyProvider);\\n        uiConsole(\'Logged In\');\\n        setLoggedIn(true);\\n      }\\n    } catch (e: any) {\\n      setConsole(e.message);\\n    }\\n  };\\n\\n  const logout = async () => {\\n    if (!web3auth.ready) {\\n      setConsole(\'Web3auth not initialized\');\\n      return;\\n    }\\n\\n    setConsole(\'Logging out\');\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n\\n    if (!web3auth.privKey) {\\n      setProvider(null);\\n      uiConsole(\'Logged out\');\\n      setLoggedIn(false);\\n    }\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!provider) {\\n      uiConsole(\'provider not set\');\\n      return;\\n    }\\n    setConsole(\'Getting account\');\\n    // For ethers v5\\n    // const ethersProvider = new ethers.providers.Web3Provider(this.provider);\\n    const ethersProvider = new ethers.BrowserProvider(provider!);\\n\\n    // For ethers v5\\n    // const signer = ethersProvider.getSigner();\\n    const signer = await ethersProvider.getSigner();\\n\\n    // Get user\'s Ethereum public address\\n    const address = signer.getAddress();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!provider) {\\n      uiConsole(\'provider not set\');\\n      return;\\n    }\\n    setConsole(\'Fetching balance\');\\n    // For ethers v5\\n    // const ethersProvider = new ethers.providers.Web3Provider(this.provider);\\n    const ethersProvider = new ethers.BrowserProvider(provider!);\\n\\n    // For ethers v5\\n    // const signer = ethersProvider.getSigner();\\n    const signer = await ethersProvider.getSigner();\\n\\n    // Get user\'s Ethereum public address\\n    const address = signer.getAddress();\\n\\n    // Get user\'s balance in ether\\n    // For ethers v5\\n    // const balance = ethers.utils.formatEther(\\n    // await ethersProvider.getBalance(address) // Balance is in wei\\n    // );\\n    const balance = ethers.formatEther(\\n      await ethersProvider.getBalance(address), // Balance is in wei\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!provider) {\\n      uiConsole(\'provider not set\');\\n      return;\\n    }\\n    setConsole(\'Signing message\');\\n    // For ethers v5\\n    // const ethersProvider = new ethers.providers.Web3Provider(this.provider);\\n    const ethersProvider = new ethers.BrowserProvider(provider!);\\n\\n    // For ethers v5\\n    // const signer = ethersProvider.getSigner();\\n    const signer = await ethersProvider.getSigner();\\n    const originalMessage = \'YOUR_MESSAGE\';\\n\\n    // Sign the message\\n    const signedMessage = await signer.signMessage(originalMessage);\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  const uiConsole = (...args: unknown[]) => {\\n    setConsole(JSON.stringify(args || {}, null, 2) + \'\\\\n\\\\n\\\\n\\\\n\' + console);\\n  };\\n\\n  const loggedInView = (\\n    <View style={styles.buttonArea}>\\n      <Button title=\\"Get User Info\\" onPress={() => uiConsole(web3auth.userInfo())} />\\n      <Button title=\\"Get Accounts\\" onPress={() => getAccounts()} />\\n      <Button title=\\"Get Balance\\" onPress={() => getBalance()} />\\n      <Button title=\\"Sign Message\\" onPress={() => signMessage()} />\\n      <Button title=\\"Log Out\\" onPress={logout} />\\n    </View>\\n  );\\n\\n  const unloggedInView = (\\n    <View style={styles.buttonAreaLogin}>\\n      <TextInput style={styles.inputEmail} placeholder=\\"Enter email\\" onChangeText={setEmail} />\\n      <Button title=\\"Login with Web3Auth\\" onPress={login} />\\n    </View>\\n  );\\n\\n  return (\\n    <View style={styles.container}>\\n      {loggedIn ? loggedInView : unloggedInView}\\n      <View style={styles.consoleArea}>\\n        <Text style={styles.consoleText}>Console:</Text>\\n        <ScrollView style={styles.console}>\\n          <Text>{console}</Text>\\n        </ScrollView>\\n      </View>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: \'#fff\',\\n    alignItems: \'center\',\\n    justifyContent: \'center\',\\n    paddingTop: 50,\\n    paddingBottom: 30,\\n  },\\n  consoleArea: {\\n    margin: 20,\\n    alignItems: \'center\',\\n    justifyContent: \'center\',\\n    flex: 1,\\n  },\\n  console: {\\n    flex: 1,\\n    backgroundColor: \'#CCCCCC\',\\n    color: \'#ffffff\',\\n    padding: 10,\\n    width: Dimensions.get(\'window\').width - 60,\\n  },\\n  consoleText: {\\n    padding: 10,\\n  },\\n  buttonArea: {\\n    flex: 2,\\n    alignItems: \'center\',\\n    justifyContent: \'space-around\',\\n    paddingBottom: 30,\\n  },\\n  buttonAreaLogin: {\\n    flex: 2,\\n    alignItems: \'center\',\\n    justifyContent: \'center\',\\n    paddingBottom: 30,\\n  },\\n  inputEmail: {\\n    height: 40,\\n    width: 300,\\n    borderColor: \'gray\',\\n    borderWidth: 1,\\n    padding: 10,\\n    borderRadius: 5,\\n    marginBottom: 20,\\n  }\\n});\\n","Web3Auth/web3auth-pnp-examples/main/react-native/rn-bare-quick-start/package.json":"{\\n  \\"name\\": \\"rn-bare-quick-start\\",\\n  \\"version\\": \\"0.0.1\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"android\\": \\"react-native run-android\\",\\n    \\"ios\\": \\"react-native run-ios\\",\\n    \\"lint\\": \\"eslint .\\",\\n    \\"start\\": \\"react-native start\\",\\n    \\"test\\": \\"jest\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@ethersproject/shims\\": \\"^5.7.0\\",\\n    \\"@toruslabs/react-native-web-browser\\": \\"^1.1.0\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.2.1\\",\\n    \\"@web3auth/react-native-sdk\\": \\"^5.1.0\\",\\n    \\"ethers\\": \\"^6.9.1\\",\\n    \\"react\\": \\"18.2.0\\",\\n    \\"react-native\\": \\"0.72.6\\",\\n    \\"react-native-encrypted-storage\\": \\"^4.0.3\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@babel/core\\": \\"^7.20.0\\",\\n    \\"@babel/plugin-transform-private-methods\\": \\"^7.22.5\\",\\n    \\"@babel/preset-env\\": \\"^7.20.0\\",\\n    \\"@babel/runtime\\": \\"^7.20.0\\",\\n    \\"@react-native-community/eslint-config\\": \\"^3.2.0\\",\\n    \\"@tsconfig/react-native\\": \\"^2.0.2\\",\\n    \\"@types/jest\\": \\"^29.2.1\\",\\n    \\"@types/react\\": \\"^18.0.24\\",\\n    \\"@types/react-test-renderer\\": \\"^18.0.0\\",\\n    \\"babel-jest\\": \\"^29.2.1\\",\\n    \\"base-64\\": \\"^1.0.0\\",\\n    \\"empty-module\\": \\"^0.0.2\\",\\n    \\"eslint\\": \\"^8.19.0\\",\\n    \\"jest\\": \\"^29.2.1\\",\\n    \\"metro\\": \\"^0.77.0\\",\\n    \\"metro-react-native-babel-preset\\": \\"0.73.9\\",\\n    \\"prettier\\": \\"^2.4.1\\",\\n    \\"react-native-get-random-values\\": \\"^1.9.0\\",\\n    \\"react-native-quick-base64\\": \\"^2.0.7\\",\\n    \\"react-native-quick-crypto\\": \\"^0.6.1\\",\\n    \\"react-native-tcp-socket\\": \\"^6.0.6\\",\\n    \\"react-test-renderer\\": \\"18.2.0\\",\\n    \\"readable-stream\\": \\"^4.4.2\\",\\n    \\"typescript\\": \\"5.2.2\\"\\n  },\\n  \\"jest\\": {\\n    \\"preset\\": \\"react-native\\"\\n  }\\n}","Web3Auth/web3auth-pnp-examples/main/react-native/rn-bare-quick-start/metro.config.js":"// Learn more https://docs.expo.io/guides/customizing-metro\\nconst { getDefaultConfig } = require(\\"metro-config\\");\\n\\nmodule.exports = (async () => {\\n    const {\\n        resolver: { sourceExts, assetExts },\\n    } = await getDefaultConfig(__dirname);\\n\\n    const defaultSourceExts = [...sourceExts, \\"svg\\", \\"mjs\\", \\"cjs\\"];\\n\\n    return {\\n        resolver: {\\n            // IMP START - Bundler Issues\\n            extraNodeModules: {\\n                assert: require.resolve(\\"empty-module\\"), // assert can be polyfilled here if needed\\n                http: require.resolve(\\"empty-module\\"), // stream-http can be polyfilled here if needed\\n                https: require.resolve(\\"empty-module\\"), // https-browserify can be polyfilled here if needed\\n                os: require.resolve(\\"empty-module\\"), // os-browserify can be polyfilled here if needed\\n                url: require.resolve(\\"empty-module\\"), // url can be polyfilled here if needed\\n                zlib: require.resolve(\\"empty-module\\"), // browserify-zlib can be polyfilled here if needed\\n                path: require.resolve(\\"empty-module\\"),\\n                crypto: require.resolve(\\"react-native-quick-crypto\\"),\\n                stream: require.resolve(\\"readable-stream\\"),\\n            },\\n            // IMP END - Bundler Issues\\n\\n            assetExts: assetExts.filter((ext) => ext !== \\"svg\\"),\\n\\n            sourceExts: process.env.TEST_REACT_NATIVE ? [\\"e2e.js\\"].concat(defaultSourceExts) : defaultSourceExts,\\n        },\\n        transformer: {\\n            getTransformOptions: async () => ({\\n                transform: {\\n                    experimentalImportSupport: false,\\n                    inlineRequires: true,\\n                },\\n            }),\\n        },\\n    };\\n})();","Web3Auth/web3auth-pnp-examples/main/react-native/rn-bare-quick-start/globals.js":"global.Buffer = require(\'buffer\').Buffer;\\n\\n// Needed so that \'stream-http\' chooses the right default protocol.\\nglobal.location = {\\n  protocol: \'file:\',\\n};\\n\\nglobal.process.version = \'v16.0.0\';\\nif (!global.process.version) {\\n  global.process = require(\'process\');\\n  console.log({process: global.process});\\n}\\n\\nprocess.browser = true;\\n","Web3Auth/web3auth-pnp-examples/main/react-native/rn-bare-quick-start/index.js":"/**\\n * @format\\n */\\n\\nimport {AppRegistry} from \'react-native\';\\nimport \'./globals\';\\nimport \'react-native-get-random-values\';\\nimport App from \'./App\';\\nimport {name as appName} from \'./app.json\';\\nAppRegistry.registerComponent(appName, () => App);\\n","Web3Auth/web3auth-pnp-examples/main/react-native/rn-bare-quick-start/ios/Podfile":"require_relative \'../node_modules/react-native/scripts/react_native_pods\'\\nrequire_relative \'../node_modules/@react-native-community/cli-platform-ios/native_modules\'\\n\\n# IMP START - Requirements iOS\\nplatform :ios, \'14.0\'\\n# IMP END - Requirements iOS\\nprepare_react_native_project!\\n\\n# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.\\n# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded\\n#\\n# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`\\n# ```js\\n# module.exports = {\\n#   dependencies: {\\n#     ...(process.env.NO_FLIPPER ? { \'react-native-flipper\': { platforms: { ios: null } } } : {}),\\n# ```\\nflipper_config = ENV[\'NO_FLIPPER\'] == \\"1\\" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled\\n\\nlinkage = ENV[\'USE_FRAMEWORKS\']\\nif linkage != nil\\n  Pod::UI.puts \\"Configuring Pod with #{linkage}ally linked Frameworks\\".green\\n  use_frameworks! :linkage => linkage.to_sym\\nend\\n\\ntarget \'web3authrnexample\' do\\n  config = use_native_modules!\\n\\n  # Flags change depending on the env values.\\n  flags = get_default_flags()\\n\\n  use_react_native!(\\n    :path => config[:reactNativePath],\\n    # Hermes is now enabled by default. Disable by setting this flag to false.\\n    # Upcoming versions of React Native may rely on get_default_flags(), but\\n    # we make it explicit here to aid in the React Native upgrade process.\\n    :hermes_enabled => flags[:hermes_enabled],\\n    :fabric_enabled => flags[:fabric_enabled],\\n    # Enables Flipper.\\n    #\\n    # Note that if you have use_frameworks! enabled, Flipper will not work and\\n    # you should disable the next line.\\n    :flipper_configuration => flipper_config,\\n    # An absolute path to your application root.\\n    :app_path => \\"#{Pod::Config.instance.installation_root}/..\\"\\n  )\\n\\n  target \'web3authrnexampleTests\' do\\n    inherit! :complete\\n    # Pods for testing\\n  end\\n\\n  post_install do |installer|\\n    react_native_post_install(\\n      installer,\\n      # Set `mac_catalyst_enabled` to `true` in order to apply patches\\n      # necessary for Mac Catalyst builds\\n      :mac_catalyst_enabled => false\\n    )\\n    __apply_Xcode_12_5_M1_post_install_workaround(installer)\\n  end\\nend\\n","Web3Auth/web3auth-pnp-examples/main/react-native/rn-bare-quick-start/android/build.gradle":"// Top-level build file where you can add configuration options common to all sub-projects/modules.\\n\\nbuildscript {\\n    ext {\\n        buildToolsVersion = \\"33.0.0\\"\\n        // IMP START - Requirements Android\\n        minSdkVersion = 21\\n        compileSdkVersion = 33\\n        targetSdkVersion = 33\\n        // IMP END - Requirements Android\\n\\n        // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.\\n        ndkVersion = \\"23.1.7779620\\"\\n    }\\n    repositories {\\n        google()\\n        mavenCentral()\\n    }\\n    dependencies {\\n        classpath(\\"com.android.tools.build:gradle:7.3.1\\")\\n        classpath(\\"com.facebook.react:react-native-gradle-plugin\\")\\n    }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/ios/ios-quick-start/ios-example/ContentView.swift":"import SwiftUI\\n// IMP START - Installation\\nimport Web3Auth\\n// IMP END - Installation\\n\\n@main\\nstruct MainApp: App {\\n    var body: some Scene {\\n        WindowGroup {\\n            ContentView(vm: ViewModel())\\n        }\\n    }\\n}\\n\\nstruct ContentView: View {\\n    @StateObject var vm: ViewModel\\n\\n    var body: some View {\\n        NavigationView {\\n                    VStack {\\n                        if vm.isLoading {\\n                            ProgressView()\\n                        } else {\\n                            if vm.loggedIn,let user = vm.user, let web3rpc = Web3RPC(user: user) {\\n                                UserDetailView(\\n                                    web3RPC: web3rpc,\\n                                    viewModel: vm\\n                                )\\n                            } else {\\n                                LoginView(vm: vm)\\n                            }\\n                        }\\n                    }\\n                    .navigationTitle(vm.navigationTitle)\\n                    Spacer()\\n                }\\n                .onAppear {\\n                    Task {\\n                        await vm.setup()\\n                    }\\n                }\\n    }\\n}\\n\\nstruct ContentView_Previews: PreviewProvider {\\n    static var previews: some View {\\n        ContentView(vm: ViewModel())\\n    }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/ios/ios-quick-start/ios-example/LoginView.swift":"import SwiftUI\\nimport BigInt\\nimport Foundation\\nimport web3\\n\\nstruct LoginView: View {\\n    @StateObject var vm: ViewModel\\n    @State private var emailInput: String = \\"\\"\\n\\n    var body: some View {\\n        VStack {\\n            Spacer()\\n            \\n            Text(\\"Web3Auth iOS QuickStart\\")\\n                                .font(.title) // Adjust the font size as needed\\n                                .fontWeight(.bold)\\n                                .padding(.bottom, 20)\\n\\n            TextField(\\"Enter your email\\", text: $emailInput)\\n                .textFieldStyle(RoundedBorderTextFieldStyle())\\n                .padding()\\n                .padding(.horizontal, 10)\\n\\n            Button(\\n                action: {\\n                    vm.loginEmailPasswordless(provider: .EMAIL_PASSWORDLESS, email: emailInput)\\n                },\\n                label: {\\n                    Text(\\"Sign In with Email Passwordless\\")\\n                        .foregroundColor(.white)\\n                        .frame(maxWidth: .infinity)\\n                        .padding()\\n                        .background(Color.blue)\\n                        .cornerRadius(8)\\n                }\\n            )\\n            .padding(.horizontal, 20)\\n            .padding(.bottom, 20)\\n\\n            HStack {\\n                Rectangle()\\n                    .fill(Color.gray)\\n                    .frame(height: 1)\\n\\n                Text(\\"or\\")\\n                    .foregroundColor(.gray)\\n                    .padding(.horizontal, 10)\\n\\n                Rectangle()\\n                    .fill(Color.gray)\\n                    .frame(height: 1)\\n            }\\n            .padding(.horizontal, 20)\\n\\n            Button(\\n                action: {\\n                    vm.login(provider: .GOOGLE)\\n                },\\n                label: {\\n                    Text(\\"Sign In with Google\\")\\n                        .foregroundColor(.white)\\n                        .frame(maxWidth: .infinity)\\n                        .padding()\\n                        .background(Color.red) // Change color as needed\\n                        .cornerRadius(8)\\n                }\\n            )\\n            .padding(.horizontal, 20)\\n            .padding(.bottom, 10)\\n\\n            Button(\\n                action: {\\n                    vm.login(provider: .APPLE)\\n                },\\n                label: {\\n                    Text(\\"Sign In with Apple\\")\\n                        .foregroundColor(.white)\\n                        .frame(maxWidth: .infinity)\\n                        .padding()\\n                        .background(Color.black) // Change color as needed\\n                        .cornerRadius(8)\\n                }\\n            )\\n            .padding(.horizontal, 20)\\n\\n            Spacer()\\n        }\\n        .background(Color.white.edgesIgnoringSafeArea(.all))\\n    }\\n}\\n\\n\\nstruct LoginView_Previews: PreviewProvider {\\n    static var previews: some View {\\n        LoginView(vm: ViewModel())\\n    }\\n}\\n\\npublic typealias Ether = Double\\npublic typealias Wei = BigUInt\\n\\npublic final class Web3AuthWeb3Utils {\\n    public static func timeMinToSec(val: Double) -> Double {\\n        return val * 60\\n    }\\n\\n    // NOTE: calculate wei by 10^18\\n    private static let etherInWei = pow(Double(10), 18)\\n    private static let etherInGwei = pow(Double(10), 9)\\n\\n    /// Convert Wei(BInt) unit to Ether(Decimal) unit\\n    public static func toEther(wei: Wei) -> Ether {\\n        guard let decimalWei = Double(wei.description) else {\\n            return 0\\n        }\\n        return decimalWei / etherInWei\\n    }\\n\\n    public static func toEther(Gwie: BigUInt) -> Ether {\\n        guard let decimalWei = Double(Gwie.description) else {\\n            return 0\\n        }\\n        return decimalWei / etherInGwei\\n    }\\n\\n    /// Convert Ether(Decimal) unit to Wei(BInt) unit\\n    public static func toWei(ether: Ether) -> Wei {\\n        let wei = Wei(ether * etherInWei)\\n        return wei\\n    }\\n\\n    /// Convert Ether(String) unit to Wei(BInt) unit\\n    public static func toWei(ether: String) -> Wei {\\n        guard let decimalEther = Double(ether) else {\\n            return 0\\n        }\\n        return toWei(ether: decimalEther)\\n    }\\n\\n    // Only used for calcurating gas price and gas limit.\\n    public static func toWei(GWei: Double) -> Wei {\\n        return Wei(GWei * 1000000000)\\n    }\\n}\\n\\nenum ConverterError: Error {\\n    case failed\\n}\\n\\nextension String {\\n    func isValidEthAddress() -> Bool {\\n        let ethAddressRegex = \\"^0x[a-fA-F0-9]{40}$\\"\\n        let pred = NSPredicate(format: \\"SELF MATCHES %@\\", ethAddressRegex)\\n        return pred.evaluate(with: self)\\n    }\\n\\n    func numberOfOccurrencesOf(string: String) -> Int {\\n        return components(separatedBy: string).count - 1\\n    }\\n}\\n\\n","Web3Auth/web3auth-pnp-examples/main/ios/ios-quick-start/ios-example/UserDetailView.swift":"import SwiftUI\\nimport Web3Auth\\nimport web3\\n\\nstruct UserDetailView: View {\\n    @State private var isPrivateKeySectionVisible = false\\n    @State private var showingAlert = false\\n    @StateObject var web3RPC: Web3RPC\\n    @StateObject var viewModel: ViewModel\\n\\n    var body: some View {\\n        if let user = viewModel.user {\\n            List {\\n                // IMP START - Get User Info\\n                Section(header: Text(\\"User Information\\")) {\\n                    Text(\\"Name: \\\\(user.userInfo?.name ?? \\"\\")\\")\\n                    Text(\\"Email: \\\\(user.userInfo?.email ?? \\"\\")\\")\\n                }\\n                // IMP END - Get User Info\\n\\n                Section(header: Text(\\"Public Address\\")) {\\n                    Button {\\n                        web3RPC.getAccounts()\\n                    } label: {\\n                        Label(\\"Get Public Address\\", systemImage: \\"person.crop.circle\\")\\n                    }\\n                    if !web3RPC.publicAddress.isEmpty {\\n                        Text(\\"\\\\(web3RPC.publicAddress)\\")\\n                    }\\n                }\\n\\n                Section(header: Text(\\"Blockchain Calls\\")) {\\n                    Button {\\n                        web3RPC.getBalance()\\n                    } label: {\\n                        Label(\\"Get Balance\\", systemImage: \\"dollarsign.circle\\")\\n                    }\\n                    if web3RPC.balance >= 0 {\\n                        Text(\\"\\\\(web3RPC.balance) ETH\\")\\n                    }\\n\\n                    Button {\\n                        web3RPC.signMessage()\\n                    } label: {\\n                        Label(\\"Sign Transaction\\", systemImage: \\"pencil.circle\\")\\n                    }\\n                    if !web3RPC.signedMessageHashString.isEmpty {\\n                        Text(\\"\\\\(web3RPC.signedMessageHashString)\\")\\n                    }\\n\\n                    Button {\\n                        web3RPC.sendTransaction()\\n                    } label: {\\n                        Label(\\"Send Transaction\\", systemImage: \\"paperplane.circle\\")\\n                    }\\n                    if !web3RPC.sentTransactionID.isEmpty {\\n                        Text(\\"\\\\(web3RPC.sentTransactionID)\\")\\n                    }\\n                }\\n\\n                Button {\\n                    isPrivateKeySectionVisible.toggle()\\n                } label: {\\n                    Label(\\"Private Key\\", systemImage: \\"key\\")\\n                }\\n                if isPrivateKeySectionVisible {\\n                    Section(header: Text(\\"Private Key\\")) {\\n                        Text(\\"\\\\(user.privKey ?? \\"\\")\\")\\n                    }\\n                }\\n\\n                Section {\\n                    Button {\\n                        Task.detached {\\n                            do {\\n                              \\n                                try await viewModel.logout()\\n                               \\n                            } catch {\\n                                DispatchQueue.main.async {\\n                                    showingAlert = true\\n                                }\\n                            }\\n                        }\\n                    } label: {\\n                        Label(\\"Logout\\", systemImage: \\"arrow.left.square.fill\\")\\n                            .foregroundColor(.red)\\n                    }\\n                    .alert(isPresented: $showingAlert) {\\n                        Alert(title: Text(\\"Error\\"), message: Text(\\"Logout failed!\\"), dismissButton: .default(Text(\\"OK\\")))\\n                    }\\n                }\\n            }\\n            .listStyle(GroupedListStyle())\\n            .navigationBarTitleDisplayMode(.inline)\\n            .navigationTitle(\\"User Details\\")\\n        }\\n    }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/ios/ios-quick-start/ios-example/ViewModel.swift":"import Foundation\\n// IMP START - Quick Start\\nimport Web3Auth\\n// IMP END - Quick Start\\n\\nclass ViewModel: ObservableObject {\\n    var web3Auth: Web3Auth?\\n    @Published var loggedIn: Bool = false\\n    @Published var user: Web3AuthState?\\n    @Published var isLoading = false\\n    @Published var navigationTitle: String = \\"\\"\\n    // IMP START - Get your Web3Auth Client ID from Dashboard\\n    private var clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"\\n    // IMP END - Get your Web3Auth Client ID from Dashboard\\n    // IMP START - Whitelist bundle ID\\n    private var network: Network = .sapphire_mainnet\\n    // IMP END - Whitelist bundle ID\\n    func setup() async {\\n        guard web3Auth == nil else { return }\\n        await MainActor.run(body: {\\n            isLoading = true\\n            navigationTitle = \\"Loading\\"\\n        })\\n        \\n        // IMP START - Initialize Web3Auth\\n        web3Auth = await Web3Auth(W3AInitParams(\\n            clientId: clientId, network: network\\n        ))\\n        // IMP END - Initialize Web3Auth\\n        await MainActor.run(body: {\\n            if self.web3Auth?.state != nil {\\n                user = web3Auth?.state\\n                loggedIn = true\\n            }\\n            isLoading = false\\n            navigationTitle = loggedIn ? \\"UserInfo\\" : \\"SignIn\\"\\n        })\\n    }\\n    \\n    func login(provider: Web3AuthProvider) {\\n        Task {\\n            do {\\n                // IMP START - Login\\n                let result = try await web3Auth?.login(\\n                    W3ALoginParams(loginProvider: provider)\\n                )\\n                // IMP END - Login\\n                await MainActor.run(body: {\\n                    user = result\\n                    loggedIn = true\\n                })\\n                \\n            } catch {\\n                print(\\"Error\\")\\n            }\\n        }\\n    }\\n    \\n    func logout() throws {\\n        Task {\\n            // IMP START - Logout\\n            try await web3Auth?.logout()\\n            // IMP END - Logout\\n            await MainActor.run(body: {\\n                loggedIn = false\\n            })\\n        }\\n    }\\n    \\n    func loginEmailPasswordless(provider: Web3AuthProvider, email: String) {\\n        Task {\\n            do {\\n                // IMP START - Login\\n                let result = try await web3Auth?.login(W3ALoginParams(loginProvider: provider, extraLoginOptions: ExtraLoginOptions(display: nil, prompt: nil, max_age: nil, ui_locales: nil, id_token_hint: nil, id_token: nil, login_hint: email, acr_values: nil, scope: nil, audience: nil, connection: nil, domain: nil, client_id: nil, redirect_uri: nil, leeway: nil, verifierIdField: nil, isVerifierIdCaseSensitive: nil, additionalParams: nil)))\\n                // IMP END - Login\\n                await MainActor.run(body: {\\n                    user = result\\n                    loggedIn = true\\n                    navigationTitle = \\"UserInfo\\"\\n                })\\n                \\n            } catch {\\n                print(\\"Error\\")\\n            }\\n        }\\n    }\\n}\\n","Web3Auth/web3auth-pnp-examples/main/ios/ios-quick-start/ios-example/web3RPC.swift":"\\nimport BigInt\\nimport Combine\\nimport Foundation\\nimport web3\\nimport Web3Auth\\nimport SwiftUI\\n\\nclass Web3RPC : ObservableObject {\\n    var user: Web3AuthState\\n    private var client: EthereumClientProtocol\\n    public var address: EthereumAddress\\n    private var account: EthereumAccount\\n    private var latestBlock = 0\\n    private var chainID = 11155111\\n    private var RPC_URL = \\"https://rpc.ankr.com/eth_sepolia\\"\\n    \\n    @Published var balance: Double = 0\\n    @Published var signedMessageHashString:String = \\"\\"\\n    @Published var sentTransactionID:String = \\"\\"\\n    @Published var publicAddress: String = \\"\\"\\n    \\n    init?(user: Web3AuthState){\\n        self.user = user\\n        do{\\n            client = EthereumHttpClient(url: URL(string: RPC_URL)!)\\n            account = try EthereumAccount(keyStorage: user as EthereumSingleKeyStorageProtocol )\\n            address = account.address\\n        } catch {\\n             return nil\\n        }\\n    }\\n    \\n    func getAccounts() {\\n        self.publicAddress = address.asString()\\n        print(address.asString())\\n    }\\n    \\n\\n    func checkLatestBlockChanged() async -> Bool {\\n        return await withCheckedContinuation({ continuation in\\n            client.eth_blockNumber { [weak self] result in\\n                switch result {\\n                case .success(let val):\\n                    if self?.latestBlock != val {\\n                        self?.latestBlock = val\\n                        continuation.resume(returning: true)\\n                    } else {\\n                        continuation.resume(returning: false)\\n                    }\\n                case .failure:\\n                    continuation.resume(returning: false)\\n                }\\n            }\\n        })\\n    }\\n\\n    // IMP START - Blockchain Calls\\n    func getBalance() {\\n        Task {\\n            let blockChanged = await checkLatestBlockChanged()\\n            guard blockChanged == true else {\\n                return\\n            }\\n            let _ = client.eth_getBalance(address: self.address, block: .Latest) { [unowned self] result in\\n                switch result {\\n                case .success(let weiValue):\\n                    let balance = Web3AuthWeb3Utils.toEther(wei: weiValue) // Access the value directly\\n                    DispatchQueue.main.async { [weak self] in\\n                        self?.balance = balance\\n                    }\\n                case .failure(let error):\\n                    print(error)\\n                }\\n            }\\n        }\\n    }\\n\\n    \\n    func signMessage() {\\n        do {\\n            let val = try account.sign(message: \\"Hello World\\")\\n            self.signedMessageHashString = val.web3.hexString\\n            print(self.signedMessageHashString)\\n        } catch {\\n            self.signedMessageHashString = \\"Something Went Wrong\\"\\n        }\\n    }\\n    \\n    func sendTransaction()  {\\n        Task{\\n            do {\\n                let val = try await transferAsset(sendTo: \\"0x24BfD1c2D000EC276bb2b6af38C47390Ae6B5FF0\\", amount: 0.0001, maxTip: 0.0001)\\n                self.sentTransactionID = val\\n                print(val)\\n            } catch let error {\\n                print(\\"error: \\", error)\\n                self.sentTransactionID = \\"Something Went Wrong, please check if you have insufficient funds\\"\\n            }\\n            \\n        }\\n        \\n    }\\n    \\n    func transferAsset(sendTo: String, amount: Double, maxTip: Double, gasLimit: BigUInt = 21000) async throws -> String {\\n        let gasPrice = try await client.eth_gasPrice()\\n        let maxTipInGwie = BigUInt(Web3AuthWeb3Utils.toEther(Gwie: BigUInt(amount)))\\n        let totalGas = gasPrice + maxTipInGwie\\n        let amtInGwie = Web3AuthWeb3Utils.toWei(ether: amount)\\n        let nonce = try await client.eth_getTransactionCount(address: address, block: .Latest)\\n        let transaction = EthereumTransaction(from: address, to: EthereumAddress(sendTo), value: amtInGwie, data: Data(), nonce: nonce + 1, gasPrice: totalGas, gasLimit: gasLimit, chainId: chainID)\\n        let signed = try account.sign(transaction: transaction)\\n        let val = try await client.eth_sendRawTransaction(signed.transaction, withAccount: account)\\n        return val\\n    }\\n    // IMP END - Blockchain Calls\\n    \\n}\\n\\nextension Web3AuthState: EthereumSingleKeyStorageProtocol {\\n    public func storePrivateKey(key: Data) throws {\\n        \\n    }\\n    \\n    public func loadPrivateKey() throws -> Data {\\n        guard let privKeyData = self.privKey?.web3.hexData else {\\n            throw SampleAppError.somethingWentWrong\\n        }\\n        return privKeyData\\n        \\n    }\\n    \\n    \\n}\\n\\npublic enum SampleAppError:Error{\\n    \\n    case noInternetConnection\\n    case decodingError\\n    case somethingWentWrong\\n    case customErr(String)\\n}\\n","Web3Auth/web3auth-pnp-examples/main/flutter/flutter-quick-start/lib/main.dart":"import \'dart:async\';\\nimport \'dart:developer\';\\nimport \'dart:io\';\\n\\nimport \'package:flutter/material.dart\';\\n// IMP START - Quick Start\\nimport \'package:web3auth_flutter/enums.dart\';\\nimport \'package:web3auth_flutter/input.dart\';\\nimport \'package:web3auth_flutter/output.dart\';\\nimport \'package:web3auth_flutter/web3auth_flutter.dart\';\\n// IMP END - Quick Start\\n\\nimport \'package:http/http.dart\';\\nimport \'package:web3dart/web3dart.dart\';\\nimport \'package:shared_preferences/shared_preferences.dart\';\\n\\nvoid main() {\\n  runApp(const MyApp());\\n}\\n\\nclass MyApp extends StatefulWidget {\\n  const MyApp({super.key});\\n\\n  @override\\n  State<MyApp> createState() => _MyAppState();\\n}\\n\\nclass _MyAppState extends State<MyApp> {\\n  String _result = \'\';\\n  bool logoutVisible = false;\\n  String rpcUrl = \'https://rpc.ankr.com/eth_sepolia\';\\n  // TextEditingController for handling input from the text field\\n  final TextEditingController emailController = TextEditingController();\\n\\n  @override\\n  void dispose() {\\n    super.dispose();\\n  }\\n\\n  @override\\n  void initState() {\\n    super.initState();\\n    initPlatformState();\\n  }\\n\\n  // Platform messages are asynchronous, so we initialize in an async method.\\n  Future<void> initPlatformState() async {\\n    Uri redirectUrl;\\n    // IMP START - Get your Web3Auth Client ID from Dashboard\\n    String clientId =\\n        \'BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\';\\n    if (Platform.isAndroid) {\\n      redirectUrl = Uri.parse(\'w3a://com.example.w3aflutter/auth\');\\n    } else if (Platform.isIOS) {\\n      redirectUrl = Uri.parse(\'com.example.w3aflutter://auth\');\\n      // IMP END - Get your Web3Auth Client ID from Dashboard\\n    } else {\\n      throw UnKnownException(\'Unknown platform\');\\n    }\\n\\n    // IMP START - Initialize Web3Auth\\n    await Web3AuthFlutter.init(Web3AuthOptions(\\n      clientId: clientId,\\n      network: Network.sapphire_mainnet,\\n      redirectUrl: redirectUrl,\\n      // 259200 allows user to stay authenticated for 3 days with Web3Auth.\\n      // Default is 86400, which is 1 day.\\n      sessionTime: 259200,\\n    ));\\n\\n    await Web3AuthFlutter.initialize();\\n    // IMP END - Initialize Web3Auth\\n\\n    final String res = await Web3AuthFlutter.getPrivKey();\\n    log(res);\\n    if (res.isNotEmpty) {\\n      setState(() {\\n        logoutVisible = true;\\n      });\\n    }\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      home: Scaffold(\\n        appBar: AppBar(\\n          title: const Text(\'Web3Auth x Flutter QuickStart\'),\\n        ),\\n        body: SingleChildScrollView(\\n          child: Center(\\n              child: Column(\\n            mainAxisAlignment: MainAxisAlignment.center,\\n            children: [\\n              const Padding(\\n                padding: EdgeInsets.all(8.0),\\n              ),\\n              Visibility(\\n                visible: !logoutVisible,\\n                child: Column(\\n                  children: [\\n                    const Icon(\\n                      Icons.flutter_dash,\\n                      size: 80,\\n                      color: Color(0xFF1389fd),\\n                    ),\\n                    const SizedBox(\\n                      height: 40,\\n                    ),\\n                    const Text(\\n                      \'Web3Auth\',\\n                      style: TextStyle(\\n                        fontWeight: FontWeight.bold,\\n                        fontSize: 36,\\n                        color: Color(0xFF0364ff),\\n                      ),\\n                    ),\\n                    const SizedBox(\\n                      height: 10,\\n                    ),\\n                    const Text(\\n                      \'Welcome to Web3Auth x Flutter Quick Start Demo\',\\n                      style: TextStyle(fontSize: 14),\\n                    ),\\n                    const SizedBox(\\n                      height: 20,\\n                    ),\\n                    const Text(\\n                      \'Login with\',\\n                      style: TextStyle(fontSize: 12),\\n                    ),\\n                    const SizedBox(\\n                      height: 20,\\n                    ),\\n                    // Text field for entering the user\'s email\\n                    TextField(\\n                      controller: emailController,\\n                      decoration: const InputDecoration(\\n                        labelText: \'Enter Email\',\\n                      ),\\n                    ),\\n                    ElevatedButton(\\n                      onPressed: _login(\\n                        () => _withEmailPasswordless(emailController.text),\\n                      ),\\n                      child: const Text(\'Login with Email Passwordless\'),\\n                    ),\\n                  ],\\n                ),\\n              ),\\n              ElevatedButtonTheme(\\n                data: ElevatedButtonThemeData(\\n                  style: ElevatedButton.styleFrom(\\n                    backgroundColor: const Color.fromARGB(255, 195, 47, 233),\\n                    foregroundColor: Colors.white,\\n                  ),\\n                ),\\n                child: Visibility(\\n                  visible: logoutVisible,\\n                  child: Column(\\n                    children: [\\n                      Center(\\n                        child: ElevatedButton(\\n                            style: ElevatedButton.styleFrom(\\n                              backgroundColor: Colors.red[600],\\n                              foregroundColor: Colors.white,\\n                            ),\\n                            onPressed: _logout(),\\n                            child: const Column(\\n                              children: [\\n                                Text(\'Logout\'),\\n                              ],\\n                            )),\\n                      ),\\n                      const Text(\\n                        \'Blockchain calls\',\\n                        style: TextStyle(fontSize: 20),\\n                      ),\\n                      ElevatedButton(\\n                        onPressed: _getUserInfo,\\n                        child: const Text(\'Get UserInfo\'),\\n                      ),\\n                      ElevatedButton(\\n                        onPressed: _getAddress,\\n                        child: const Text(\'Get Address\'),\\n                      ),\\n                      ElevatedButton(\\n                        onPressed: _getBalance,\\n                        child: const Text(\'Get Balance\'),\\n                      ),\\n                      ElevatedButton(\\n                        onPressed: _sendTransaction,\\n                        child: const Text(\'Send Transaction\'),\\n                      ),\\n                    ],\\n                  ),\\n                ),\\n              ),\\n              Padding(\\n                padding: const EdgeInsets.all(8.0),\\n                child: Text(_result),\\n              )\\n            ],\\n          )),\\n        ),\\n      ),\\n    );\\n  }\\n\\n  VoidCallback _login(Future<Web3AuthResponse> Function() method) {\\n    return () async {\\n      try {\\n        final Web3AuthResponse response = await method();\\n        final prefs = await SharedPreferences.getInstance();\\n        await prefs.setString(\'privateKey\', response.privKey.toString());\\n        setState(() {\\n          _result = response.toString();\\n          logoutVisible = true;\\n        });\\n      } on UserCancelledException {\\n        log(\\"User cancelled.\\");\\n      } on UnKnownException {\\n        log(\\"Unknown exception occurred\\");\\n      }\\n    };\\n  }\\n\\n  VoidCallback _logout() {\\n    return () async {\\n      try {\\n        setState(() {\\n          _result = \'\';\\n          logoutVisible = false;\\n        });\\n        // IMP START - Logout\\n        await Web3AuthFlutter.logout();\\n        // IMP END - Logout\\n      } on UserCancelledException {\\n        log(\\"User cancelled.\\");\\n      } on UnKnownException {\\n        log(\\"Unknown exception occurred\\");\\n      }\\n    };\\n  }\\n\\n  Future<Web3AuthResponse> _withEmailPasswordless(String userEmail) async {\\n    try {\\n      log(userEmail);\\n      // IMP START - Login\\n      return await Web3AuthFlutter.login(LoginParams(\\n        loginProvider: Provider.email_passwordless,\\n        extraLoginOptions: ExtraLoginOptions(login_hint: userEmail),\\n      ));\\n      // IMP END - Login\\n    } catch (e) {\\n      log(\\"Error during email/passwordless login: $e\\");\\n      // Handle the error as needed\\n      // You might want to show a user-friendly message or log the error\\n      return Future.error(\\"Login failed\\");\\n    }\\n  }\\n\\n  Future<TorusUserInfo> _getUserInfo() async {\\n    try {\\n      // IMP START - Get User Info\\n      TorusUserInfo userInfo = await Web3AuthFlutter.getUserInfo();\\n      // IMP END - Get User Info\\n      log(userInfo.toString());\\n      setState(() {\\n        _result = userInfo.toString();\\n      });\\n      return userInfo;\\n    } catch (e) {\\n      log(\\"Error during email/passwordless login: $e\\");\\n      // Handle the error as needed\\n      // You might want to show a user-friendly message or log the error\\n      return Future.error(\\"Login failed\\");\\n    }\\n  }\\n\\n  // IMP START - Blockchain Calls\\n  Future<String> _getAddress() async {\\n    final prefs = await SharedPreferences.getInstance();\\n    final privateKey = prefs.getString(\'privateKey\') ?? \'0\';\\n\\n    final credentials = EthPrivateKey.fromHex(privateKey);\\n    final address = credentials.address;\\n    log(\\"Account, ${address.hexEip55}\\");\\n    setState(() {\\n      _result = address.hexEip55.toString();\\n    });\\n    return address.hexEip55;\\n  }\\n\\n  Future<EtherAmount> _getBalance() async {\\n    try {\\n      final prefs = await SharedPreferences.getInstance();\\n      final privateKey = prefs.getString(\'privateKey\') ?? \'0\';\\n\\n      final client = Web3Client(rpcUrl, Client());\\n      final credentials = EthPrivateKey.fromHex(privateKey);\\n      final address = credentials.address;\\n\\n      // Get the balance in wei\\n      final weiBalance = await client.getBalance(address);\\n\\n      // Convert wei to ether\\n      final etherBalance = EtherAmount.fromBigInt(\\n        EtherUnit.ether,\\n        weiBalance.getInEther,\\n      );\\n\\n      log(etherBalance.toString());\\n\\n      setState(() {\\n        _result = etherBalance.toString();\\n      });\\n\\n      return etherBalance;\\n    } catch (e) {\\n      // Handle errors as needed\\n      log(\\"Error getting balance: $e\\");\\n      return EtherAmount.zero();\\n    }\\n  }\\n\\n  Future<String> _sendTransaction() async {\\n    final prefs = await SharedPreferences.getInstance();\\n    final privateKey = prefs.getString(\'privateKey\') ?? \'0\';\\n\\n    final client = Web3Client(rpcUrl, Client());\\n    final credentials = EthPrivateKey.fromHex(privateKey);\\n    final address = credentials.address;\\n    try {\\n      final receipt = await client.sendTransaction(\\n        credentials,\\n        Transaction(\\n          from: address,\\n          to: EthereumAddress.fromHex(\\n            \'0xeaA8Af602b2eDE45922818AE5f9f7FdE50cFa1A8\',\\n          ),\\n          // gasPrice: EtherAmount.fromUnitAndValue(EtherUnit.gwei, 100),\\n          value: EtherAmount.fromInt(\\n            EtherUnit.gwei,\\n            5000000,\\n          ), // 0.005 ETH\\n        ),\\n        chainId: 11155111,\\n      );\\n      log(receipt);\\n      setState(() {\\n        _result = receipt;\\n      });\\n      return receipt;\\n    } catch (e) {\\n      setState(() {\\n        _result = e.toString();\\n      });\\n      return e.toString();\\n    }\\n  }\\n  // IMP END - Blockchain Calls\\n}\\n","Web3Auth/web3auth-pnp-examples/main/flutter/flutter-quick-start/android/app/build.gradle":"def localProperties = new Properties()\\ndef localPropertiesFile = rootProject.file(\'local.properties\')\\nif (localPropertiesFile.exists()) {\\n    localPropertiesFile.withReader(\'UTF-8\') { reader ->\\n        localProperties.load(reader)\\n    }\\n}\\n\\ndef flutterRoot = localProperties.getProperty(\'flutter.sdk\')\\nif (flutterRoot == null) {\\n    throw new GradleException(\\"Flutter SDK not found. Define location with flutter.sdk in the local.properties file.\\")\\n}\\n\\ndef flutterVersionCode = localProperties.getProperty(\'flutter.versionCode\')\\nif (flutterVersionCode == null) {\\n    flutterVersionCode = \'1\'\\n}\\n\\ndef flutterVersionName = localProperties.getProperty(\'flutter.versionName\')\\nif (flutterVersionName == null) {\\n    flutterVersionName = \'1.0\'\\n}\\n\\napply plugin: \'com.android.application\'\\napply plugin: \'kotlin-android\'\\napply from: \\"$flutterRoot/packages/flutter_tools/gradle/flutter.gradle\\"\\n\\nandroid {\\n    // IMP START - Requirements Android\\n    compileSdkVersion 34 //flutter.compileSdkVersion\\n    // IMP END - Requirements Android\\n    ndkVersion flutter.ndkVersion\\n\\n    compileOptions {\\n        sourceCompatibility JavaVersion.VERSION_1_8\\n        targetCompatibility JavaVersion.VERSION_1_8\\n    }\\n\\n    kotlinOptions {\\n        jvmTarget = \'1.8\'\\n    }\\n\\n    sourceSets {\\n        main.java.srcDirs += \'src/main/kotlin\'\\n    }\\n\\n    defaultConfig {\\n        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).\\n        // IMP START - Whitelist bundle ID\\n        applicationId \\"com.example.w3aflutter\\"\\n        // IMP END - Whitelist bundle ID\\n        // You can update the following values to match your application needs.\\n        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.\\n        // IMP START - Requirements Android\\n        minSdkVersion 33 //flutter.minSdkVersion\\n        targetSdkVersion 33 //flutter.targetSdkVersion\\n        // IMP END - Requirements Android\\n        versionCode flutterVersionCode.toInteger()\\n        versionName flutterVersionName\\n    }\\n\\n    buildTypes {\\n        release {\\n            // TODO: Add your own signing config for the release build.\\n            // Signing with the debug keys for now, so `flutter run --release` works.\\n            signingConfig signingConfigs.debug\\n        }\\n    }\\n}\\n\\nflutter {\\n    source \'../..\'\\n}\\n\\ndependencies {\\n    implementation \\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\\"\\n}\\n","Web3Auth/web3auth-pnp-examples/main/flutter/flutter-quick-start/ios/Podfile":"# Uncomment this line to define a global platform for your project\\n# // IMP START - Requirements iOS\\nplatform :ios, \'14.0\'\\n# // IMP END - Requirements iOS\\n\\n# CocoaPods analytics sends network stats synchronously affecting flutter build latency.\\nENV[\'COCOAPODS_DISABLE_STATS\'] = \'true\'\\n\\nproject \'Runner\', {\\n  \'Debug\' => :debug,\\n  \'Profile\' => :release,\\n  \'Release\' => :release,\\n}\\n\\ndef flutter_root\\n  generated_xcode_build_settings_path = File.expand_path(File.join(\'..\', \'Flutter\', \'Generated.xcconfig\'), __FILE__)\\n  unless File.exist?(generated_xcode_build_settings_path)\\n    raise \\"#{generated_xcode_build_settings_path} must exist. If you\'re running pod install manually, make sure flutter pub get is executed first\\"\\n  end\\n\\n  File.foreach(generated_xcode_build_settings_path) do |line|\\n    matches = line.match(/FLUTTER_ROOT\\\\=(.*)/)\\n    return matches[1].strip if matches\\n  end\\n  raise \\"FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get\\"\\nend\\n\\nrequire File.expand_path(File.join(\'packages\', \'flutter_tools\', \'bin\', \'podhelper\'), flutter_root)\\n\\nflutter_ios_podfile_setup\\n\\ntarget \'Runner\' do\\n  use_frameworks!\\n  use_modular_headers!\\n\\n  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))\\nend\\n\\npost_install do |installer|\\n  installer.pods_project.targets.each do |target|\\n    flutter_additional_ios_build_settings(target)\\n  end\\nend\\n","Web3Auth/web3auth-pnp-examples/main/flutter/flutter-quick-start/pubspec.yaml":"name: w3aflutter\\ndescription: A new Flutter project.\\n\\n# The following line prevents the package from being accidentally published to\\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\\npublish_to: \\"none\\" # Remove this line if you wish to publish to pub.dev\\n\\n# The following defines the version and build number for your application.\\n# A version number is three numbers separated by dots, like 1.2.43\\n# followed by an optional build number separated by a +.\\n# Both the version and the builder number may be overridden in flutter\\n# build by specifying --build-name and --build-number, respectively.\\n# In Android, build-name is used as versionName while build-number used as versionCode.\\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\\n# Read more about iOS versioning at\\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\\n# In Windows, build-name is used as the major, minor, and patch parts\\n# of the product and file versions while build-number is used as the build suffix.\\nversion: 1.0.0+1\\n\\nenvironment:\\n  sdk: \\">=2.18.0 <4.0.0\\"\\n\\n# Dependencies specify other packages that your package needs in order to work.\\n# To automatically upgrade your package dependencies to the latest versions\\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\\n# dependencies can be manually updated by changing the version numbers below to\\n# the latest version available on pub.dev. To see which dependencies have newer\\n# versions available, run `flutter pub outdated`.\\ndependencies:\\n  flutter:\\n    sdk: flutter\\n\\n  # The following adds the Cupertino Icons font to your application.\\n  # Use with the CupertinoIcons class for iOS style icons.\\n  cupertino_icons: ^1.0.2\\n  # // IMP START - Installation\\n  web3auth_flutter: ^3.1.2\\n  # // IMP END - Installation\\n  web3dart: ^2.7.2\\n  shared_preferences: ^2.2.2\\n  http: ^1.2.0\\n\\ndev_dependencies:\\n  flutter_test:\\n    sdk: flutter\\n\\n  # The \\"flutter_lints\\" package below contains a set of recommended lints to\\n  # encourage good coding practices. The lint set provided by the package is\\n  # activated in the `analysis_options.yaml` file located at the root of your\\n  # package. See that file for information about deactivating specific lint\\n  # rules and activating additional ones.\\n  flutter_lints: ^3.0.1\\n\\n# For information on the generic Dart part of this file, see the\\n# following page: https://dart.dev/tools/pub/pubspec\\n\\n# The following section is specific to Flutter packages.\\nflutter:\\n  # The following line ensures that the Material Icons font is\\n  # included with your application, so that you can use the icons in\\n  # the material Icons class.\\n  uses-material-design: true\\n\\n  # To add assets to your application, add an assets section, like this:\\n  # assets:\\n  #   - images/a_dot_burr.jpeg\\n  #   - images/a_dot_ham.jpeg\\n\\n  # An image asset can refer to one or more resolution-specific \\"variants\\", see\\n  # https://flutter.dev/assets-and-images/#resolution-aware\\n\\n  # For details regarding adding assets from package dependencies, see\\n  # https://flutter.dev/assets-and-images/#from-packages\\n\\n  # To add custom fonts to your application, add a fonts section here,\\n  # in this \\"flutter\\" section. Each entry in this list should have a\\n  # \\"family\\" key with the font family name, and a \\"fonts\\" key with a\\n  # list giving the asset and other descriptors for the font. For\\n  # example:\\n  # fonts:\\n  #   - family: Schyler\\n  #     fonts:\\n  #       - asset: fonts/Schyler-Regular.ttf\\n  #       - asset: fonts/Schyler-Italic.ttf\\n  #         style: italic\\n  #   - family: Trajan Pro\\n  #     fonts:\\n  #       - asset: fonts/TrajanPro.ttf\\n  #       - asset: fonts/TrajanPro_Bold.ttf\\n  #         weight: 700\\n  #\\n  # For details regarding fonts from package dependencies,\\n  # see https://flutter.dev/custom-fonts/#from-packages\\n","Web3Auth/web3auth-pnp-examples/main/android/android-quick-start/app/src/main/java/com/sbz/web3authdemoapp/MainActivity.kt":"package com.sbz.web3authdemoapp\\n\\nimport android.content.Intent\\nimport android.net.Uri\\nimport android.os.Bundle\\nimport android.util.Log\\nimport android.view.View\\nimport android.widget.Button\\nimport android.widget.EditText\\nimport android.widget.TextView\\nimport androidx.appcompat.app.AppCompatActivity\\nimport com.google.gson.Gson\\n// IMP START - Quick Start\\nimport com.web3auth.core.Web3Auth\\n// IMP END - Quick Start\\nimport com.web3auth.core.types.*\\nimport org.web3j.crypto.Credentials\\nimport org.web3j.crypto.Hash\\nimport org.web3j.crypto.RawTransaction\\nimport org.web3j.crypto.Sign\\nimport org.web3j.crypto.TransactionEncoder\\nimport org.web3j.protocol.Web3j\\nimport org.web3j.protocol.core.DefaultBlockParameterName\\nimport org.web3j.protocol.core.methods.response.EthChainId\\nimport org.web3j.protocol.core.methods.response.EthGetBalance\\nimport org.web3j.protocol.core.methods.response.EthGetTransactionCount\\nimport org.web3j.protocol.core.methods.response.EthSendTransaction\\nimport org.web3j.protocol.http.HttpService\\nimport org.web3j.utils.Convert\\nimport org.web3j.utils.Numeric\\nimport java.math.BigInteger\\nimport java.nio.charset.StandardCharsets\\nimport java.util.concurrent.CompletableFuture\\n\\n\\nclass MainActivity : AppCompatActivity() {\\n\\n    private lateinit var web3Auth: Web3Auth\\n    private lateinit var web3: Web3j\\n    private lateinit var credentials: Credentials\\n    private lateinit var emailInput: EditText\\n    private val rpcUrl = \\"https://rpc.ankr.com/eth_sepolia\\"\\n\\n    private val gson = Gson()\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n\\n        // IMP START - Initialize Web3Auth\\n        web3Auth = Web3Auth(\\n            Web3AuthOptions(\\n                context = this,\\n                clientId = getString(R.string.web3auth_project_id),\\n                network = Network.SAPPHIRE_MAINNET, // pass over the network you want to use (MAINNET or TESTNET or CYAN, AQUA, SAPPHIRE_MAINNET or SAPPHIRE_TESTNET)\\n                buildEnv = BuildEnv.PRODUCTION,\\n                redirectUrl = Uri.parse(\\"com.sbz.web3authdemoapp://auth\\")\\n            )\\n        )\\n        // IMP END - Initialize Web3Auth\\n\\n        // Handle user signing in when app is not alive\\n        web3Auth.setResultUrl(intent?.data)\\n        // Call initialize() in onCreate() to check for any existing session.\\n        val sessionResponse: CompletableFuture<Void> = web3Auth.initialize()\\n        sessionResponse.whenComplete { _, error ->\\n            if (error == null) {\\n                reRender()\\n                println(\\"PrivKey: \\" + web3Auth.getPrivkey())\\n                println(\\"ed25519PrivKey: \\" + web3Auth.getEd25519PrivKey())\\n                println(\\"Web3Auth UserInfo\\" + web3Auth.getUserInfo())\\n                credentials = Credentials.create(web3Auth.getPrivkey())\\n                web3 = Web3j.build(HttpService(rpcUrl))\\n            } else {\\n                Log.d(\\"MainActivity_Web3Auth\\", error.message ?: \\"Something went wrong\\")\\n                // Ideally, you should initiate the login function here.\\n            }\\n        }\\n\\n        // Setup UI and event handlers\\n        emailInput = findViewById(R.id.emailInput)\\n\\n        val signInButton = findViewById<Button>(R.id.signInButton)\\n        signInButton.setOnClickListener { signIn() }\\n\\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\\n        signOutButton.setOnClickListener { signOut() }\\n        signOutButton.visibility = View.GONE\\n\\n        val getAddressButton = findViewById<Button>(R.id.getAddress)\\n        getAddressButton.setOnClickListener { getAddress() }\\n        getAddressButton.visibility = View.GONE\\n\\n        val getBalanceButton = findViewById<Button>(R.id.getBalance)\\n        getBalanceButton.setOnClickListener { getBalance() }\\n        getBalanceButton.visibility = View.GONE\\n\\n        val getMessageButton = findViewById<Button>(R.id.getMessage)\\n        getMessageButton.setOnClickListener { signMessage(\\"Welcome to Web3Auth\\") }\\n        getMessageButton.visibility = View.GONE\\n\\n        val getTransactionButton = findViewById<Button>(R.id.getTransaction)\\n        getTransactionButton.setOnClickListener { sendTransaction(0.001, \\"0xeaA8Af602b2eDE45922818AE5f9f7FdE50cFa1A8\\") }\\n        getTransactionButton.visibility = View.GONE\\n    }\\n\\n    override fun onNewIntent(intent: Intent?) {\\n        super.onNewIntent(intent)\\n\\n        // Handle user signing in when app is active\\n        web3Auth.setResultUrl(intent?.data)\\n    }\\n\\n    private fun signIn() {\\n        val email = emailInput.text.toString()\\n        // IMP START - Login\\n        val selectedLoginProvider = Provider.EMAIL_PASSWORDLESS   // Can be GOOGLE, FACEBOOK, TWITCH etc.\\n        val loginCompletableFuture: CompletableFuture<Web3AuthResponse> =\\n            web3Auth.login(LoginParams(selectedLoginProvider, extraLoginOptions = ExtraLoginOptions(login_hint = email)))\\n        // IMP END - Login\\n\\n        loginCompletableFuture.whenComplete { _, error ->\\n            if (error == null) {\\n                // Set the sessionId from Web3Auth in App State\\n                // This will be used when making blockchain calls with Web3j\\n                credentials = Credentials.create(web3Auth.getPrivkey())\\n                web3 = Web3j.build(HttpService(rpcUrl))\\n                reRender()\\n            } else {\\n                Log.d(\\"MainActivity_Web3Auth\\", error.message ?: \\"Something went wrong\\")\\n            }\\n        }\\n    }\\n\\n    private fun signOut() {\\n        // IMP START - Logout\\n        val logoutCompletableFuture = web3Auth.logout()\\n        // IMP END - Logout\\n        logoutCompletableFuture.whenComplete { _, error ->\\n            if (error == null) {\\n                reRender()\\n            } else {\\n                Log.d(\\"MainActivity_Web3Auth\\", error.message ?: \\"Something went wrong\\")\\n            }\\n        }\\n        recreate()\\n    }\\n\\n    private fun reRender() {\\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\\n        val signInButton = findViewById<Button>(R.id.signInButton)\\n        val signOutButton = findViewById<Button>(R.id.signOutButton)\\n        val getAddressButton = findViewById<Button>(R.id.getAddress)\\n        val getBalanceButton = findViewById<Button>(R.id.getBalance)\\n        val getMessageButton = findViewById<Button>(R.id.getMessage)\\n        val getTransactionButton = findViewById<Button>(R.id.getTransaction)\\n        emailInput = findViewById(R.id.emailInput)\\n\\n\\n\\n        var key: String? = null\\n        var userInfo: UserInfo? = null\\n        try {\\n            key = web3Auth.getPrivkey()\\n            // IMP START - Get User Info\\n            userInfo = web3Auth.getUserInfo()\\n            // IMP END - Get User Info\\n        } catch (ex: Exception) {\\n            print(ex)\\n        }\\n        if (key is String && key.isNotEmpty()) {\\n            contentTextView.text = gson.toJson(userInfo) + \\"\\\\n Private Key: \\" + key\\n            contentTextView.visibility = View.VISIBLE\\n            emailInput.visibility = View.GONE\\n            signInButton.visibility = View.GONE\\n            signOutButton.visibility = View.VISIBLE\\n            getAddressButton.visibility = View.VISIBLE\\n            getBalanceButton.visibility = View.VISIBLE\\n            getMessageButton.visibility = View.VISIBLE\\n            getTransactionButton.visibility = View.VISIBLE\\n        } else {\\n            contentTextView.visibility = View.GONE\\n            emailInput.visibility = View.VISIBLE\\n            signInButton.visibility = View.VISIBLE\\n            signOutButton.visibility = View.GONE\\n            getAddressButton.visibility = View.GONE\\n            getBalanceButton.visibility = View.GONE\\n            getMessageButton.visibility = View.GONE\\n            getTransactionButton.visibility = View.GONE\\n        }\\n    }\\n\\n    // IMP START - Blockchain Calls\\n    private fun getAddress(): String {\\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\\n        val publicAddress = credentials.address\\n        contentTextView.text = publicAddress\\n        println(\\"Address:, $publicAddress\\")\\n        return publicAddress\\n    }\\n\\n    private fun getBalance(): BigInteger? {\\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\\n        val publicAddress = credentials.address\\n        val ethBalance: EthGetBalance = web3.ethGetBalance(publicAddress, DefaultBlockParameterName.LATEST).sendAsync().get()\\n        contentTextView.text = ethBalance.balance.toString()\\n        println(\\"Balance: ${ethBalance.balance}\\")\\n        return ethBalance.balance\\n    }\\n\\n    private fun signMessage(message: String): String {\\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\\n        val hashedData = Hash.sha3(message.toByteArray(StandardCharsets.UTF_8))\\n        val signature = Sign.signMessage(hashedData, credentials.ecKeyPair)\\n        val r = Numeric.toHexString(signature.r)\\n        val s = Numeric.toHexString(signature.s).substring(2)\\n        val v = Numeric.toHexString(signature.v).substring(2)\\n        val signHash = StringBuilder(r).append(s).append(v).toString()\\n        contentTextView.text = signHash\\n        println(\\"Signed Hash: $signHash\\")\\n        return signHash\\n    }\\n\\n    private fun sendTransaction(amount: Double, recipientAddress: String): String? {\\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\\n        val ethGetTransactionCount: EthGetTransactionCount = web3.ethGetTransactionCount(credentials.address, DefaultBlockParameterName.LATEST).sendAsync().get()\\n        val nonce: BigInteger = ethGetTransactionCount.transactionCount\\n        val value: BigInteger = Convert.toWei(amount.toString(), Convert.Unit.ETHER).toBigInteger()\\n        val gasLimit: BigInteger = BigInteger.valueOf(21000)\\n        val chainId: EthChainId = web3.ethChainId().sendAsync().get()\\n\\n        // Raw Transaction\\n        val rawTransaction: RawTransaction = RawTransaction.createTransaction(\\n            chainId.chainId.toLong(),\\n            nonce,\\n            gasLimit,\\n            recipientAddress,\\n            value,\\n            \\"\\",\\n            BigInteger.valueOf(5000000000),\\n            BigInteger.valueOf(6000000000000)\\n        )\\n\\n        val signedMessage: ByteArray = TransactionEncoder.signMessage(rawTransaction, credentials)\\n        val hexValue: String = Numeric.toHexString(signedMessage)\\n        val ethSendTransaction: EthSendTransaction = web3.ethSendRawTransaction(hexValue).sendAsync().get()\\n        return if(ethSendTransaction.error != null) {\\n            println(\\"Tx Error: ${ethSendTransaction.error.message}\\")\\n            contentTextView.text = \\"Tx Error: ${ethSendTransaction.error.message}\\"\\n            ethSendTransaction.error.message\\n        } else {\\n            println(\\"Tx Hash: ${ethSendTransaction.transactionHash}\\")\\n            contentTextView.text = \\"Tx Hash: ${ethSendTransaction.transactionHash}\\"\\n            ethSendTransaction.transactionHash\\n        }\\n    }\\n    // IMP END - Blockchain Calls\\n}","Web3Auth/web3auth-pnp-examples/main/android/android-quick-start/app/src/main/AndroidManifest.xml":"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\">\\n    \x3c!-- // IMP START - Enable Internet Usage --\x3e\\n    <uses-permission android:name=\\"android.permission.INTERNET\\" />\\n    \x3c!-- // IMP END - Enable Internet Usage --\x3e\\n\\n    <application\\n        android:allowBackup=\\"true\\"\\n        android:dataExtractionRules=\\"@xml/data_extraction_rules\\"\\n        android:fullBackupContent=\\"@xml/backup_rules\\"\\n        android:icon=\\"@mipmap/ic_launcher\\"\\n        android:label=\\"@string/app_name\\"\\n        android:roundIcon=\\"@mipmap/ic_launcher_round\\"\\n        android:supportsRtl=\\"true\\"\\n        android:theme=\\"@style/Theme.Web3AuthDemoApp\\"\\n        tools:targetApi=\\"31\\">\\n        \x3c!-- // IMP START - Enable Single Top --\x3e\\n        <activity\\n            android:launchMode=\\"singleTop\\"\\n            android:name=\\".MainActivity\\"\\n            android:exported=\\"true\\">\\n            \x3c!-- // IMP END - Enable Single Top --\x3e\\n            <intent-filter>\\n                <action android:name=\\"android.intent.action.MAIN\\" />\\n\\n                <category android:name=\\"android.intent.category.LAUNCHER\\" />\\n            </intent-filter>\\n\\n            <intent-filter>\\n                <action android:name=\\"android.intent.action.VIEW\\" />\\n\\n                <category android:name=\\"android.intent.category.DEFAULT\\" />\\n                <category android:name=\\"android.intent.category.BROWSABLE\\" />\\n\\n                \x3c!-- // IMP START - Configure Deep Link --\x3e\\n                \x3c!-- Accept URIs: {YOUR_APP_PACKAGE_NAME}://* --\x3e\\n                <data android:scheme=\\"com.sbz.web3authdemoapp\\" />\\n                \x3c!-- // IMP END - Configure Deep Link --\x3e\\n            </intent-filter>\\n        </activity>\\n    </application>\\n\\n</manifest>\\n","Web3Auth/web3auth-pnp-examples/main/android/android-quick-start/app/build.gradle":"plugins {\\n    id \'com.android.application\'\\n    id \'org.jetbrains.kotlin.android\'\\n}\\n\\nandroid {\\n    // IMP START - Requirements\\n    compileSdk 34\\n    // IMP END - Requirements\\n\\n    defaultConfig {\\n        applicationId \\"com.sbz.web3authdemoapp\\"\\n        // IMP START - Requirements\\n        minSdk 24\\n        targetSdk 34\\n        // IMP END - Requirements\\n        versionCode 1\\n        versionName \\"1.0\\"\\n\\n        testInstrumentationRunner \\"androidx.test.runner.AndroidJUnitRunner\\"\\n    }\\n\\n    buildTypes {\\n        release {\\n            minifyEnabled false\\n            proguardFiles getDefaultProguardFile(\'proguard-android-optimize.txt\'), \'proguard-rules.pro\'\\n        }\\n    }\\n    compileOptions {\\n        sourceCompatibility JavaVersion.VERSION_1_8\\n        targetCompatibility JavaVersion.VERSION_1_8\\n    }\\n    kotlinOptions {\\n        jvmTarget = \'1.8\'\\n    }\\n    namespace \'com.sbz.web3authdemoapp\'\\n}\\n\\ndependencies {\\n\\n    implementation \'androidx.core:core-ktx:1.9.0\'\\n    implementation \'androidx.appcompat:appcompat:1.5.1\'\\n    implementation \'com.google.android.material:material:1.7.0\'\\n    implementation \'androidx.constraintlayout:constraintlayout:2.1.4\'\\n    implementation \'com.google.code.gson:gson:2.9.1\'\\n    // IMP START - Installation\\n    implementation \'com.github.Web3Auth:web3auth-android-sdk:5.3.1\'\\n    // IMP END - Installation\\n    implementation \'org.web3j:core:4.8.7-android\'\\n    testImplementation \'junit:junit:4.13.2\'\\n    androidTestImplementation \'androidx.test.ext:junit:1.1.4\'\\n    androidTestImplementation \'androidx.test.espresso:espresso-core:3.5.0\'\\n}","Web3Auth/web3auth-pnp-examples/main/android/android-quick-start/settings.gradle":"pluginManagement {\\n    repositories {\\n        gradlePluginPortal()\\n        google()\\n        mavenCentral()\\n    }\\n}\\ndependencyResolutionManagement {\\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\\n    repositories {\\n        google()\\n        mavenCentral()\\n        // IMP START - Add JitPack URL\\n        maven { url \\"https://jitpack.io\\" }\\n        // IMP END - Add JitPack URL\\n    }\\n}\\nrootProject.name = \\"Web3Auth Demo App\\"\\ninclude \':app\'\\n","Web3Auth/web3auth-pnp-examples/main/android/android-quick-start/app/src/main/res/values/strings.xml":"<resources>\\n    <string name=\\"app_name\\">Web3Auth Android QuickStart App</string>\\n    \x3c!-- // IMP START - Get your Web3Auth Client ID from Dashboard --\x3e\\n    <string name=\\"web3auth_project_id\\">BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ</string>\\n    \x3c!-- // IMP END - Get your Web3Auth Client ID from Dashboard --\x3e\\n    <string name=\\"web3auth_android_demo\\">Web3Auth Android Example Demo</string>\\n    <string name=\\"login_with_google\\">Login</string>\\n    <string name=\\"logout\\">Logout</string>\\n    <string name=\\"not_logged_in\\">Log in to see Web3Auth Data</string>\\n    <string name=\\"address\\">Address</string>\\n    <string name=\\"balance\\">Balance</string>\\n    <string name=\\"sign_message\\">Sign Message</string>\\n    <string name=\\"send_transaction\\">Send Transaction</string>\\n    <string name=\\"home\\">Home</string>\\n    <string name=\\"email_hint\\">name@email.com</string>\\n</resources>","Web3Auth/web3auth-pnp-examples/main/android/android-quick-start/app/src/main/res/layout/activity_main.xml":"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<androidx.constraintlayout.widget.ConstraintLayout\\n    xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    tools:context=\\".MainActivity\\">\\n\\n    <Button\\n        android:id=\\"@+id/signInButton\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:layout_marginStart=\\"16dp\\"\\n        android:layout_marginEnd=\\"16dp\\"\\n        android:text=\\"@string/login_with_google\\"\\n        app:layout_constraintBottom_toTopOf=\\"@+id/contentTextView\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintStart_toStartOf=\\"parent\\"\\n        app:layout_constraintTop_toBottomOf=\\"@+id/emailInput\\" />\\n\\n    <TextView\\n        android:id=\\"@+id/contentTextView\\"\\n        android:layout_width=\\"379dp\\"\\n        android:layout_height=\\"375dp\\"\\n        android:layout_marginEnd=\\"16dp\\"\\n        android:layout_marginBottom=\\"16dp\\"\\n        app:layout_constraintBottom_toTopOf=\\"@+id/signOutButton\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintTop_toBottomOf=\\"@+id/signInButton\\" />\\n\\n    <Button\\n        android:id=\\"@+id/signOutButton\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:layout_marginStart=\\"16dp\\"\\n        android:layout_marginTop=\\"16dp\\"\\n        android:layout_marginEnd=\\"16dp\\"\\n        android:text=\\"@string/logout\\"\\n        app:layout_constraintBottom_toTopOf=\\"@+id/buttonContainer\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintStart_toStartOf=\\"parent\\"\\n        app:layout_constraintTop_toBottomOf=\\"@+id/contentTextView\\" />\\n\\n    <LinearLayout\\n        android:id=\\"@+id/buttonContainer\\"\\n        android:layout_width=\\"0dp\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:orientation=\\"horizontal\\"\\n        app:layout_constraintTop_toBottomOf=\\"@+id/signOutButton\\"\\n        app:layout_constraintStart_toStartOf=\\"parent\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintBottom_toBottomOf=\\"parent\\"\\n        android:layout_marginTop=\\"16dp\\"\\n        android:layout_marginStart=\\"16dp\\"\\n        android:layout_marginEnd=\\"16dp\\"\\n        android:layout_marginBottom=\\"16dp\\">\\n\\n        <LinearLayout\\n            android:layout_width=\\"0dp\\"\\n            android:layout_height=\\"wrap_content\\"\\n            android:orientation=\\"vertical\\"\\n            android:layout_weight=\\"1\\">\\n\\n            <Button\\n                android:id=\\"@+id/getAddress\\"\\n                android:layout_width=\\"match_parent\\"\\n                android:layout_height=\\"wrap_content\\"\\n                android:text=\\"@string/address\\"\\n                android:layout_marginBottom=\\"8dp\\"/>\\n\\n            <Button\\n                android:id=\\"@+id/getMessage\\"\\n                android:layout_width=\\"match_parent\\"\\n                android:layout_height=\\"wrap_content\\"\\n                android:text=\\"@string/sign_message\\"/>\\n        </LinearLayout>\\n\\n        <LinearLayout\\n            android:layout_width=\\"0dp\\"\\n            android:layout_height=\\"wrap_content\\"\\n            android:orientation=\\"vertical\\"\\n            android:layout_weight=\\"1\\">\\n\\n            <Button\\n                android:id=\\"@+id/getBalance\\"\\n                android:layout_width=\\"match_parent\\"\\n                android:layout_height=\\"wrap_content\\"\\n                android:text=\\"@string/balance\\"\\n                android:layout_marginBottom=\\"8dp\\"/>\\n\\n            <Button\\n                android:id=\\"@+id/getTransaction\\"\\n                android:layout_width=\\"match_parent\\"\\n                android:layout_height=\\"wrap_content\\"\\n                android:text=\\"@string/send_transaction\\"/>\\n        </LinearLayout>\\n    </LinearLayout>\\n\\n    <EditText\\n        android:id=\\"@+id/emailInput\\"\\n        android:layout_width=\\"0dp\\"\\n        android:layout_height=\\"48dp\\"\\n        android:layout_marginLeft=\\"16dp\\"\\n        android:layout_marginTop=\\"32dp\\"\\n        android:layout_marginRight=\\"16dp\\"\\n        android:autofillHints=\\"emailAddress\\"\\n        android:ems=\\"10\\"\\n        android:hint=\\"@string/email_hint\\"\\n        android:inputType=\\"textEmailAddress\\"\\n        app:layout_constraintBottom_toTopOf=\\"@+id/signInButton\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintHorizontal_bias=\\"0.497\\"\\n        app:layout_constraintStart_toStartOf=\\"parent\\"\\n        app:layout_constraintTop_toTopOf=\\"parent\\"\\n        app:layout_constraintVertical_bias=\\"0.867\\" />\\n\\n</androidx.constraintlayout.widget.ConstraintLayout>","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-react-quick-start/src/App.tsx":"import { useEffect, useState } from \\"react\\";\\n// IMP START - Quick Start\\nimport { Web3Auth } from \\"@web3auth/single-factor-auth\\";\\nimport { ADAPTER_EVENTS, CHAIN_NAMESPACES, IProvider } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { GoogleAuthProvider, getAuth, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\n\\nimport \\"./App.css\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId =\\n  \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \\"w3a-firebase-demo\\";\\n// IMP END - Verifier Creation\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3Auth({\\n  clientId, // Get your Client ID from Web3Auth Dashboard\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n\\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\\n  config: { chainConfig },\\n});\\n// IMP END - SDK Initialization\\n\\n// IMP START - Auth Provider Login\\n// Your web app\'s Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n  authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n  projectId: \\"web3auth-oauth-logins\\",\\n  storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n  messagingSenderId: \\"461819774167\\",\\n  appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n};\\n// IMP END - Auth Provider Login\\n\\nfunction App() {\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [loggedIn, setLoggedIn] = useState(false);\\n\\n  // Firebase Initialisation\\n  const app = initializeApp(firebaseConfig);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.init(privateKeyProvider);\\n        // IMP END - SDK Initialization\\n        setProvider(web3auth.provider);\\n\\n        if (web3auth.status === ADAPTER_EVENTS.CONNECTED) {\\n          setLoggedIn(true);\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }, []);\\n\\n  // IMP START - Auth Provider Login\\n  const signInWithGoogle = async (): Promise<UserCredential> => {\\n    try {\\n      const auth = getAuth(app);\\n      const googleProvider = new GoogleAuthProvider();\\n      const res = await signInWithPopup(auth, googleProvider);\\n      console.log(res);\\n      return res;\\n    } catch (err) {\\n      console.error(err);\\n      throw err;\\n    }\\n  };\\n\\n  const parseToken = (token: string) => {\\n    try {\\n      const base64Url = token.split(\\".\\")[1];\\n      const base64 = base64Url.replace(\\"-\\", \\"+\\").replace(\\"_\\", \\"/\\");\\n      return JSON.parse(window.atob(base64 || \\"\\"));\\n    } catch (err) {\\n      console.error(err);\\n      return null;\\n    }\\n  };\\n  // IMP END - Auth Provider Login\\n\\n  const login = async () => {\\n    if (!web3auth.ready) {\\n      uiConsole(\\"web3auth initialised yet\\");\\n      return;\\n    }\\n    // IMP START - Auth Provider Login\\n    // login with firebase\\n    const loginRes = await signInWithGoogle();\\n    // get the id token from firebase\\n    const idToken = await loginRes.user.getIdToken(true);\\n    const userInfo = parseToken(idToken);\\n    // IMP END - Auth Provider Login\\n\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connect({\\n      verifier,\\n      verifierId: userInfo.sub,\\n      idToken,\\n    });\\n    // IMP END - Login\\n\\n    if (web3authProvider) {\\n      setLoggedIn(true);\\n      setProvider(web3authProvider);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    setProvider(null);\\n    setLoggedIn(false);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n    console.log(...args);\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <button onClick={login} className=\\"card\\">\\n      Login\\n    </button>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/sfa-web\\" rel=\\"noreferrer\\">\\n          Web3Auth Single Factor Auth\\n        </a>{\\" \\"}\\n        & ReactJS (Webpack) Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{loggedIn ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/single-factor-auth-web/quick-starts/sfa-react-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-react-quick-start/package.json":"{\\n  \\"name\\": \\"sfa-react-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@types/node\\": \\"^18.11.18\\",\\n    \\"@types/react\\": \\"^18.0.26\\",\\n    \\"@types/react-dom\\": \\"^18.0.10\\",\\n    \\"@web3auth/base\\": \\"^7.2.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.2.1\\",\\n    \\"@web3auth/single-factor-auth\\": \\"^7.2.2\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"react\\": \\"^18.2.0\\",\\n    \\"react-dom\\": \\"^18.2.0\\",\\n    \\"react-scripts\\": \\"5.0.1\\",\\n    \\"typescript\\": \\"^4.9.4\\",\\n    \\"web-vitals\\": \\"^3.1.0\\",\\n    \\"web3\\": \\"^4.1.2\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"eslintConfig\\": {\\n    \\"extends\\": [\\n      \\"react-app\\",\\n      \\"react-app/jest\\"\\n    ]\\n  },\\n  \\"browserslist\\": {\\n    \\"production\\": [\\n      \\"chrome >= 67\\",\\n      \\"edge >= 79\\",\\n      \\"firefox >= 68\\",\\n      \\"opera >= 54\\",\\n      \\"safari >= 14\\"\\n    ],\\n    \\"development\\": [\\n      \\"last 1 chrome version\\",\\n      \\"last 1 firefox version\\",\\n      \\"last 1 safari version\\"\\n    ]\\n  },\\n  \\"devDependencies\\": {\\n    \\"buffer\\": \\"^6.0.3\\",\\n    \\"eslint-config-react-app\\": \\"^7.0.1\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"react-app-rewired\\": \\"^2.2.1\\",\\n    \\"source-map-loader\\": \\"^4.0.1\\"\\n  },\\n  \\"scripts\\": {\\n    \\"start\\": \\"react-app-rewired start\\",\\n    \\"build\\": \\"react-app-rewired build\\",\\n    \\"test\\": \\"react-app-rewired test\\",\\n    \\"eject\\": \\"react-scripts eject\\",\\n    \\"lint\\": \\"react-scripts lint\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-react-quick-start/config-overrides.js":"const webpack = require(\\"webpack\\");\\n\\nmodule.exports = function override(config) {\\n  const fallback = config.resolve.fallback || {};\\n  // IMP START - Bundler Issues\\n  Object.assign(fallback, {\\n    crypto: false,\\n    stream: false,\\n    assert: false,\\n    http: false,\\n    https: false,\\n    os: false,\\n    url: false,\\n    zlib: false\\n  });\\n  config.resolve.fallback = fallback;\\n  config.plugins = (config.plugins || []).concat([\\n    new webpack.ProvidePlugin({\\n      process: \\"process/browser\\",\\n      Buffer: [\\"buffer\\", \\"Buffer\\"],\\n    }),\\n  ]);\\n  // IMP END - Bundler Issues\\n  config.ignoreWarnings = [/Failed to parse source map/];\\n  config.module.rules.push({\\n    test: /\\\\.(js|mjs|jsx)$/,\\n    enforce: \\"pre\\",\\n    loader: require.resolve(\\"source-map-loader\\"),\\n    resolve: {\\n      fullySpecified: false,\\n    },\\n  });\\n  return config;\\n};\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-nextjs-quick-start/app/page.tsx":"/* eslint-disable @typescript-eslint/no-use-before-define */\\n\\n\\"use client\\";\\n\\nimport { useEffect, useState } from \\"react\\";\\n// IMP START - Quick Start\\nimport { Web3Auth } from \\"@web3auth/single-factor-auth\\";\\nimport { ADAPTER_EVENTS, CHAIN_NAMESPACES, IProvider } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\n// IMP END - Quick Start\\n// IMP START - Auth Provider Login\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { getAuth, GoogleAuthProvider, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\n// IMP END - Auth Provider Login\\nimport Web3 from \\"web3\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \\"w3a-firebase-demo\\";\\n// IMP END - Verifier Creation\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3Auth({\\n  clientId, // Get your Client ID from Web3Auth Dashboard\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n\\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\\n  config: { chainConfig },\\n});\\n// IMP END - SDK Initialization\\n\\n// IMP START - Auth Provider Login\\n// Your web app\'s Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n  authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n  projectId: \\"web3auth-oauth-logins\\",\\n  storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n  messagingSenderId: \\"461819774167\\",\\n  appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n};\\n// IMP END - Auth Provider Login\\n\\nfunction App() {\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [loggedIn, setLoggedIn] = useState(false);\\n\\n  // Firebase Initialisation\\n  const app = initializeApp(firebaseConfig);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.init(privateKeyProvider);\\n        // IMP END - SDK Initialization\\n        setProvider(web3auth.provider);\\n\\n        if (web3auth.status === ADAPTER_EVENTS.CONNECTED) {\\n          setLoggedIn(true);\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }, []);\\n\\n  // IMP START - Auth Provider Login\\n  const signInWithGoogle = async (): Promise<UserCredential> => {\\n    try {\\n      const auth = getAuth(app);\\n      const googleProvider = new GoogleAuthProvider();\\n      const res = await signInWithPopup(auth, googleProvider);\\n      console.log(res);\\n      return res;\\n    } catch (err) {\\n      console.error(err);\\n      throw err;\\n    }\\n  };\\n\\n  const parseToken = (token: string) => {\\n    try {\\n      const base64Url = token.split(\\".\\")[1];\\n      const base64 = base64Url.replace(\\"-\\", \\"+\\").replace(\\"_\\", \\"/\\");\\n      return JSON.parse(window.atob(base64 || \\"\\"));\\n    } catch (err) {\\n      console.error(err);\\n      return null;\\n    }\\n  };\\n  // IMP END - Auth Provider Login\\n\\n  const login = async () => {\\n    if (!web3auth.ready) {\\n      uiConsole(\\"web3auth initialised yet\\");\\n      return;\\n    }\\n    // IMP START - Auth Provider Login\\n    // login with firebase\\n    const loginRes = await signInWithGoogle();\\n    // get the id token from firebase\\n    const idToken = await loginRes.user.getIdToken(true);\\n    const userInfo = parseToken(idToken);\\n    // IMP END - Auth Provider Login\\n\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connect({\\n      verifier,\\n      verifierId: userInfo.sub,\\n      idToken,\\n    });\\n    // IMP END - Login\\n\\n    if (web3authProvider) {\\n      setLoggedIn(true);\\n      setProvider(web3authProvider);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    setProvider(null);\\n    setLoggedIn(false);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!provider) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n    console.log(...args);\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <button onClick={login} className=\\"card\\">\\n      Login\\n    </button>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/sfa-web\\" rel=\\"noreferrer\\">\\n          Web3Auth Single Factor Auth\\n        </a>{\\" \\"}\\n        & NextJS Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{loggedIn ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/single-factor-auth-web/quick-starts/sfa-nextjs-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-nextjs-quick-start/package.json":"{\\n  \\"name\\": \\"sfa-nextjs-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"dev\\": \\"next dev\\",\\n    \\"build\\": \\"next build\\",\\n    \\"start\\": \\"next start\\",\\n    \\"lint\\": \\"next lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.2.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.2.1\\",\\n    \\"@web3auth/single-factor-auth\\": \\"^7.2.2\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"next\\": \\"13.4.9\\",\\n    \\"react\\": \\"18.2.0\\",\\n    \\"react-dom\\": \\"18.2.0\\",\\n    \\"web3\\": \\"^4.1.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@types/elliptic\\": \\"^6.4.14\\",\\n    \\"@types/node\\": \\"20.4.1\\",\\n    \\"@types/react\\": \\"18.2.14\\",\\n    \\"@types/react-dom\\": \\"18.2.7\\",\\n    \\"eslint\\": \\"8.44.0\\",\\n    \\"eslint-config-next\\": \\"13.4.9\\",\\n    \\"typescript\\": \\"5.1.6\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-angular-quick-start/src/app/app.component.ts":"import { Component } from \\"@angular/core\\";\\n// IMP START - Quick Start\\nimport { Web3Auth } from \\"@web3auth/single-factor-auth\\";\\nimport { CHAIN_NAMESPACES, IProvider, ADAPTER_EVENTS } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { GoogleAuthProvider, getAuth, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst clientId = \\"BEglQSgt4cUWcj6SKRdu5QkOXTsePmMcusG5EAoyjyOYKlVRjIF1iCNnMOTfpzCiunHRrMui8TIwQPXdkQ8Yxuk\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \\"w3a-firebase-demo\\";\\n// IMP END - Verifier Creation\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst web3auth = new Web3Auth({\\n  clientId, // Get your Client ID from Web3Auth Dashboard\\n  web3AuthNetwork: \\"sapphire_mainnet\\",\\n});\\n\\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\\n  config: { chainConfig },\\n});\\n// IMP END - SDK Initialization\\n\\n// IMP START - Auth Provider Login\\n// Your web app\'s Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n  authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n  projectId: \\"web3auth-oauth-logins\\",\\n  storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n  messagingSenderId: \\"461819774167\\",\\n  appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n};\\n// IMP END - Auth Provider Login\\n\\n@Component({\\n  selector: \\"app-root\\",\\n  templateUrl: \\"./app.component.html\\",\\n  styleUrls: [\\"./app.component.css\\"],\\n})\\n\\nexport class AppComponent {\\n  title = \\"angular-app\\";\\n\\n  provider: IProvider | null = null;\\n\\n  isModalLoaded = false;\\n\\n  loggedIn = false;\\n\\n  app = initializeApp(firebaseConfig);\\n\\n  async ngOnInit() {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.init(privateKeyProvider);\\n        // IMP END - SDK Initialization\\n        this.provider = web3auth.provider;\\n\\n        if (web3auth.status === ADAPTER_EVENTS.CONNECTED) {\\n          this.loggedIn = true;\\n        }\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }\\n\\n  // IMP START - Auth Provider Login\\n  signInWithGoogle = async (): Promise<UserCredential> => {\\n    try {\\n      const auth = getAuth(this.app);\\n      const googleProvider = new GoogleAuthProvider();\\n      const res = await signInWithPopup(auth, googleProvider);\\n      console.log(res);\\n      return res;\\n    } catch (err) {\\n      console.error(err);\\n      throw err;\\n    }\\n  };\\n\\n  parseToken = (token: string) => {\\n    try {\\n      const base64Url = token.split(\\".\\")[1];\\n      const base64 = base64Url.replace(\\"-\\", \\"+\\").replace(\\"_\\", \\"/\\");\\n      return JSON.parse(window.atob(base64 || \\"\\"));\\n    } catch (err) {\\n      console.error(err);\\n      return null;\\n    }\\n  };\\n  // IMP END - Auth Provider Login\\n\\n  login = async () => {\\n    if (!web3auth.ready) {\\n      this.uiConsole(\\"web3auth initialised yet\\");\\n      return;\\n    }\\n    // IMP START - Auth Provider Login\\n    // login with firebase\\n    const loginRes = await this.signInWithGoogle();\\n    // get the id token from firebase\\n    const idToken = await loginRes.user.getIdToken(true);\\n    const userInfo = this.parseToken(idToken);\\n    // IMP END - Auth Provider Login\\n\\n    // IMP START - Login\\n    const web3authProvider = await web3auth.connect({\\n      verifier,\\n      verifierId: userInfo.sub,\\n      idToken,\\n    });\\n    // IMP END - Login\\n\\n    if (web3authProvider) {\\n      this.loggedIn = true;\\n      this.provider = web3authProvider;\\n    }\\n  };\\n\\n  getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    this.uiConsole(user);\\n  };\\n\\n  logout = async () => {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    this.provider = null;\\n    this.loggedIn = false;\\n    this.uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  getAccounts = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    this.uiConsole(address);\\n  };\\n\\n  getBalance = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    this.uiConsole(balance);\\n  };\\n\\n  signMessage = async () => {\\n    if (!this.provider) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(this.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    this.uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  uiConsole(...args: any[]) {\\n    const el = document.querySelector(\\"#console-ui>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n  }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-angular-quick-start/src/app/app.component.html":"<div class=\\"content\\">\\n  <h1 class=\\"title\\">\\n    <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/sfa-web\\">Web3Auth</a> & AngularJS\\n    Example\\n  </h1>\\n  <div class=\\"setting\\">\\n    <div\\n      *ngIf=\\"loggedIn; else elseBlock\\"\\n      class=\\"card-container\\"\\n    >\\n      <button class=\\"card card-small\\" (click)=\\"getUserInfo()\\">\\n        Get User Info\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getAccounts()\\">\\n        Get Accounts\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getBalance()\\">\\n        Get Balance\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"signMessage()\\">\\n        Sign Message\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"logout()\\">Log Out</button>\\n    </div>\\n    <ng-template #elseBlock>\\n      <div class=\\"card-container\\">\\n        <button class=\\"card card-small\\" (click)=\\"login()\\">Login</button>\\n      </div>\\n    </ng-template>\\n    <div class=\\"console\\" id=\\"console-ui\\">\\n      <p class=\\"code\\">Logged In</p>\\n    </div>\\n  </div>\\n  <footer class=\\"footer\\">\\n    <a\\n      href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/single-factor-auth-web/quick-starts/sfa-angular-quick-start/\\"\\n      target=\\"_blank\\"\\n      rel=\\"noopener noreferrer\\"\\n    >\\n      Source code\\n    </a>\\n  </footer>\\n</div>\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-angular-quick-start/src/polyfills.ts":"/* eslint-disable @typescript-eslint/no-var-requires */\\nimport \\"zone.js\\"; // Included with Angular CLI.\\n\\n// IMP START - Bundler Issues\\n(window as any).global = window;\\nglobal.Buffer = global.Buffer || require(\\"buffer\\").Buffer;\\nglobal.process = global.process || require(\\"process\\");\\n// IMP END - Bundler Issues\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-angular-quick-start/package.json":"{\\n  \\"name\\": \\"sfa-angular-quick-start\\",\\n  \\"version\\": \\"0.0.0\\",\\n  \\"scripts\\": {\\n    \\"ng\\": \\"ng\\",\\n    \\"start\\": \\"ng serve\\",\\n    \\"build\\": \\"ng build\\",\\n    \\"watch\\": \\"ng build --watch --configuration development\\",\\n    \\"test\\": \\"ng test\\",\\n    \\"lint\\": \\"ng line\\"\\n  },\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@angular/animations\\": \\"~14.2.7\\",\\n    \\"@angular/common\\": \\"~14.2.7\\",\\n    \\"@angular/compiler\\": \\"~14.2.7\\",\\n    \\"@angular/core\\": \\"~14.2.7\\",\\n    \\"@angular/forms\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser-dynamic\\": \\"~14.2.7\\",\\n    \\"@angular/router\\": \\"~14.2.7\\",\\n    \\"@web3auth/base\\": \\"^7.2.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.2.1\\",\\n    \\"@web3auth/single-factor-auth\\": \\"^7.2.2\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"empty-module\\": \\"^0.0.2\\",\\n    \\"web3\\": \\"^4.1.2\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@angular-devkit/build-angular\\": \\"~14.2.6\\",\\n    \\"@angular/cli\\": \\"~14.2.6\\",\\n    \\"@angular/compiler-cli\\": \\"~14.2.7\\",\\n    \\"@types/jasmine\\": \\"~4.3.0\\",\\n    \\"@types/keccak\\": \\"^3.0.1\\",\\n    \\"@types/node\\": \\"^18.11.2\\",\\n    \\"@types/readable-stream\\": \\"^2.3.14\\",\\n    \\"jasmine-core\\": \\"~4.4.0\\",\\n    \\"karma\\": \\"~6.4.1\\",\\n    \\"karma-chrome-launcher\\": \\"~3.1.1\\",\\n    \\"karma-coverage\\": \\"~2.2.0\\",\\n    \\"karma-jasmine\\": \\"~5.1.0\\",\\n    \\"karma-jasmine-html-reporter\\": \\"~2.0.0\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"typescript\\": \\"~4.8.0\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-angular-quick-start/tsconfig.json":"/* To learn more about this file see: https://angular.io/config/tsconfig. */\\n{\\n  \\"compileOnSave\\": false,\\n  \\"compilerOptions\\": {\\n    \\"baseUrl\\": \\"./\\",\\n    \\"outDir\\": \\"./dist/out-tsc\\",\\n    \\"forceConsistentCasingInFileNames\\": true,\\n    \\"strict\\": true,\\n    \\"noImplicitOverride\\": true,\\n    \\"noPropertyAccessFromIndexSignature\\": true,\\n    \\"noImplicitReturns\\": true,\\n    \\"noFallthroughCasesInSwitch\\": true,\\n    \\"sourceMap\\": true,\\n    \\"declaration\\": false,\\n    \\"downlevelIteration\\": true,\\n    \\"experimentalDecorators\\": true,\\n    \\"moduleResolution\\": \\"node\\",\\n    \\"importHelpers\\": true,\\n    \\"skipLibCheck\\": true,\\n    \\"target\\": \\"es2020\\",\\n    \\"module\\": \\"es2020\\",\\n    \\"lib\\": [\\n      \\"es2020\\",\\n      \\"dom\\"\\n    ],\\n    \\"paths\\":{\\n      \\"crypto\\": [\\"./node_modules/empty-module\\"],\\n      \\"stream\\": [\\"./node_modules/empty-module\\"],\\n      \\"assert\\": [\\"./node_modules/empty-module\\"],\\n      \\"http\\": [\\"./node_modules/empty-module\\"],\\n      \\"https\\": [\\"./node_modules/empty-module\\"],\\n      \\"os\\": [\\"./node_modules/empty-module\\"],\\n      \\"zlib\\": [\\"./node_modules/empty-module\\"],\\n      \\"url\\": [\\"./node_modules/empty-module\\"],\\n      \\"process\\": [\\"./node_modules/process\\"]\\n    }\\n  },\\n  \\"angularCompilerOptions\\": {\\n    \\"enableI18nLegacyMessageIdFormat\\": false,\\n    \\"strictInjectionParameters\\": true,\\n    \\"strictInputAccessModifiers\\": true,\\n    \\"strictTemplates\\": true\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-vue-quick-start/vue.config.js":"const { defineConfig } = require(\\"@vue/cli-service\\");\\nconst { ProvidePlugin } = require(\\"webpack\\");\\nconst { BundleAnalyzerPlugin } = require(\\"webpack-bundle-analyzer\\");\\n\\nmodule.exports = defineConfig({\\n  transpileDependencies: true,\\n  lintOnSave: false,\\n  // IMP START - Bundler Issues\\n  configureWebpack: (config) => {\\n    config.devtool = \\"source-map\\";\\n    config.resolve.symlinks = false;\\n    config.resolve.fallback = {\\n      crypto: false,\\n      stream: false,\\n      assert: false,\\n      os: false,\\n      https: false,\\n      http: false,\\n      url: false,\\n      zlib: false,\\n    };\\n    config.plugins.push(new ProvidePlugin({ Buffer: [\\"buffer\\", \\"Buffer\\"] }));\\n    config.plugins.push(new ProvidePlugin({ process: [\\"process/browser\\"] }));\\n    // IMP END - Bundler Issues\\n    config.plugins.push(\\n      new BundleAnalyzerPlugin({\\n        analyzerMode: \\"disabled\\",\\n      })\\n    );\\n  },\\n});\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-vue-quick-start/package.json":"{\\n  \\"name\\": \\"sfa-vue-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"serve\\": \\"vue-cli-service serve\\",\\n    \\"build\\": \\"vue-cli-service build\\",\\n    \\"lint\\": \\"vue-cli-service lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.2.1\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.2.1\\",\\n    \\"@web3auth/single-factor-auth\\": \\"^7.2.2\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"core-js\\": \\"^3.26.1\\",\\n    \\"vue\\": \\"^3.3.4\\",\\n    \\"web3\\": \\"^4.2.2\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@typescript-eslint/eslint-plugin\\": \\"^5.46.1\\",\\n    \\"@typescript-eslint/parser\\": \\"^5.46.1\\",\\n    \\"@vue/cli-plugin-babel\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-eslint\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-typescript\\": \\"~5.0.8\\",\\n    \\"@vue/cli-service\\": \\"~5.0.8\\",\\n    \\"@vue/eslint-config-typescript\\": \\"^11.0.2\\",\\n    \\"eslint\\": \\"^8.29.0\\",\\n    \\"eslint-plugin-vue\\": \\"^9.8.0\\",\\n    \\"typescript\\": \\"~4.9.4\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-vue-quick-start/src/Home.vue":"\x3c!-- eslint-disable vue/no-ref-as-operand --\x3e\\n<template>\\n  <div id=\\"app\\">\\n    <h2>\\n      <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/sfa-web\\" rel=\\"noreferrer\\">\\n        Web3Auth Single Factor Auth\\n      </a>\\n      & Vue.js Quick Start\\n    </h2>\\n\\n    <button v-if=\\"!loggedIn\\" class=\\"card\\" @click=\\"login\\" style=\\"cursor: pointer\\">\\n      Login\\n    </button>\\n\\n    <div v-if=\\"loggedIn\\">\\n      <div class=\\"flex-container\\">\\n        <div>\\n          <button class=\\"card\\" @click=\\"getUserInfo\\" style=\\"cursor: pointer\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getAccounts\\" style=\\"cursor: pointer\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getBalance\\" style=\\"cursor: pointer\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"signMessage\\" style=\\"cursor: pointer\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"logout\\" style=\\"cursor: pointer\\">\\n            Logout\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\"console\\" style=\\"white-space: pre-line\\">\\n      <p style=\\"white-space: pre-line\\"></p>\\n    </div>\\n\\n    <footer class=\\"footer\\">\\n      <a href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/single-factor-auth-web/quick-starts/sfa-vue-quick-start\\"\\n        target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n        Source code\\n      </a>\\n    </footer>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\nimport { ref, onMounted } from \\"vue\\";\\n// IMP START - Quick Start\\nimport { Web3Auth } from \\"@web3auth/single-factor-auth\\";\\nimport { CHAIN_NAMESPACES, IProvider, ADAPTER_EVENTS } from \\"@web3auth/base\\";\\nimport { EthereumPrivateKeyProvider } from \\"@web3auth/ethereum-provider\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { GoogleAuthProvider, getAuth, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\n\\nexport default {\\n  // eslint-disable-next-line vue/multi-word-component-names\\n  name: \\"Home\\",\\n  props: {\\n    msg: String,\\n  },\\n  setup() {\\n    const loggedIn = ref<boolean>(false);\\n    let provider = <IProvider | null>(null);\\n\\n    // IMP START - SDK Initialization\\n    // IMP START - Dashboard Registration\\n    const clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n    // IMP END - Dashboard Registration\\n\\n    // IMP START - Verifier Creation\\n    const verifier = \\"w3a-firebase-demo\\";\\n    // IMP END - Verifier Creation\\n\\n    const chainConfig = {\\n      chainNamespace: CHAIN_NAMESPACES.EIP155,\\n      chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n      rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n      displayName: \\"Ethereum Mainnet\\",\\n      blockExplorer: \\"https://etherscan.io/\\",\\n      ticker: \\"ETH\\",\\n      tickerName: \\"Ethereum\\",\\n    };\\n\\n    const web3auth = new Web3Auth({\\n      clientId, // Get your Client ID from Web3Auth Dashboard\\n      web3AuthNetwork: \\"sapphire_mainnet\\",\\n    });\\n\\n    const privateKeyProvider = new EthereumPrivateKeyProvider({\\n      config: { chainConfig },\\n    });\\n    // IMP END - SDK Initialization\\n\\n    // IMP START - Auth Provider Login\\n    // Your web app\'s Firebase configuration\\n    const firebaseConfig = {\\n      apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n      authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n      projectId: \\"web3auth-oauth-logins\\",\\n      storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n      messagingSenderId: \\"461819774167\\",\\n      appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n    };\\n\\n    // Firebase Initialisation\\n    const app = initializeApp(firebaseConfig);\\n    // IMP END - Auth Provider Login\\n\\n\\n    onMounted(async () => {\\n      const init = async () => {\\n        try {\\n          // IMP START - SDK Initialization\\n          await web3auth.init(privateKeyProvider);\\n          // IMP END - SDK Initialization\\n          provider = web3auth.provider;\\n          if (web3auth.status === ADAPTER_EVENTS.CONNECTED) {\\n            loggedIn.value = true;\\n          }\\n        } catch (error) {\\n          console.error(error);\\n        }\\n      };\\n\\n      init();\\n    });\\n\\n    // IMP START - Auth Provider Login\\n    const signInWithGoogle = async (): Promise<UserCredential> => {\\n      try {\\n        const auth = getAuth(app);\\n        const googleProvider = new GoogleAuthProvider();\\n        const res = await signInWithPopup(auth, googleProvider);\\n        console.log(res);\\n        return res;\\n      } catch (err) {\\n        console.error(err);\\n        throw err;\\n      }\\n    };\\n\\n    const parseToken = (token: string) => {\\n      try {\\n        const base64Url = token.split(\\".\\")[1];\\n        const base64 = base64Url.replace(\\"-\\", \\"+\\").replace(\\"_\\", \\"/\\");\\n        return JSON.parse(window.atob(base64 || \\"\\"));\\n      } catch (err) {\\n        console.error(err);\\n        return null;\\n      }\\n    };\\n    // IMP END - Auth Provider Login\\n\\n    const login = async () => {\\n      if (!web3auth.ready) {\\n        uiConsole(\\"web3auth initialised yet\\");\\n        return;\\n      }\\n      // IMP START - Auth Provider Login\\n      // login with firebase\\n      const loginRes = await signInWithGoogle();\\n      // get the id token from firebase\\n      const idToken = await loginRes.user.getIdToken(true);\\n      const userInfo = parseToken(idToken);\\n      // IMP END - Auth Provider Login\\n\\n      // IMP START - Login\\n      const web3authProvider = await web3auth.connect({\\n        verifier,\\n        verifierId: userInfo.sub,\\n        idToken,\\n      });\\n      // IMP END - Login\\n\\n      if (web3authProvider) {\\n        loggedIn.value = true;\\n        provider = web3authProvider;\\n      }\\n    };\\n\\n    const getUserInfo = async () => {\\n      // IMP START - Get User Information\\n      const user = await web3auth.getUserInfo();\\n      // IMP END - Get User Information\\n      uiConsole(user);\\n    };\\n\\n    const logout = async () => {\\n      // IMP START - Logout\\n      await web3auth.logout();\\n      // IMP END - Logout\\n      provider = null;\\n      loggedIn.value = false;\\n      uiConsole(\\"logged out\\");\\n    };\\n\\n    // IMP START - Blockchain Calls\\n    const getAccounts = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = await web3.eth.getAccounts();\\n      uiConsole(address);\\n    };\\n\\n    const getBalance = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = (await web3.eth.getAccounts())[0];\\n\\n      // Get user\'s balance in ether\\n      const balance = web3.utils.fromWei(\\n        await web3.eth.getBalance(address), // Balance is in wei\\n        \\"ether\\"\\n      );\\n      uiConsole(balance);\\n    };\\n\\n    const signMessage = async () => {\\n      if (!provider) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n      const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n      // Sign the message\\n      const signedMessage = await web3.eth.personal.sign(\\n        originalMessage,\\n        fromAddress,\\n        \\"test password!\\" // configure your own password here.\\n      );\\n      uiConsole(signedMessage);\\n    };\\n    // IMP END - Blockchain Calls\\n\\n    function uiConsole(...args: any[]): void {\\n      const el = document.querySelector(\\"#console>p\\");\\n      if (el) {\\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\\n      }\\n      console.log(...args);\\n    }\\n\\n    return {\\n      loggedIn,\\n      provider,\\n      web3auth,\\n      login,\\n      logout,\\n      getUserInfo,\\n      getAccounts,\\n      getBalance,\\n      signMessage,\\n    };\\n  },\\n};\\n<\/script>\\n\\n\x3c!-- Add \\"scoped\\" attribute to limit CSS to this component only --\x3e\\n<style scoped>\\n#app {\\n  width: 80%;\\n  margin: auto;\\n  padding: 0 2rem;\\n}\\n\\nh3 {\\n  margin: 40px 0 0;\\n}\\n\\nul {\\n  list-style-type: none;\\n  padding: 0;\\n}\\n\\nli {\\n  display: inline-block;\\n  margin: 0 10px;\\n}\\n\\na {\\n  color: #42b983;\\n}\\n\\n.card {\\n  margin: 0.5rem;\\n  padding: 0.7rem;\\n  text-align: center;\\n  color: #0070f3;\\n  background-color: #fafafa;\\n  text-decoration: none;\\n  border: 1px solid #0070f3;\\n  border-radius: 10px;\\n  transition: color 0.15s ease, border-color 0.15s ease;\\n  width: 100%;\\n}\\n\\n.card:hover,\\n.card:focus,\\n.card:active {\\n  cursor: pointer;\\n  background-color: #f1f1f1;\\n}\\n\\n.flex-container {\\n  display: flex;\\n  flex-flow: row wrap;\\n}\\n\\n.flex-container>div {\\n  width: 100px;\\n  margin: 10px;\\n  text-align: center;\\n  line-height: 75px;\\n  font-size: 30px;\\n}\\n\\n#console {\\n  width: 100%;\\n  height: 100%;\\n  overflow: auto;\\n  word-wrap: break-word;\\n  font-size: 16px;\\n  font-family: monospace;\\n  text-align: left;\\n}\\n</style>\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-vanillajs-quick-start/index.html":"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>Login</title>\\n  <link rel = \\"stylesheet\\" href = \\"style.css\\">\\n</head>\\n<body>\\n  <div class=\\"container\\">\\n    <h1 class=\\"title\\">\\n      <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/pnp/web/modal\\">Web3Auth</a> & JS Ethereum\\n      Example\\n    </h1>\\n    \x3c!-- Logged In --\x3e\\n    <div class=\\"grid btn-logged-in\\">\\n      <button id=\\"get-user-info\\" class=\\"btn\\">Get User Info</button>\\n      <button id=\\"get-accounts\\" class=\\"btn\\">Get Accounts</button>\\n      <button id=\\"get-balance\\" class=\\"btn\\">Get Balance</button>\\n      <button id=\\"sign-message\\" class=\\"btn\\">Sign Message</button>\\n      <button id=\\"logout\\" class=\\"btn\\">Logout</button>\\n    </div>\\n    <div class=\\"console\\" id=\\"console\\">\\n      <p id=\\"code\\" class=\\"code\\"></p>\\n    </div>\\n\\n    \x3c!-- Logged Logout --\x3e\\n    <div class=\\"grid btn-logged-out\\">\\n      <button id=\\"login\\" class=\\"btn\\">Login</button>\\n    </div>\\n    <footer class=\\"footer\\">\\n      <a\\n        href=\\"https://github.com/Web3Auth/web3auth-pnp-examples/tree/main/web-modal-sdk/quick-starts/vanillajs-modal-quick-start\\"\\n        target=\\"_blank\\"\\n        rel=\\"noopener noreferrer\\"\\n      >\\n        Source code\\n      </a>\\n    </footer>\\n  </div>\\n  <script src=\\"https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\\"><\/script>\\n  <script src=\\"https://cdn.jsdelivr.net/npm/buffer@6\\"><\/script>\\n  \x3c!--IMP START - Quick Start--\x3e\\n  <script src=\\"https://cdn.jsdelivr.net/npm/@web3auth/single-factor-auth\\"><\/script>\\n  <script src=\\"https://cdn.jsdelivr.net/npm/@web3auth/ethereum-provider\\"><\/script>\\n  \x3c!--IMP END - Quick Start--\x3e\\n  <script src=\\"https://cdn.jsdelivr.net/npm/web3@4.1.1/dist/web3.min.js\\"><\/script>\\n  <script type = \\"module\\" src = \\"./script.js\\"><\/script>\\n</body>\\n</html>\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-vanillajs-quick-start/script.js":"import { initializeApp } from \\"https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js\\";\\nimport { getAuth, signInWithEmailAndPassword } from \\"https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js\\";\\n\\n// IMP START - Auth Provider Login\\nconst firebaseConfig = {\\n  apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n  authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n  projectId: \\"web3auth-oauth-logins\\",\\n  storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n  messagingSenderId: \\"461819774167\\",\\n  appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\nconst auth = getAuth(app);\\n// IMP END - Auth Provider Login\\n\\nconst loginButton = document.getElementById(\\"login\\");\\n\\nlet email, password, idToken, response;\\n\\nlet web3auth = null;\\n\\n(async function init() {\\n  $(\'.btn-logged-in\').hide();\\n  $(\'#sign-tx\').hide();\\n\\n  // IMP START - SDK Initialization\\n  // IMP START - Dashboard Registration\\n  const clientId =\\n    \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get your clientId from https://dashboard.web3auth.io\\n  // IMP END - Dashboard Registration\\n\\n  const chainConfig = {\\n    chainNamespace: \\"eip155\\",\\n    chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n    rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n    displayName: \\"Ethereum Mainnet\\",\\n    blockExplorer: \\"https://etherscan.io/\\",\\n    ticker: \\"ETH\\",\\n    tickerName: \\"Ethereum\\",\\n  };\\n\\n  uiConsole(window.SingleFactorAuth.Web3Auth);\\n  web3auth = new window.SingleFactorAuth.Web3Auth({\\n    clientId,\\n    web3AuthNetwork: \\"sapphire_mainnet\\", // Get your Network from Web3Auth Dashboard\\n  });\\n\\n  const ethereumPrivateKeyProvider = new window.EthereumProvider.EthereumPrivateKeyProvider({\\n    config: { chainConfig },\\n  });\\n\\n  await web3auth.init(ethereumPrivateKeyProvider);\\n  // IMP END - SDK Initialization\\n\\n\\n  if (web3auth.status === \\"connected\\") {\\n    $(\'.btn-logged-in\').show();\\n    $(\'.btn-logged-out\').hide();\\n  } else {\\n    $(\'.btn-logged-out\').show();\\n    $(\'.btn-logged-in\').hide();\\n  }\\n})();\\n\\nloginButton.addEventListener(\\"click\\", async function () {\\n  // IMP START - Verifier Creation\\n  const verifier = \\"w3a-firebase-demo\\";\\n  // IMP END - Verifier Creation\\n  // IMP START - Auth Provider Login\\n  email = \'custom+jwt@firebase.login\';\\n  password = \'Testing@123\';\\n  try {\\n    uiConsole(\\"Signing in with email and password in firebase\\");\\n    response = await signInWithEmailAndPassword(auth, email, password);\\n    uiConsole(response.user);\\n    idToken = await response.user.getIdToken(true);\\n    uiConsole(idToken);\\n    // IMP END - Auth Provider Login\\n    // IMP START - Login\\n\\n    await web3auth.connect({\\n      verifier,\\n      verifierId: response.user.uid,\\n      idToken: idToken,\\n    });\\n    // IMP END - Login\\n\\n    if (web3auth.status === \\"connected\\") {\\n      uiConsole(\\"Connected to Web3Auth\\");\\n      $(\\".btn-logged-out\\").hide();\\n      $(\\".btn-logged-in\\").show();\\n    }\\n  }\\n  catch (error) {\\n    uiConsole(error);\\n  }\\n});\\n\\n$(\\"#get-user-info\\").click(async function (event) {\\n  try {\\n    uiConsole(response);\\n    // IMP START - Get User Information\\n    const user = await web3auth.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n// IMP START - Blockchain Calls\\n$(\\"#get-accounts\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#get-balance\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\n$(\\"#sign-message\\").click(async function (event) {\\n  try {\\n    const web3 = new Web3(web3auth.provider);\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n// IMP END - Blockchain Calls\\n\\n$(\\"#logout\\").click(async function (event) {\\n  try {\\n    // IMP START - Logout\\n    await web3auth.logout();\\n    // IMP END - Logout\\n    $(\\".btn-logged-in\\").hide();\\n    $(\\".btn-logged-out\\").show();\\n  } catch (error) {\\n    console.error(error.message);\\n  }\\n});\\n\\nfunction uiConsole(...args) {\\n  const el = document.querySelector(\\"#console>p\\");\\n  if (el) {\\n    el.innerHTML = JSON.stringify(args || {}, null, 2);\\n  }\\n  console.log(...args);\\n}\\n\\n\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-web/quick-starts/sfa-vanillajs-quick-start/style.css":"html,\\nbody {\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tfont-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\\n\\t\\tUbuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\\n}\\n\\na {\\n\\tcolor: inherit;\\n\\ttext-decoration: none;\\n}\\n\\n* {\\n\\tbox-sizing: border-box;\\n}\\n.container {\\n\\twidth: 60%;\\n\\tmargin: auto;\\n\\tpadding: 0 2rem;\\n}\\n\\n.main {\\n\\tmin-height: 100vh;\\n\\tpadding: 4rem 0;\\n\\tflex: 1;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n}\\n\\n.title {\\n\\tline-height: 1.15;\\n\\tfont-size: 3rem;\\n\\ttext-align: center;\\n\\tmargin: 50px;\\n}\\n\\n.title a {\\n\\tcolor: #0070f3;\\n\\ttext-decoration: none;\\n}\\n\\n.console {\\n\\tmax-width: 100%;\\n}\\n\\n.code {\\n\\tbackground: #fafafa;\\n\\tborder-radius: 5px;\\n\\tpadding: 0.75rem;\\n\\tfont-size: 1.1rem;\\n\\tfont-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\\n\\t\\tBitstream Vera Sans Mono, Courier New, monospace;\\n\\toverflow-wrap: break-word;\\n}\\n\\n.grid {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tflex-direction: column;\\n}\\n\\n.btn {\\n\\tmargin: 0.5rem;\\n\\tpadding: 0.7rem;\\n\\ttext-align: center;\\n\\tcolor: #0070f3;\\n\\ttext-decoration: none;\\n\\tborder: 1px solid #0070f3;\\n\\tborder-radius: 10px;\\n\\ttransition: color 0.15s ease, border-color 0.15s ease;\\n\\twidth: 100%;\\n\\tbackground-color: white;\\n}\\n\\n.btn:hover,\\n.btn:focus,\\n.btn:active {\\n\\tcursor: pointer;\\n\\tbackground-color: #fafafa;\\n}\\n\\n.row {\\n\\tdisplay: flex;\\n\\tmargin-bottom: 0.5rem;\\n\\twidth: 100%;\\n}\\n.label {\\n\\tflex-basis: 45%;\\n\\tpadding-right: 10px;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: right;\\n\\tfont-weight: bold;\\n}\\n\\n.select {\\n\\tflex-basis: 30%;\\n\\ttext-align: left;\\n\\tpadding: 0.3rem 0.8rem;\\n\\tfont-size: 1rem;\\n\\tborder-radius: 8px;\\n}\\n\\n.footer {\\n\\tdisplay: flex;\\n\\tflex: 1;\\n\\tpadding: 2rem 0;\\n\\tborder-top: 1px solid #eaeaea;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tmargin-top: 10rem;\\n}\\n\\n.footer a {\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tflex-grow: 1;\\n}\\n\\n.logo {\\n\\theight: 1.5rem;\\n\\tmargin-left: 0.5rem;\\n}\\n\\n@media (max-width: 1200px) {\\n\\t.container {\\n\\t\\twidth: 100%;\\n\\t}\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-react-native/sfa-rn-bare-quick-start/App.tsx":"import React, {useEffect, useState} from \'react\';\\nimport {\\n  Button,\\n  ScrollView,\\n  StyleSheet,\\n  Text,\\n  View,\\n  Dimensions,\\n  ActivityIndicator,\\n} from \'react-native\';\\nimport \'@ethersproject/shims\';\\n// IMP START - Auth Provider Login\\nimport auth from \'@react-native-firebase/auth\';\\n// IMP END - Auth Provider Login\\nimport EncryptedStorage from \'react-native-encrypted-storage\';\\nimport {decode as atob} from \'base-64\';\\nimport {IProvider} from \'@web3auth/base\';\\n\\n// IMP START - Quick Start\\nimport Web3Auth from \'@web3auth/single-factor-auth-react-native\';\\nimport {EthereumPrivateKeyProvider} from \'@web3auth/ethereum-provider\';\\n// IMP END - Quick Start\\nimport {ethers} from \'ethers\';\\n\\n// IMP START - Dashboard Registration\\nconst clientId =\\n  \'BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\'; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \'w3a-firebase-demo\';\\n// IMP END - Verifier Creation\\n\\n// IMP START - Auth Provider Login\\nasync function signInWithEmailPassword() {\\n  try {\\n    const res = await auth().signInWithEmailAndPassword(\\n      \'custom+jwt@firebase.login\',\\n      \'Testing@123\',\\n    );\\n    return res;\\n  } catch (error) {\\n    console.error(error);\\n  }\\n}\\n// IMP END - Auth Provider Login\\n\\n// IMP START - SDK Initialization\\nconst chainConfig = {\\n  chainId: \'0x1\', // Please use 0x1 for Mainnet\\n  rpcTarget: \'https://rpc.ankr.com/eth\',\\n  displayName: \'Ethereum Mainnet\',\\n  blockExplorer: \'https://etherscan.io/\',\\n  ticker: \'ETH\',\\n  tickerName: \'Ethereum\',\\n};\\n\\nconst web3auth = new Web3Auth(EncryptedStorage, {\\n  clientId, // Get your Client ID from Web3Auth Dashboard\\n  web3AuthNetwork: \'sapphire_mainnet\',\\n});\\n\\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\\n  config: {chainConfig},\\n});\\n// IMP END - SDK Initialization\\n\\nexport default function App() {\\n  const [provider, setProvider] = useState<IProvider | null>(null);\\n  const [loggedIn, setLoggedIn] = useState<boolean>(false);\\n  const [loading, setLoading] = useState<boolean>(false);\\n  const [userInfo, setUserInfo] = useState<string>(\'\');\\n  const [consoleUI, setConsoleUI] = useState<string>(\'\');\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await web3auth.init(privateKeyProvider);\\n        setProvider(web3auth.provider);\\n        // IMP END - SDK Initialization\\n\\n        if (web3auth.connected) {\\n          setLoggedIn(true);\\n        }\\n      } catch (error) {\\n        uiConsole(error, \'mounted caught\');\\n      }\\n    };\\n    init();\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);\\n\\n  const parseToken = (token: any) => {\\n    try {\\n      const base64Url = token.split(\'.\')[1];\\n      const base64 = base64Url.replace(\'-\', \'+\').replace(\'_\', \'/\');\\n      return JSON.parse(atob(base64 || \'\'));\\n    } catch (err) {\\n      uiConsole(err);\\n      return null;\\n    }\\n  };\\n\\n  const login = async () => {\\n    try {\\n      setConsoleUI(\'Logging in\');\\n      setLoading(true);\\n      // IMP START - Auth Provider Login\\n      const loginRes = await signInWithEmailPassword();\\n      // IMP END - Auth Provider Login\\n      uiConsole(\'Login success\', loginRes);\\n      // IMP START - Login\\n      const idToken = await loginRes!.user.getIdToken(true);\\n      // IMP END - Login\\n      uiConsole(\'idToken\', idToken);\\n      const parsedToken = parseToken(idToken);\\n      setUserInfo(parsedToken);\\n\\n      // IMP START - Login\\n      const verifierId = parsedToken.sub;\\n      await web3auth!.connect({\\n        verifier, // e.g. `web3auth-sfa-verifier` replace with your verifier name, and it has to be on the same network passed in init().\\n        verifierId, // e.g. `Yux1873xnibdui` or `name@email.com` replace with your verifier id(sub or email)\'s value.\\n        idToken,\\n      });\\n      // IMP END - Login\\n      setProvider(web3auth.provider);\\n\\n      setLoading(false);\\n      if (web3auth.connected) {\\n        setLoggedIn(true);\\n        uiConsole(\'Logged In\');\\n      }\\n    } catch (e) {\\n      uiConsole(e);\\n      setLoading(false);\\n    }\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    setConsoleUI(\'Getting account\');\\n    // For ethers v5\\n    // const ethersProvider = new ethers.providers.Web3Provider(this.provider);\\n    const ethersProvider = new ethers.BrowserProvider(provider!);\\n\\n    // For ethers v5\\n    // const signer = ethersProvider.getSigner();\\n    const signer = await ethersProvider.getSigner();\\n\\n    // Get user\'s Ethereum public address\\n    const address = signer.getAddress();\\n    uiConsole(address);\\n  };\\n  const getBalance = async () => {\\n    setConsoleUI(\'Fetching balance\');\\n    // For ethers v5\\n    // const ethersProvider = new ethers.providers.Web3Provider(this.provider);\\n    const ethersProvider = new ethers.BrowserProvider(provider!);\\n\\n    // For ethers v5\\n    // const signer = ethersProvider.getSigner();\\n    const signer = await ethersProvider.getSigner();\\n\\n    // Get user\'s Ethereum public address\\n    const address = signer.getAddress();\\n\\n    // Get user\'s balance in ether\\n    // For ethers v5\\n    // const balance = ethers.utils.formatEther(\\n    // await ethersProvider.getBalance(address) // Balance is in wei\\n    // );\\n    const balance = ethers.formatEther(\\n      await ethersProvider.getBalance(address), // Balance is in wei\\n    );\\n\\n    uiConsole(balance);\\n  };\\n  const signMessage = async () => {\\n    setConsoleUI(\'Signing message\');\\n    // For ethers v5\\n    // const ethersProvider = new ethers.providers.Web3Provider(this.provider);\\n    const ethersProvider = new ethers.BrowserProvider(provider!);\\n\\n    // For ethers v5\\n    // const signer = ethersProvider.getSigner();\\n    const signer = await ethersProvider.getSigner();\\n    const originalMessage = \'YOUR_MESSAGE\';\\n\\n    // Sign the message\\n    const signedMessage = await signer.signMessage(originalMessage);\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    web3auth.logout();\\n    // IMP END - Logout\\n    setProvider(null);\\n    setLoggedIn(false);\\n    setUserInfo(\'\');\\n  };\\n\\n  const uiConsole = (...args: any) => {\\n    setConsoleUI(JSON.stringify(args || {}, null, 2) + \'\\\\n\\\\n\\\\n\\\\n\' + consoleUI);\\n    console.log(...args);\\n  };\\n\\n  const loggedInView = (\\n    <View style={styles.buttonArea}>\\n      <Button title=\\"Get User Info\\" onPress={() => uiConsole(userInfo)} />\\n      <Button title=\\"Get Accounts\\" onPress={() => getAccounts()} />\\n      <Button title=\\"Get Balance\\" onPress={() => getBalance()} />\\n      <Button title=\\"Sign Message\\" onPress={() => signMessage()} />\\n      <Button title=\\"Log Out\\" onPress={logout} />\\n    </View>\\n  );\\n\\n  const unloggedInView = (\\n    <View style={styles.buttonArea}>\\n      <Button title=\\"Login with Web3Auth\\" onPress={login} />\\n      {loading && <ActivityIndicator />}\\n    </View>\\n  );\\n\\n  return (\\n    <View style={styles.container}>\\n      {loggedIn ? loggedInView : unloggedInView}\\n      <View style={styles.consoleArea}>\\n        <Text style={styles.consoleText}>Console:</Text>\\n        <ScrollView style={styles.consoleUI}>\\n          <Text>{consoleUI}</Text>\\n        </ScrollView>\\n      </View>\\n    </View>\\n  );\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: \'#fff\',\\n    alignItems: \'center\',\\n    justifyContent: \'center\',\\n    paddingTop: 50,\\n    paddingBottom: 30,\\n  },\\n  consoleArea: {\\n    margin: 20,\\n    alignItems: \'center\',\\n    justifyContent: \'center\',\\n    flex: 1,\\n  },\\n  consoleUI: {\\n    flex: 1,\\n    backgroundColor: \'#CCCCCC\',\\n    color: \'#ffffff\',\\n    padding: 10,\\n    width: Dimensions.get(\'window\').width - 60,\\n  },\\n  consoleText: {\\n    padding: 10,\\n  },\\n  buttonArea: {\\n    flex: 2,\\n    alignItems: \'center\',\\n    justifyContent: \'space-around\',\\n    paddingBottom: 30,\\n  },\\n});\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-react-native/sfa-rn-bare-quick-start/package.json":"{\\n  \\"name\\": \\"sfa-rn-bare-quick-start\\",\\n  \\"version\\": \\"0.0.1\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"android\\": \\"react-native run-android\\",\\n    \\"ios\\": \\"react-native run-ios\\",\\n    \\"lint\\": \\"eslint . --fix\\",\\n    \\"start\\": \\"react-native start\\",\\n    \\"test\\": \\"jest\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@ethersproject/shims\\": \\"^5.7.0\\",\\n    \\"@react-native-firebase/app\\": \\"^17.4.2\\",\\n    \\"@react-native-firebase/auth\\": \\"^17.4.2\\",\\n    \\"@web3auth/ethereum-provider\\": \\"^7.2.1\\",\\n    \\"@web3auth/single-factor-auth-react-native\\": \\"^2.1.0\\",\\n    \\"ethers\\": \\"^6.8.0\\",\\n    \\"react\\": \\"18.2.0\\",\\n    \\"react-native\\": \\"0.72.1\\",\\n    \\"react-native-encrypted-storage\\": \\"^4.0.3\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@babel/core\\": \\"^7.20.0\\",\\n    \\"@babel/plugin-transform-private-methods\\": \\"^7.22.5\\",\\n    \\"@babel/preset-env\\": \\"^7.20.0\\",\\n    \\"@babel/runtime\\": \\"^7.20.0\\",\\n    \\"@react-native/eslint-config\\": \\"^0.72.2\\",\\n    \\"@react-native/metro-config\\": \\"^0.72.7\\",\\n    \\"@tsconfig/react-native\\": \\"^3.0.0\\",\\n    \\"@types/base-64\\": \\"^1.0.1\\",\\n    \\"@types/metro-config\\": \\"^0.76.3\\",\\n    \\"@types/react\\": \\"^18.0.24\\",\\n    \\"@types/react-test-renderer\\": \\"^18.0.0\\",\\n    \\"babel-jest\\": \\"^29.2.1\\",\\n    \\"base-64\\": \\"^1.0.0\\",\\n    \\"bn.js\\": \\"^5.2.1\\",\\n    \\"buffer\\": \\"^6.0.3\\",\\n    \\"crypto-browserify\\": \\"^3.12.0\\",\\n    \\"empty-module\\": \\"^0.0.2\\",\\n    \\"eslint\\": \\"^8.19.0\\",\\n    \\"jest\\": \\"^29.2.1\\",\\n    \\"metro-react-native-babel-preset\\": \\"0.76.5\\",\\n    \\"path-browserify\\": \\"^1.0.1\\",\\n    \\"prettier\\": \\"^2.4.1\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"react-native-get-random-values\\": \\"^1.9.0\\",\\n    \\"react-test-renderer\\": \\"18.2.0\\",\\n    \\"readable-stream\\": \\"^4.4.2\\",\\n    \\"stream-browserify\\": \\"^3.0.0\\",\\n    \\"typescript\\": \\"4.8.4\\"\\n  },\\n  \\"engines\\": {\\n    \\"node\\": \\">=16\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-react-native/sfa-rn-bare-quick-start/metro.config.js":"const {getDefaultConfig} = require(\'metro-config\');\\n\\nmodule.exports = (async () => {\\n  const {\\n    resolver: {sourceExts, assetExts},\\n  } = await getDefaultConfig(__dirname);\\n\\n  const defaultSourceExts = [...sourceExts, \'svg\', \'mjs\', \'cjs\'];\\n\\n  return {\\n    resolver: {\\n      // IMP START - Bundler Issues\\n      extraNodeModules: {\\n        assert: require.resolve(\'empty-module\'), // assert can be polyfilled here if needed\\n        http: require.resolve(\'empty-module\'), // stream-http can be polyfilled here if needed\\n        https: require.resolve(\'empty-module\'), // https-browserify can be polyfilled here if needed\\n        os: require.resolve(\'empty-module\'), // os-browserify can be polyfilled here if needed\\n        url: require.resolve(\'empty-module\'), // url can be polyfilled here if needed\\n        zlib: require.resolve(\'empty-module\'), // browserify-zlib can be polyfilled here if needed\\n        path: require.resolve(\'empty-module\'),\\n        process: require.resolve(\'process\'),\\n        crypto: require.resolve(\'crypto-browserify\'),\\n        stream: require.resolve(\'readable-stream\'),\\n      },\\n      // IMP END - Bundler Issues\\n\\n      assetExts: assetExts.filter(ext => ext !== \'svg\'),\\n\\n      sourceExts: process.env.TEST_REACT_NATIVE\\n        ? [\'e2e.js\'].concat(defaultSourceExts)\\n        : defaultSourceExts,\\n    },\\n    transformer: {\\n      getTransformOptions: async () => ({\\n        transform: {\\n          experimentalImportSupport: false,\\n          inlineRequires: true,\\n        },\\n      }),\\n    },\\n  };\\n})();\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-react-native/sfa-rn-bare-quick-start/globals.js":"global.Buffer = require(\'buffer\').Buffer;\\nglobal.process.browser = true;\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-react-native/sfa-rn-bare-quick-start/index.js":"/**\\n * @format\\n */\\n\\nimport {AppRegistry} from \'react-native\';\\nimport \'./globals\';\\nimport \'react-native-get-random-values\';\\nimport {name as appName} from \'./app.json\';\\n\\nimport App from \'./App\';\\n\\nAppRegistry.registerComponent(appName, () => App);\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-react-native/sfa-rn-bare-quick-start/ios/Podfile":"# Resolve react_native_pods.rb with node to allow for hoisting\\nrequire Pod::Executable.execute_command(\'node\', [\'-p\',\\n  \'require.resolve(\\n    \\"react-native/scripts/react_native_pods.rb\\",\\n    {paths: [process.argv[1]]},\\n  )\', __dir__]).strip\\n\\n# IMP START - Requirements iOS\\nplatform :ios, 14\\n# IMP END - Requirements iOS\\nprepare_react_native_project!\\n\\n# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.\\n# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded\\n#\\n# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`\\n# ```js\\n# module.exports = {\\n#   dependencies: {\\n#     ...(process.env.NO_FLIPPER ? { \'react-native-flipper\': { platforms: { ios: null } } } : {}),\\n# ```\\nflipper_config = ENV[\'NO_FLIPPER\'] == \\"1\\" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled\\n\\nlinkage = ENV[\'USE_FRAMEWORKS\']\\nif linkage != nil\\n  Pod::UI.puts \\"Configuring Pod with #{linkage}ally linked Frameworks\\".green\\n  use_frameworks! :linkage => linkage.to_sym\\nend\\n\\ntarget \'web3authsfafirebase\' do\\n  config = use_native_modules!\\n  use_frameworks! :linkage => :static\\n  $RNFirebaseAsStaticFramework = true\\n\\n  # Flags change depending on the env values.\\n  flags = get_default_flags()\\n\\n  use_react_native!(\\n    :path => config[:reactNativePath],\\n    # Hermes is now enabled by default. Disable by setting this flag to false.\\n    :hermes_enabled => flags[:hermes_enabled],\\n    :fabric_enabled => flags[:fabric_enabled],\\n    # Enables Flipper.\\n    #\\n    # Note that if you have use_frameworks! enabled, Flipper will not work and\\n    # you should disable the next line.\\n    # :flipper_configuration => flipper_config,\\n    # An absolute path to your application root.\\n    :app_path => \\"#{Pod::Config.instance.installation_root}/..\\"\\n  )\\n\\n  target \'web3authsfafirebaseTests\' do\\n    inherit! :complete\\n    # Pods for testing\\n  end\\n\\n  post_install do |installer|\\n    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202\\n    react_native_post_install(\\n      installer,\\n      config[:reactNativePath],\\n      :mac_catalyst_enabled => false\\n    )\\n    __apply_Xcode_12_5_M1_post_install_workaround(installer)\\n  end\\nend\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-react-native/sfa-rn-bare-quick-start/android/build.gradle":"// Top-level build file where you can add configuration options common to all sub-projects/modules.\\n\\nbuildscript {\\n    ext {\\n        buildToolsVersion = \\"33.0.0\\"\\n        // IMP START - Requirements Android\\n        minSdkVersion = 24\\n        compileSdkVersion = 33\\n        targetSdkVersion = 33\\n        // IMP END - Requirements Android\\n\\n        // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.\\n        ndkVersion = \\"23.1.7779620\\"\\n    }\\n    repositories {\\n        google()\\n        mavenCentral()\\n    }\\n    dependencies {\\n        classpath(\\"com.android.tools.build:gradle\\")\\n        classpath(\\"com.facebook.react:react-native-gradle-plugin\\")\\n        classpath \'com.google.gms:google-services:4.3.15\'\\n    }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-ios/sfa-ios-quick-start/ios-firebase-example/ContentView.swift":"import SwiftUI\\n\\nstruct ContentView: View {\\n    @StateObject var vm: ViewModel\\n    \\n    var body: some View {\\n        NavigationView {\\n            VStack {\\n                if vm.isLoading {\\n                    ProgressView()\\n                } else {\\n                    if vm.loggedIn {\\n                        UserDetailView(user: vm.user, loggedIn: $vm.loggedIn)\\n                    } else {\\n                        LoginView(vm: vm)\\n                    }\\n                }\\n            }\\n            .navigationTitle(vm.navigationTitle)\\n            Spacer()\\n        }\\n        .onAppear {\\n            Task {\\n                await vm.setup()\\n            }\\n        }\\n    }\\n}\\n\\nstruct ContentView_Previews: PreviewProvider {\\n    static var previews: some View {\\n        ContentView(vm: ViewModel())\\n    }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-ios/sfa-ios-quick-start/ios-firebase-example/LoginView.swift":"import SwiftUI\\n\\nstruct LoginView: View {\\n    @StateObject var vm: ViewModel\\n    var body: some View {\\n        List {\\n            Button(\\n                action: {\\n                    vm.loginViaFirebaseEP()\\n                },\\n                label: {\\n                    Label(\\"LogIn\\", systemImage: \\"arrow.right.square.fill\\")\\n                        .foregroundColor(.green)\\n                }\\n            )\\n\\n        }\\n    }\\n}\\n\\nstruct LoginView_Previews: PreviewProvider {\\n    static var previews: some View {\\n        LoginView(vm: ViewModel())\\n    }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-ios/sfa-ios-quick-start/ios-firebase-example/UserDetailView.swift":"import SwiftUI\\nimport web3\\n\\nstruct UserDetailView: View {\\n    @State var user: String?\\n    @Binding var loggedIn: Bool\\n    @State private var showingAlert = false\\n    var body: some View {\\n        if let user = user {\\n            List {\\n                Section {\\n                    Text(\\"\\\\(user)\\")\\n                } header: {\\n                    Text(\\"Private key\\")\\n                }\\n                Section {\\n                    Button {\\n                        Task.detached {\\n                            await MainActor.run(body: {\\n                                loggedIn.toggle()\\n                            })\\n                        }\\n                    } label: {\\n                        Label(\\"Logout\\", systemImage: \\"arrow.left.square.fill\\")\\n                            .foregroundColor(.red)\\n                    }\\n                }\\n            }\\n            .listStyle(.automatic)\\n        }\\n    }\\n}\\n\\nstruct UserDetailView_Previews: PreviewProvider {\\n    static var previews: some View {\\n        let user: String = \\"privKey\\"\\n        UserDetailView(user: user , loggedIn: .constant(true))\\n    }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-ios/sfa-ios-quick-start/ios-firebase-example/ViewModel.swift":"import Foundation\\n// IMP START - Quick Start\\nimport SingleFactorAuth\\n// IMP END - Quick Start\\n// IMP START - Auth Provider Login\\nimport FirebaseCore\\nimport FirebaseAuth\\n// IMP END - Auth Provider Login\\n\\nclass ViewModel: ObservableObject {\\n    // IMP START - Installation\\n    var singleFactorAuth: SingleFactorAuth?\\n    // IMP END - Installation\\n    @Published var loggedIn: Bool = false\\n    @Published var user: String = \\"\\"\\n    @Published var isLoading = false\\n    @Published var navigationTitle: String = \\"\\"\\n\\n    func setup() async {\\n        guard singleFactorAuth == nil else { return }\\n        await MainActor.run(body: {\\n            isLoading = true\\n            navigationTitle = \\"Loading\\"\\n        })\\n        // IMP START - Initialize Web3Auth SFA\\n        singleFactorAuth = SingleFactorAuth(singleFactorAuthArgs: .init(network: .CYAN))\\n        // IMP END - Initialize Web3Auth SFA\\n        await MainActor.run(body: {\\n            isLoading = false\\n            navigationTitle = loggedIn ? \\"UserInfo\\" : \\"iOS SFA QuickStart\\"\\n        })\\n    }\\n    \\n    func loginViaFirebaseEP() {\\n        Task{\\n            do {\\n                // IMP START - Auth Provider Login\\n                let res = try await Auth.auth().signIn(withEmail: \\"ios@firebase.com\\", password: \\"iOS@Web3Auth\\")\\n                let id_token = try await res.user.getIDToken()\\n                // IMP END - Auth Provider Login\\n                print(id_token)\\n                // IMP START - Verifier Creation\\n                let verifierName = \\"web3auth-firebase-examples\\"\\n                // IMP END - Verifier Creation\\n                // IMP START - Get Key\\n                let result = try await SingleFactorAuth(singleFactorAuthArgs: .init(network: .CYAN)).getKey(loginParams: .init(verifier: verifierName, verifierId: \\"ios@firebase.com\\", idToken: id_token))\\n                // IMP END - Get Key\\n                print(result)\\n                await MainActor.run(body: {\\n                    user = result.getPrivateKey()\\n                    loggedIn = true\\n                    navigationTitle = \\"UserInfo\\"\\n                })\\n\\n            } catch {\\n                print(\\"Error\\")\\n            }\\n        }\\n    }\\n    \\n    \\n}\\n\\nextension ViewModel {\\n    func showResult(result: TorusKey) {\\n        print(\\"\\"\\"\\n        Signed in successfully!\\n            Private key: \\\\(result.getPrivateKey())\\n            Public Address:\\n                Name: \\\\(result.getPublicAddress())\\n        \\"\\"\\")\\n    }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-node/sfa-node-quick-start/index.js":"// IMP START - Quick Start\\nconst { Web3Auth } = require(\\"@web3auth/node-sdk\\");\\nconst { EthereumPrivateKeyProvider } = require(\\"@web3auth/ethereum-provider\\");\\n// IMP END - Quick Start\\nconst jwt = require(\'jsonwebtoken\');\\nconst fs = require(\'fs\');\\n\\n// IMP START - Dashboard Registration\\nconst clientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // Get your Client ID from Web3Auth Dashboard\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \\"w3a-node-demo\\";\\n// IMP END - Verifier Creation\\n\\n// IMP START - SDK Initialization\\nconst web3auth = new Web3Auth({\\n  clientId,\\n  web3AuthNetwork: \\"sapphire_mainnet\\", // Get your Network ID from Web3Auth Dashboard\\n});\\n\\nconst ethereumProvider = new EthereumPrivateKeyProvider({\\n  config: {\\n    chainConfig: {\\n      chainId: \\"0x1\\",\\n      rpcTarget: \\"https://rpc.ankr.com/eth\\"\\n    }\\n  }\\n});\\n\\nweb3auth.init({ provider: ethereumProvider });\\n// IMP END - SDK Initialization\\n\\n// IMP START - Auth Provider Login\\nvar privateKey = fs.readFileSync(\'privateKey.pem\');\\n\\nvar sub = Math.random().toString(36).substring(7);\\n\\nvar token = jwt.sign(\\n  {\\n    sub: sub,\\n    name: \'Agrawal Alam Mishra Rawski Bherwani\',\\n    email: \'devrel@web3auth.io\',\\n    aud: \'urn:api-web3auth-io\',\\n    iss: \'https://web3auth.io\',\\n    iat: Math.floor(Date.now() / 1000),\\n    exp: Math.floor(Date.now() / 1000) + 60 * 60,\\n  },\\n  privateKey,\\n  { algorithm: \'RS256\', keyid: \'2ma4enu1kdvw5bo9xsfpi3gcjzrt6q78yl0h\' },\\n);\\n// IMP END - Auth Provider Login\\n\\nconst connect = async () => {\\n  // IMP START - Login\\n  const provider = await web3auth.connect({\\n    verifier: \\"w3a-node-demo\\", // replace with your verifier name\\n    verifierId: sub, // replace with your verifier id\'s value, for example, sub value of JWT Token, or email address.\\n    idToken: token, // replace with your newly created unused JWT Token.\\n  });\\n  // IMP END - Login\\n  const eth_private_key = await provider.request({ method: \\"eth_private_key\\" });\\n  console.log(\\"ETH PrivateKey: \\", eth_private_key);\\n  const eth_address = await provider.request({ method: \\"eth_accounts\\" });\\n  console.log(\\"ETH Address: \\", eth_address[0]);\\n  process.exit(0);\\n};\\nconnect();\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-node/sfa-node-quick-start/package.json":"{\\n  \\"author\\": \\"MSA\\",\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/ethereum-provider\\": \\"^7.2.1\\",\\n    \\"@web3auth/node-sdk\\": \\"^3.2.0\\",\\n    \\"fs\\": \\"^0.0.1-security\\",\\n    \\"jsonwebtoken\\": \\"^9.0.2\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"description\\": \\"Web3Auth\'s Node SDK Demo App\\",\\n  \\"keywords\\": [],\\n  \\"license\\": \\"ISC\\",\\n  \\"main\\": \\"index.js\\",\\n  \\"name\\": \\"node-app\\",\\n  \\"scripts\\": {\\n    \\"start\\": \\"node index.js\\"\\n  },\\n  \\"version\\": \\"1.0.0\\"\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-android/sfa-android-quick-start/app/src/main/java/com/example/androidsfaexample/MainActivity.kt":"package com.example.androidsfaexample\\n\\nimport android.content.ContentValues.TAG\\nimport android.os.Bundle\\nimport android.util.Log\\nimport android.view.View\\nimport android.widget.Button\\nimport android.widget.TextView\\nimport android.widget.Toast\\nimport androidx.appcompat.app.AppCompatActivity\\nimport com.auth0.android.jwt.JWT\\n// IMP START - Auth Provider Login\\nimport com.google.firebase.auth.FirebaseAuth\\nimport com.google.firebase.auth.ktx.auth\\nimport com.google.firebase.ktx.Firebase\\n// IMP END - Auth Provider Login\\nimport com.google.gson.Gson\\n// IMP START - Quick Start\\nimport com.web3auth.singlefactorauth.SingleFactorAuth\\nimport com.web3auth.singlefactorauth.types.LoginParams\\nimport com.web3auth.singlefactorauth.types.SingleFactorAuthArgs\\nimport com.web3auth.singlefactorauth.types.TorusKey\\nimport org.torusresearch.fetchnodedetails.types.TorusNetwork\\n// IMP END - Quick Start\\nimport java.util.concurrent.CompletableFuture\\nimport java.util.concurrent.ExecutionException\\n\\nclass MainActivity : AppCompatActivity() {\\n    private lateinit var singleFactorAuth: SingleFactorAuth\\n    private lateinit var singleFactorAuthArgs: SingleFactorAuthArgs\\n    private lateinit var loginParams: LoginParams\\n    private var torusKey: TorusKey? = null\\n    // IMP START - Auth Provider Login\\n    private lateinit var auth: FirebaseAuth\\n    // IMP END - Auth Provider Login\\n    private var publicAddress: String = \\"\\"\\n    private val gson = Gson()\\n\\n\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        setContentView(R.layout.activity_main)\\n        // IMP START - Initialize Web3Auth SFA\\n        singleFactorAuthArgs = SingleFactorAuthArgs(TorusNetwork.TESTNET)\\n        singleFactorAuth = SingleFactorAuth(singleFactorAuthArgs)\\n        // IMP END - Initialize Web3Auth SFA\\n\\n\\n        // Setup UI and event handlers\\n        val signInButton = findViewById<Button>(R.id.signIn)\\n        signInButton.setOnClickListener { signIn() }\\n\\n        val signOutButton = findViewById<Button>(R.id.signOut)\\n        signOutButton.setOnClickListener { signOut() }\\n\\n        val sessionResponse: CompletableFuture<TorusKey> =\\n            singleFactorAuth.initialize(this.applicationContext)\\n        sessionResponse.whenComplete { torusKey, error ->\\n            if (torusKey != null) {\\n                publicAddress = torusKey?.publicAddress.toString()\\n                println(\\"\\"\\"Private Key: ${torusKey.privateKey?.toString(16)}\\"\\"\\".trimIndent())\\n                reRender()\\n            } else {\\n                Log.d(\\"MainActivity_SFA\\", error.message ?: \\"Something went wrong\\")\\n            }\\n        }\\n\\n        reRender()\\n    }\\n\\n    private fun signIn(){\\n        // Initialize Firebase Auth\\n        // IMP START - Auth Provider Login\\n        auth = Firebase.auth\\n        auth.signInWithEmailAndPassword(\\"android@firebase.com\\", \\"Android@Web3Auth\\")\\n            .addOnCompleteListener(this) { task ->\\n                if (task.isSuccessful) {\\n                    // Sign in success, update UI with the signed-in user\'s information\\n                    Log.d(TAG, \\"signInWithEmail:success\\")\\n                    val user = auth.currentUser\\n                    user!!.getIdToken(true).addOnSuccessListener { result ->\\n                        val idToken = result.token\\n                        // IMP END - Auth Provider Login\\n                        //Do whatever\\n                        Log.d(TAG, \\"GetTokenResult result = $idToken\\")\\n                        if (idToken != null) {\\n                            val jwt = JWT(idToken)\\n                            val issuer = jwt.issuer //get registered claims\\n                            Log.d(TAG, \\"Issuer = $issuer\\")\\n                            val sub = jwt.getClaim(\\"sub\\").asString() //get sub claims\\n                            Log.d(TAG, \\"sub = $sub\\")\\n                            // IMP START - Verifier Creation\\n                            loginParams =\\n                                LoginParams(\\"web3auth-firebase-examples\\", \\"$sub\\", \\"$idToken\\")\\n                            // IMP END - Verifier Creation\\n                            try {\\n                                // IMP START - Get Key\\n                                torusKey = singleFactorAuth.getKey(\\n                                    loginParams,\\n                                    this.applicationContext,\\n                                    86400\\n                                ).get()\\n                                // IMP END - Get Key\\n                            } catch (e: ExecutionException) {\\n                                e.printStackTrace()\\n                            } catch (e: InterruptedException) {\\n                                e.printStackTrace()\\n                            }\\n                            publicAddress = torusKey?.publicAddress.toString()\\n                            println(\\"\\"\\"Private Key: ${torusKey?.privateKey?.toString(16)}\\"\\"\\".trimIndent())\\n                            println(\\"\\"\\"Public Address: $publicAddress\\"\\"\\".trimIndent())\\n                            reRender()\\n                        };\\n                    }\\n                } else {\\n                    // If sign in fails, display a message to the user.\\n                    Log.w(TAG, \\"signInWithEmail:failure\\", task.exception)\\n                    Toast.makeText(\\n                        baseContext, \\"Authentication failed.\\",\\n                        Toast.LENGTH_SHORT\\n                    ).show()\\n                }\\n            }\\n    }\\n\\n    private fun signOut() {\\n        publicAddress = \\"\\"\\n        reRender()\\n    }\\n\\n    private fun reRender() {\\n        val contentTextView = findViewById<TextView>(R.id.contentTextView)\\n        val signInButton = findViewById<Button>(R.id.signIn)\\n        val signOutButton = findViewById<Button>(R.id.signOut)\\n\\n        if (publicAddress.isNotEmpty()) {\\n            contentTextView.text = gson.toJson(publicAddress)\\n            contentTextView.visibility = View.VISIBLE\\n            signInButton.visibility = View.GONE\\n            signOutButton.visibility = View.VISIBLE\\n        } else {\\n            contentTextView.visibility = View.GONE\\n            signInButton.visibility = View.VISIBLE\\n            signOutButton.visibility = View.GONE\\n        }\\n    }\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-android/sfa-android-quick-start/app/src/main/AndroidManifest.xml":"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\">\\n\\n    <application\\n        android:allowBackup=\\"true\\"\\n        android:dataExtractionRules=\\"@xml/data_extraction_rules\\"\\n        android:fullBackupContent=\\"@xml/backup_rules\\"\\n        android:icon=\\"@mipmap/ic_launcher\\"\\n        android:label=\\"@string/app_name\\"\\n        android:supportsRtl=\\"true\\"\\n        android:theme=\\"@style/Theme.AndroidSFAExample\\"\\n        tools:targetApi=\\"31\\">\\n        <activity\\n            android:name=\\".MainActivity\\"\\n            android:exported=\\"true\\">\\n            <intent-filter>\\n                <action android:name=\\"android.intent.action.MAIN\\" />\\n\\n                <category android:name=\\"android.intent.category.LAUNCHER\\" />\\n            </intent-filter>\\n        </activity>\\n    </application>\\n\\n    <uses-permission android:name=\\"android.permission.INTERNET\\" />\\n\\n</manifest>","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-android/sfa-android-quick-start/app/build.gradle":"plugins {\\n    id \'com.android.application\'\\n    id \'org.jetbrains.kotlin.android\'\\n    id \'com.google.gms.google-services\'\\n}\\n\\nandroid {\\n    namespace \'com.example.androidsfaexample\'\\n    // IMP START - Requirements\\n    compileSdk 33\\n    // IMP END - Requirements\\n\\n    defaultConfig {\\n        applicationId \\"com.example.androidsfaexample\\"\\n        // IMP START - Requirements\\n        minSdk 24\\n        targetSdk 33\\n        // IMP END - Requirements\\n        versionCode 1\\n        versionName \\"1.0\\"\\n\\n        testInstrumentationRunner \\"androidx.test.runner.AndroidJUnitRunner\\"\\n    }\\n\\n    buildTypes {\\n        release {\\n            minifyEnabled false\\n            proguardFiles getDefaultProguardFile(\'proguard-android-optimize.txt\'), \'proguard-rules.pro\'\\n        }\\n    }\\n    compileOptions {\\n        sourceCompatibility JavaVersion.VERSION_1_8\\n        targetCompatibility JavaVersion.VERSION_1_8\\n    }\\n    kotlinOptions {\\n        jvmTarget = \'1.8\'\\n    }\\n}\\n\\ndependencies {\\n    // IMP START - Installation\\n    implementation \'com.github.web3auth:single-factor-auth-android:0.0.6\'\\n    // IMP END - Installation\\n    implementation \'org.torusresearch:fetch-node-details-java:3.1.0\'\\n    implementation platform(\'com.google.firebase:firebase-bom:31.0.2\')\\n    implementation \'com.google.firebase:firebase-auth-ktx\'\\n    implementation \'com.google.code.gson:gson:2.9.1\'\\n    implementation \'com.auth0.android:jwtdecode:2.0.2\'\\n    implementation \'androidx.core:core-ktx:1.7.0\'\\n    implementation \'androidx.appcompat:appcompat:1.4.1\'\\n    implementation \'com.google.android.material:material:1.5.0\'\\n    implementation \'androidx.constraintlayout:constraintlayout:2.1.3\'\\n    testImplementation \'junit:junit:4.13.2\'\\n    androidTestImplementation \'androidx.test.ext:junit:1.1.3\'\\n    androidTestImplementation \'androidx.test.espresso:espresso-core:3.4.0\'\\n}","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-android/sfa-android-quick-start/settings.gradle":"pluginManagement {\\n    repositories {\\n        google()\\n        mavenCentral()\\n        gradlePluginPortal()\\n    }\\n}\\ndependencyResolutionManagement {\\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\\n    repositories {\\n        google()\\n        mavenCentral()\\n        // IMP START - Requirements\\n        maven { url \\"https://jitpack.io\\" }\\n    }\\n}\\nrootProject.name = \\"Android SFA Example\\"\\ninclude \':app\'\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-android/sfa-android-quick-start/app/src/main/res/values/strings.xml":"<resources>\\n    <string name=\\"app_name\\">Android SFA QuickStart Demo</string>\\n    <string name=\\"login_via_firebase_to_sfa\\">Login</string>\\n    <string name=\\"not_logged_in\\">Login now to get Token</string>\\n    <string name=\\"logout\\">Logout</string>\\n</resources>","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-android/sfa-android-quick-start/app/src/main/res/layout/activity_main.xml":"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\n    xmlns:app=\\"http://schemas.android.com/apk/res-auto\\"\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"match_parent\\"\\n    tools:context=\\".MainActivity\\">\\n\\n    <Button\\n        android:id=\\"@+id/signIn\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:layout_marginTop=\\"216dp\\"\\n        android:text=\\"@string/login_via_firebase_to_sfa\\"\\n        app:backgroundTint=\\"#9E550B\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintStart_toStartOf=\\"parent\\"\\n        app:layout_constraintTop_toTopOf=\\"parent\\"\\n        tools:ignore=\\"VisualLintOverlap\\" />\\n\\n    <TextView\\n        android:id=\\"@+id/contentTextView\\"\\n        android:layout_width=\\"357dp\\"\\n        android:layout_height=\\"609dp\\"\\n        android:layout_marginStart=\\"16dp\\"\\n        android:layout_marginEnd=\\"16dp\\"\\n        app:layout_constraintBottom_toBottomOf=\\"parent\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintStart_toStartOf=\\"parent\\"\\n        app:layout_constraintTop_toTopOf=\\"parent\\" />\\n\\n    <Button\\n        android:id=\\"@+id/signOut\\"\\n        android:layout_width=\\"wrap_content\\"\\n        android:layout_height=\\"wrap_content\\"\\n        android:layout_marginBottom=\\"140dp\\"\\n        android:text=\\"@string/logout\\"\\n        android:textColor=\\"#4A148C\\"\\n        app:backgroundTint=\\"#F5820D\\"\\n        app:layout_constraintBottom_toBottomOf=\\"parent\\"\\n        app:layout_constraintEnd_toEndOf=\\"parent\\"\\n        app:layout_constraintHorizontal_bias=\\"0.468\\"\\n        app:layout_constraintStart_toStartOf=\\"parent\\" />\\n\\n</androidx.constraintlayout.widget.ConstraintLayout>","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-flutter/sfa_flutter_quick_start/pubspec.yaml":"name: sfa_flutter_quick_start\\ndescription: \\"A new Flutter project.\\"\\npublish_to: \'none\' # Remove this line if you wish to publish to pub.dev\\n\\nversion: 1.0.0+1\\n\\nenvironment:\\n  sdk: \'>=3.2.3 <4.0.0\'\\n\\ndependencies:\\n  flutter:\\n    sdk: flutter\\n\\n\\n  # The following adds the Cupertino Icons font to your application.\\n  # Use with the CupertinoIcons class for iOS style icons.\\n  cupertino_icons: ^1.0.2\\n  firebase_auth: ^4.15.3\\n  firebase_core: ^2.24.2\\n  provider: ^6.1.1\\n  # // IMP START - Installation\\n  single_factor_auth_flutter: ^1.0.0\\n  # // IMP END - Installation\\n\\ndev_dependencies:\\n  flutter_test:\\n    sdk: flutter\\n\\n  flutter_lints: ^2.0.0\\n\\n# For information on the generic Dart part of this file, see the\\n# following page: https://dart.dev/tools/pub/pubspec\\n\\n# The following section is specific to Flutter packages.\\nflutter:\\n\\n  uses-material-design: true\\n\\n\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-flutter/sfa_flutter_quick_start/lib/auth_service.dart":"import \'dart:io\';\\n\\n// IMP START - Auth Provider Login\\nimport \'package:firebase_auth/firebase_auth.dart\';\\n// IMP END - Auth Provider Login\\nimport \'package:single_factor_auth_flutter/input.dart\';\\n// IMP START - Quick Start\\nimport \'package:single_factor_auth_flutter/single_factor_auth_flutter.dart\';\\n// IMP END - Quick Start\\nimport \'package:flutter/widgets.dart\';\\n\\nclass AuthService extends ChangeNotifier {\\n  // IMP START - Auth Provider Login\\n  final FirebaseAuth _auth = FirebaseAuth.instance;\\n  // IMP END - Auth Provider Login\\n  final SFA = SingleFactAuthFlutter();\\n\\n  Stream<User?> get authStateChanges => _auth.authStateChanges();\\n\\n  AuthService() {\\n    initSdk();\\n  }\\n\\n  Future<void> initSdk() async {\\n    if (Platform.isAndroid) {\\n      await init();\\n      initialize();\\n    } else if (Platform.isIOS) {\\n      init();\\n      initialize();\\n    } else {}\\n  }\\n\\n  Future<void> init() async {\\n    // IMP START - Initialize Web3Auth SFA\\n    await SFA.init(Web3AuthNetwork(network: TorusNetwork.cyan));\\n    // IMP END - Initialize Web3Auth SFA\\n  }\\n\\n  Future<void> initialize() async {\\n    print(\\"initialize() called\\");\\n    try {\\n      final String privKey = await SFA.initialize();\\n      if (privKey.isNotEmpty) {\\n        print(\'Initialized successfully. Private Key: $privKey\');\\n      }\\n    } catch (e) {\\n      print(\\"Error initializing SFA: $e\\");\\n    }\\n  }\\n\\n  Future<String> getKey(String token) {\\n    // IMP START - Get Key\\n    return SFA.getKey(LoginParams(\\n        // IMP START - Verifier Creation\\n        verifier: \'web3auth-firebase-examples\',\\n        // IMP END - Verifier Creation\\n        verifierId: \'sfa.flutter@w3a.link\',\\n        idToken: token));\\n    // IMP END - Get Key\\n  }\\n\\n  // Sign in with email and password\\n  Future<UserCredential> signInWithEmailAndPassword(\\n      String email, String password) async {\\n    try {\\n      await initSdk(); // Ensure the SDK is initialized\\n      return await _auth.signInWithEmailAndPassword(\\n          email: email, password: password);\\n    } catch (e) {\\n      print(e.toString());\\n      rethrow;\\n    }\\n  }\\n\\n  // Sign out\\n  Future<void> signOut() async {\\n    await _auth.signOut();\\n  }\\n\\n // IMP START - Auth Provider Login\\n // Get the current user\\n  User? getCurrentUser() {\\n    return _auth.currentUser;\\n  }\\n  // IMP END - Auth Provider Login\\n\\n\\n  Future<bool> isPrivateKeyAvailable() async {\\n    // IMP START - Auth Provider Login\\n    final User? user = _auth.currentUser;\\n    // IMP END - Auth Provider Login\\n    if (user != null) {\\n      // IMP START - Auth Provider Login\\n      final String? idToken = await user.getIdToken(true);\\n      // IMP END - Auth Provider Login\\n      final String privateKey = await getKey(idToken!);\\n      print(privateKey);\\n      return privateKey.isNotEmpty;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  Future<String> getPrivateKey() async {\\n    final User? user = _auth.currentUser;\\n    if (user != null) {\\n      final String? idToken = await user.getIdToken(true);\\n      return await getKey(idToken!);\\n    } else {\\n      return \'\';\\n    }\\n  }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-flutter/sfa_flutter_quick_start/lib/main.dart":"import \'dart:convert\';\\n\\nimport \'package:firebase_auth/firebase_auth.dart\';\\nimport \'package:flutter/material.dart\';\\nimport \'package:firebase_core/firebase_core.dart\';\\nimport \'firebase_options.dart\';\\nimport \'auth_service.dart\';\\nimport \'package:provider/provider.dart\';\\n\\nFuture<void> main() async {\\n  WidgetsFlutterBinding.ensureInitialized();\\n  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\\n  runApp(\\n    ChangeNotifierProvider<AuthService>(\\n      create: (context) => AuthService(),\\n      child: const MyApp(),\\n    ),\\n  );\\n}\\n\\nclass MyApp extends StatelessWidget {\\n  const MyApp({super.key});\\n\\n  // This widget is the root of your application.\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \'SFA Flutter Quick Start\',\\n      theme: ThemeData(\\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue.shade400),\\n        useMaterial3: true,\\n      ),\\n      home: const AuthenticationWrapper(),\\n    );\\n  }\\n}\\n\\nclass AuthenticationWrapper extends StatelessWidget {\\n  const AuthenticationWrapper({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final authService = Provider.of<AuthService>(context);\\n    return StreamBuilder(\\n      stream: authService.authStateChanges,\\n      builder: (context, snapshot) {\\n        if (snapshot.connectionState == ConnectionState.active) {\\n          final User? user = snapshot.data;\\n          if (user == null) {\\n            return const LoginPage();\\n          } else {\\n            return FutureBuilder<bool>(\\n              // Check if the private key is available\\n              future: authService.isPrivateKeyAvailable(),\\n              builder: (BuildContext context, AsyncSnapshot<bool> snapshot) {\\n                switch (snapshot.connectionState) {\\n                  case ConnectionState.none:\\n                  case ConnectionState.waiting:\\n                    return const Center(\\n                      child: CircularProgressIndicator(\\n                        valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),\\n                      ),\\n                    );\\n                  case ConnectionState.done:\\n                    if (snapshot.hasError || snapshot.data == false) {\\n                      // Private key not available, show login page or error message\\n                      return const LoginPage();\\n                    } else {\\n                      // Private key is available, show the Home page\\n                      return const HomePage();\\n                    }\\n                  default:\\n                    return const Text(\'Something went wrong.\');\\n                }\\n              },\\n            );\\n          }\\n        }\\n        return const CircularProgressIndicator();\\n      },\\n    );\\n  }\\n}\\n\\nclass LoginPage extends StatelessWidget {\\n  const LoginPage({super.key});\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: const Text(\'Login\'),\\n      ),\\n      body: Padding(\\n        padding: const EdgeInsets.all(16.0),\\n        child: Center(\\n          child: Column(\\n            mainAxisAlignment: MainAxisAlignment.center,\\n            children: [\\n              ElevatedButton(\\n                onPressed: () async {\\n                  final authService =\\n                      Provider.of<AuthService>(context, listen: false);\\n                  try {\\n                    final UserCredential user =\\n                        await authService.signInWithEmailAndPassword(\\n                            \'sfa.flutter@w3a.link\', \'Testing@123\');\\n                    print(\'User: $user\');\\n                  } catch (e) {\\n                    print(\'Error signing in: $e\');\\n                  }\\n                },\\n                child: const Text(\'Sign In\'),\\n              ),\\n            ],\\n          ),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\nclass HomePage extends StatelessWidget {\\n  const HomePage({super.key});\\n\\n  Future<String> getUserDisplayName(User? user) async {\\n    if (user != null) {\\n      if (user.displayName != null && user.displayName!.isNotEmpty) {\\n        return user.displayName!;\\n      } else if (user.email != null && user.email!.isNotEmpty) {\\n        return user.email!;\\n      }\\n    }\\n    return \'User\';\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final authService = Provider.of<AuthService>(context);\\n    final User? user = authService.getCurrentUser();\\n\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: const Text(\'Home\'),\\n      ),\\n      body: Center(\\n        child: Column(\\n          mainAxisAlignment: MainAxisAlignment.center,\\n          children: [\\n            FutureBuilder<String>(\\n              future: getUserDisplayName(user),\\n              builder: (BuildContext context, AsyncSnapshot<String> snapshot) {\\n                switch (snapshot.connectionState) {\\n                  case ConnectionState.none:\\n                  case ConnectionState.waiting:\\n                    return const CircularProgressIndicator(\\n                      valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),\\n                    );\\n                  case ConnectionState.done:\\n                    if (snapshot.hasError) {\\n                      return Text(\'Error: ${snapshot.error}\');\\n                    }\\n                    return Text(\\n                      \'Welcome, ${snapshot.data}!\',\\n                      style: const TextStyle(\\n                        fontSize: 18,\\n                        fontWeight: FontWeight.bold,\\n                        color: Colors.black,\\n                      ),\\n                    );\\n                  default:\\n                    return const Text(\'Something went wrong.\');\\n                }\\n              },\\n            ),\\n            const SizedBox(height: 16),\\n            FutureBuilder<String?>(\\n              future: authService.getPrivateKey(),\\n              builder: (BuildContext context, AsyncSnapshot<String?> snapshot) {\\n                switch (snapshot.connectionState) {\\n                  case ConnectionState.none:\\n                  case ConnectionState.waiting:\\n                    return const CircularProgressIndicator(\\n                      valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),\\n                    );\\n                  case ConnectionState.done:\\n                    if (snapshot.hasError) {\\n                      return Text(\'Error: ${snapshot.error}\');\\n                    }\\n                    // Parse the JSON response\\n                    final Map<String, dynamic>? privateKeyData =\\n                        json.decode(snapshot.data!);\\n                    // final String privateKey =\\n                    //     privateKeyData?[\'privateKey\']?.toString() ?? \'N/A\';\\n                    final String publicAddress =\\n                        privateKeyData?[\'publicAddress\']?.toString() ?? \'N/A\';\\n\\n                    return Column(\\n                      children: [\\n                        // Text(\\n                        //   \'Private Key: \\\\n$privateKey\',\\n                        //   textAlign: TextAlign.center,\\n                        //   style: const TextStyle(\\n                        //     fontSize: 18,\\n                        //     fontWeight: FontWeight.bold,\\n                        //     color: Colors.black,\\n                        //   ),\\n                        // ),\\n                        const SizedBox(height: 8),\\n                        Text(\\n                          \'Public Address: \\\\n$publicAddress\',\\n                          textAlign: TextAlign.center,\\n                          style: const TextStyle(\\n                            fontSize: 14,\\n                            fontWeight: FontWeight.bold,\\n                            color: Colors.black,\\n                          ),\\n                        ),\\n                      ],\\n                    );\\n                  default:\\n                    return const Text(\'Something went wrong.\');\\n                }\\n              },\\n            ),\\n            const SizedBox(height: 16),\\n            ElevatedButton(\\n              onPressed: () {\\n                // Use the AuthService class to handle sign out\\n                final authService =\\n                    Provider.of<AuthService>(context, listen: false);\\n                authService.signOut();\\n              },\\n              child: const Text(\'Sign Out\'),\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-flutter/sfa_flutter_quick_start/ios/Podfile":"# Uncomment this line to define a global platform for your project\\n# // IMP START - Requirements iOS\\nplatform :ios, \'14.0\'\\n# // IMP END - Requirements iOS\\n\\n# CocoaPods analytics sends network stats synchronously affecting flutter build latency.\\nENV[\'COCOAPODS_DISABLE_STATS\'] = \'true\'\\n\\nproject \'Runner\', {\\n  \'Debug\' => :debug,\\n  \'Profile\' => :release,\\n  \'Release\' => :release,\\n}\\n\\ndef flutter_root\\n  generated_xcode_build_settings_path = File.expand_path(File.join(\'..\', \'Flutter\', \'Generated.xcconfig\'), __FILE__)\\n  unless File.exist?(generated_xcode_build_settings_path)\\n    raise \\"#{generated_xcode_build_settings_path} must exist. If you\'re running pod install manually, make sure flutter pub get is executed first\\"\\n  end\\n\\n  File.foreach(generated_xcode_build_settings_path) do |line|\\n    matches = line.match(/FLUTTER_ROOT\\\\=(.*)/)\\n    return matches[1].strip if matches\\n  end\\n  raise \\"FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get\\"\\nend\\n\\nrequire File.expand_path(File.join(\'packages\', \'flutter_tools\', \'bin\', \'podhelper\'), flutter_root)\\n\\nflutter_ios_podfile_setup\\n\\ntarget \'Runner\' do\\n  use_frameworks!\\n  use_modular_headers!\\n\\n  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))\\n  target \'RunnerTests\' do\\n    inherit! :search_paths\\n  end\\nend\\n\\npost_install do |installer|\\n  installer.pods_project.targets.each do |target|\\n    flutter_additional_ios_build_settings(target)\\n  end\\nend\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-flutter/sfa_flutter_quick_start/android/app/build.gradle":"plugins {\\n    id \\"com.android.application\\"\\n    id \\"kotlin-android\\"\\n    id \\"dev.flutter.flutter-gradle-plugin\\"\\n}\\n\\ndef localProperties = new Properties()\\ndef localPropertiesFile = rootProject.file(\'local.properties\')\\nif (localPropertiesFile.exists()) {\\n    localPropertiesFile.withReader(\'UTF-8\') { reader ->\\n        localProperties.load(reader)\\n    }\\n}\\n\\ndef flutterVersionCode = localProperties.getProperty(\'flutter.versionCode\')\\nif (flutterVersionCode == null) {\\n    flutterVersionCode = \'1\'\\n}\\n\\ndef flutterVersionName = localProperties.getProperty(\'flutter.versionName\')\\nif (flutterVersionName == null) {\\n    flutterVersionName = \'1.0\'\\n}\\n\\nandroid {\\n    namespace \\"com.example.sfa_flutter_quick_start\\"\\n    // IMP START - Requirements Android\\n    compileSdkVersion 33\\n    // IMP END - Requirements Android\\n    ndkVersion flutter.ndkVersion\\n\\n    compileOptions {\\n        sourceCompatibility JavaVersion.VERSION_1_8\\n        targetCompatibility JavaVersion.VERSION_1_8\\n    }\\n\\n    kotlinOptions {\\n        jvmTarget = \'1.8\'\\n    }\\n\\n    sourceSets {\\n        main.java.srcDirs += \'src/main/kotlin\'\\n    }\\n\\n    defaultConfig {\\n        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).\\n        applicationId \\"com.example.sfa_flutter_quick_start\\"\\n        // You can update the following values to match your application needs.\\n        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.\\n        // IMP START - Requirements Android\\n        minSdkVersion 33\\n        targetSdkVersion 33\\n        // IMP END - Requirements Android\\n        versionCode flutterVersionCode.toInteger()\\n        versionName flutterVersionName\\n    }\\n\\n    buildTypes {\\n        release {\\n            // TODO: Add your own signing config for the release build.\\n            // Signing with the debug keys for now, so `flutter run --release` works.\\n            signingConfig signingConfigs.debug\\n        }\\n    }\\n}\\n\\nflutter {\\n    source \'../..\'\\n}\\n\\ndependencies {}\\n","Web3Auth/web3auth-core-kit-examples/main/single-factor-auth-flutter/sfa_flutter_quick_start/android/build.gradle":"buildscript {\\n    ext.kotlin_version = \'1.7.10\'\\n    repositories {\\n        google()\\n        mavenCentral()\\n    }\\n\\n    dependencies {\\n        classpath \\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\\"\\n    }\\n}\\n\\nallprojects {\\n    repositories {\\n        google()\\n        mavenCentral()\\n        maven { url \\"https://jitpack.io\\" }\\n    }\\n}\\n\\nrootProject.buildDir = \'../build\'\\nsubprojects {\\n    project.buildDir = \\"${rootProject.buildDir}/${project.name}\\"\\n}\\nsubprojects {\\n    project.evaluationDependsOn(\':app\')\\n}\\n\\ntasks.register(\\"clean\\", Delete) {\\n    delete rootProject.buildDir\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-react-quick-start/src/App.tsx":"import { useEffect, useState } from \\"react\\";\\n// IMP START - Quick Start\\nimport {\\n  Web3AuthMPCCoreKit,\\n  WEB3AUTH_NETWORK,\\n  IdTokenLoginParams,\\n  TssShareType,\\n  parseToken,\\n  getWebBrowserFactor,\\n  generateFactorKey,\\n  COREKIT_STATUS,\\n  keyToMnemonic,\\n  mnemonicToKey,\\n} from \\"@web3auth/mpc-core-kit\\";\\nimport { CHAIN_NAMESPACES } from \\"@web3auth/base\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\nimport { BN } from \\"bn.js\\";\\n\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { GoogleAuthProvider, getAuth, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\n\\nimport \\"./App.css\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst web3AuthClientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \\"w3a-firebase-demo\\";\\n// IMP END - Verifier Creation\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst coreKitInstance = new Web3AuthMPCCoreKit({\\n  web3AuthClientId,\\n  web3AuthNetwork: WEB3AUTH_NETWORK.MAINNET,\\n  chainConfig,\\n});\\n// IMP END - SDK Initialization\\n\\n// IMP START - Auth Provider Login\\n// Your web app\'s Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n  authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n  projectId: \\"web3auth-oauth-logins\\",\\n  storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n  messagingSenderId: \\"461819774167\\",\\n  appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n};\\n// IMP END - Auth Provider Login\\n\\nfunction App() {\\n  const [coreKitStatus, setCoreKitStatus] = useState<COREKIT_STATUS>(COREKIT_STATUS.NOT_INITIALIZED);\\n  const [backupFactorKey, setBackupFactorKey] = useState<string>(\\"\\");\\n  const [mnemonicFactor, setMnemonicFactor] = useState<string>(\\"\\");\\n\\n  // Firebase Initialisation\\n  const app = initializeApp(firebaseConfig);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      // IMP START - SDK Initialization\\n      await coreKitInstance.init();\\n      // IMP END - SDK Initialization\\n\\n      setCoreKitStatus(coreKitInstance.status);\\n    };\\n    init();\\n  }, []);\\n\\n  // IMP START - Auth Provider Login\\n  const signInWithGoogle = async (): Promise<UserCredential> => {\\n    try {\\n      const auth = getAuth(app);\\n      const googleProvider = new GoogleAuthProvider();\\n      const res = await signInWithPopup(auth, googleProvider);\\n      console.log(res);\\n      return res;\\n    } catch (err) {\\n      console.error(err);\\n      throw err;\\n    }\\n  };\\n  // IMP END - Auth Provider Login\\n\\n  const login = async () => {\\n    try {\\n      if (!coreKitInstance) {\\n        throw new Error(\\"initiated to login\\");\\n      }\\n      // IMP START - Auth Provider Login\\n      const loginRes = await signInWithGoogle();\\n      const idToken = await loginRes.user.getIdToken(true);\\n      const parsedToken = parseToken(idToken);\\n      // IMP END - Auth Provider Login\\n\\n      // IMP START - Login\\n      const idTokenLoginParams = {\\n        verifier,\\n        verifierId: parsedToken.sub,\\n        idToken,\\n      } as IdTokenLoginParams;\\n\\n      await coreKitInstance.loginWithJWT(idTokenLoginParams);\\n      // IMP END - Login\\n\\n      // IMP START - Recover MFA Enabled Account\\n      if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n        uiConsole(\\n          \\"required more shares, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\"\\n        );\\n      }\\n      // IMP END - Recover MFA Enabled Account\\n\\n      setCoreKitStatus(coreKitInstance.status);\\n    } catch (err) {\\n      uiConsole(err);\\n    }\\n  };\\n  // IMP START - Recover MFA Enabled Account\\n  const inputBackupFactorKey = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance not found\\");\\n    }\\n    if (!backupFactorKey) {\\n      throw new Error(\\"backupFactorKey not found\\");\\n    }\\n    const factorKey = new BN(backupFactorKey, \\"hex\\");\\n    await coreKitInstance.inputFactorKey(factorKey);\\n\\n    setCoreKitStatus(coreKitInstance.status);\\n\\n    if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n      uiConsole(\\n        \\"required more shares even after inputing backup factor key, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\"\\n      );\\n    }\\n  };\\n  // IMP END - Recover MFA Enabled Account\\n\\n  // IMP START - Enable Multi Factor Authentication\\n  const enableMFA = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    const factorKey = await coreKitInstance.enableMFA({});\\n    const factorKeyMnemonic = keyToMnemonic(factorKey);\\n\\n    uiConsole(\\"MFA enabled, device factor stored in local store, deleted hashed cloud key, your backup factor key: \\", factorKeyMnemonic);\\n  };\\n  // IMP END - Enable Multi Factor Authentication\\n\\n  const keyDetails = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance not found\\");\\n    }\\n    uiConsole(coreKitInstance.getKeyDetails());\\n  };\\n\\n  const getDeviceFactor = async () => {\\n    try {\\n      const factorKey = await getWebBrowserFactor(coreKitInstance!);\\n      setBackupFactorKey(factorKey!);\\n      uiConsole(\\"Device share: \\", factorKey);\\n    } catch (e) {\\n      uiConsole(e);\\n    }\\n  };\\n\\n  const exportMnemonicFactor = async (): Promise<void> => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    uiConsole(\\"export share type: \\", TssShareType.RECOVERY);\\n    const factorKey = generateFactorKey();\\n    await coreKitInstance.createFactor({\\n      shareType: TssShareType.RECOVERY,\\n      factorKey: factorKey.private,\\n    });\\n    const factorKeyMnemonic = await keyToMnemonic(factorKey.private.toString(\\"hex\\"));\\n    uiConsole(\\"Export factor key mnemonic: \\", factorKeyMnemonic);\\n  };\\n\\n  const MnemonicToFactorKeyHex = async (mnemonic: string) => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    try {\\n      const factorKey = await mnemonicToKey(mnemonic);\\n      setBackupFactorKey(factorKey);\\n      return factorKey;\\n    } catch (error) {\\n      uiConsole(error);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = coreKitInstance.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await coreKitInstance.logout();\\n    // IMP END - Logout\\n    setCoreKitStatus(coreKitInstance.status);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!coreKitInstance) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!coreKitInstance) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!coreKitInstance) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  const criticalResetAccount = async (): Promise<void> => {\\n    // This is a critical function that should only be used for testing purposes\\n    // Resetting your account means clearing all the metadata associated with it from the metadata server\\n    // The key details will be deleted from our server and you will not be able to recover your account\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    //@ts-ignore\\n    // if (selectedNetwork === WEB3AUTH_NETWORK.MAINNET) {\\n    //   throw new Error(\\"reset account is not recommended on mainnet\\");\\n    // }\\n    await coreKitInstance.tKey.storageLayer.setMetadata({\\n      privKey: new BN(coreKitInstance.metadataKey!, \\"hex\\"),\\n      input: { message: \\"KEY_NOT_FOUND\\" },\\n    });\\n    uiConsole(\\"reset\\");\\n    logout();\\n  };\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n    console.log(...args);\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={keyDetails} className=\\"card\\">\\n            Key Details\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={enableMFA} className=\\"card\\">\\n            Enable MFA\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={criticalResetAccount} className=\\"card\\">\\n            [CRITICAL] Reset Account\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={exportMnemonicFactor} className=\\"card\\">\\n            Generate Backup (Mnemonic)\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <>\\n      <button onClick={login} className=\\"card\\">\\n        Login\\n      </button>\\n      <div className={coreKitStatus === COREKIT_STATUS.REQUIRED_SHARE ? \\"\\" : \\"disabledDiv\\"}>\\n        <button onClick={() => getDeviceFactor()} className=\\"card\\">\\n          Get Device Factor\\n        </button>\\n        <label>Backup/ Device Factor:</label>\\n        <input value={backupFactorKey} onChange={(e) => setBackupFactorKey(e.target.value)}></input>\\n        <button onClick={() => inputBackupFactorKey()} className=\\"card\\">\\n          Input Backup Factor Key\\n        </button>\\n        <button onClick={criticalResetAccount} className=\\"card\\">\\n          [CRITICAL] Reset Account\\n        </button>\\n        <label>Recover Using Mnemonic Factor Key:</label>\\n        <input value={mnemonicFactor} onChange={(e) => setMnemonicFactor(e.target.value)}></input>\\n        <button onClick={() => MnemonicToFactorKeyHex(mnemonicFactor)} className=\\"card\\">\\n          Get Recovery Factor Key using Mnemonic\\n        </button>\\n      </div>\\n    </>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/mpc-core-kit/\\" rel=\\"noreferrer\\">\\n          Web3Auth MPC Core Kit\\n        </a>{\\" \\"}\\n        React Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{coreKitStatus === COREKIT_STATUS.LOGGED_IN ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/mpc-core-kit-web/quick-starts/mpc-core-kit-react-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-react-quick-start/package.json":"{\\n  \\"name\\": \\"mpc-core-kit-react-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@types/node\\": \\"^18.11.18\\",\\n    \\"@types/react\\": \\"^18.0.26\\",\\n    \\"@types/react-dom\\": \\"^18.0.10\\",\\n    \\"@web3auth/base\\": \\"^7.2.0\\",\\n    \\"@web3auth/mpc-core-kit\\": \\"^1.1.0\\",\\n    \\"bn.js\\": \\"^5.2.1\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"react\\": \\"^18.2.0\\",\\n    \\"react-dom\\": \\"^18.2.0\\",\\n    \\"react-scripts\\": \\"5.0.1\\",\\n    \\"typescript\\": \\"^4.9.4\\",\\n    \\"web-vitals\\": \\"^3.1.0\\",\\n    \\"web3\\": \\"^1.8.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"eslintConfig\\": {\\n    \\"extends\\": [\\n      \\"react-app\\",\\n      \\"react-app/jest\\"\\n    ]\\n  },\\n  \\"browserslist\\": {\\n    \\"production\\": [\\n      \\"chrome >= 67\\",\\n      \\"edge >= 79\\",\\n      \\"firefox >= 68\\",\\n      \\"opera >= 54\\",\\n      \\"safari >= 14\\"\\n    ],\\n    \\"development\\": [\\n      \\"last 1 chrome version\\",\\n      \\"last 1 firefox version\\",\\n      \\"last 1 safari version\\"\\n    ]\\n  },\\n  \\"devDependencies\\": {\\n    \\"assert\\": \\"^2.0.0\\",\\n    \\"browserify-zlib\\": \\"^0.2.0\\",\\n    \\"buffer\\": \\"^6.0.3\\",\\n    \\"crypto-browserify\\": \\"^3.12.0\\",\\n    \\"eslint-config-react-app\\": \\"^7.0.1\\",\\n    \\"https-browserify\\": \\"^1.0.0\\",\\n    \\"os-browserify\\": \\"^0.3.0\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"react-app-rewired\\": \\"^2.2.1\\",\\n    \\"source-map-loader\\": \\"^4.0.1\\",\\n    \\"stream-browserify\\": \\"^3.0.0\\",\\n    \\"stream-http\\": \\"^3.2.0\\",\\n    \\"url\\": \\"^0.11.1\\"\\n  },\\n  \\"scripts\\": {\\n    \\"start\\": \\"react-app-rewired start\\",\\n    \\"build\\": \\"react-app-rewired build\\",\\n    \\"test\\": \\"react-app-rewired test\\",\\n    \\"eject\\": \\"react-scripts eject\\",\\n    \\"lint\\": \\"react-scripts lint\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-react-quick-start/config-overrides.js":"const webpack = require(\\"webpack\\");\\n\\nmodule.exports = function override(config) {\\n  const fallback = config.resolve.fallback || {};\\n  // IMP START - Bundler Issues\\n  Object.assign(fallback, {\\n\\t\\tcrypto: require.resolve(\'crypto-browserify\'),\\n\\t\\tstream: require.resolve(\'stream-browserify\'),\\n\\t\\tassert: require.resolve(\'assert\'),\\n\\t\\thttp: require.resolve(\'stream-http\'),\\n\\t\\thttps: require.resolve(\'https-browserify\'),\\n\\t\\tos: require.resolve(\'os-browserify\'),\\n\\t\\turl: require.resolve(\'url\'),\\n\\t\\tzlib: require.resolve(\\"browserify-zlib\\")\\n  });\\n  config.resolve.fallback = fallback;\\n  config.plugins = (config.plugins || []).concat([\\n    new webpack.ProvidePlugin({\\n      process: \\"process/browser\\",\\n      Buffer: [\\"buffer\\", \\"Buffer\\"],\\n    }),\\n  ]);\\n  // IMP END - Bundler Issues\\n  config.ignoreWarnings = [/Failed to parse source map/];\\n  config.module.rules.push({\\n    test: /\\\\.(js|mjs|jsx)$/,\\n    enforce: \\"pre\\",\\n    loader: require.resolve(\\"source-map-loader\\"),\\n    resolve: {\\n      fullySpecified: false,\\n    },\\n  });\\n  return config;\\n};\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-nextjs-quick-start/app/page.tsx":"/* eslint-disable @typescript-eslint/no-use-before-define */\\n\\n\\"use client\\";\\n\\nimport { CHAIN_NAMESPACES } from \\"@web3auth/base\\";\\n// IMP START - Quick Start\\nimport {\\n  COREKIT_STATUS,\\n  generateFactorKey,\\n  getWebBrowserFactor,\\n  IdTokenLoginParams,\\n  keyToMnemonic,\\n  mnemonicToKey,\\n  parseToken,\\n  TssShareType,\\n  WEB3AUTH_NETWORK,\\n  Web3AuthMPCCoreKit,\\n} from \\"@web3auth/mpc-core-kit\\";\\n// eslint-disable-next-line import/no-extraneous-dependencies\\nimport { BN } from \\"bn.js\\";\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { getAuth, GoogleAuthProvider, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\nimport { useEffect, useState } from \\"react\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst web3AuthClientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \\"w3a-firebase-demo\\";\\n// IMP END - Verifier Creation\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nlet coreKitInstance: any;\\nif (typeof window !== \\"undefined\\") {\\n  coreKitInstance = new Web3AuthMPCCoreKit({\\n    web3AuthClientId,\\n    web3AuthNetwork: WEB3AUTH_NETWORK.MAINNET,\\n    chainConfig,\\n  });\\n}\\n\\n// IMP END - SDK Initialization\\n\\n// IMP START - Auth Provider Login\\n// Your web app\'s Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n  authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n  projectId: \\"web3auth-oauth-logins\\",\\n  storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n  messagingSenderId: \\"461819774167\\",\\n  appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n};\\n// IMP END - Auth Provider Login\\n\\nfunction App() {\\n  const [coreKitStatus, setCoreKitStatus] = useState<COREKIT_STATUS>(COREKIT_STATUS.NOT_INITIALIZED);\\n  const [backupFactorKey, setBackupFactorKey] = useState<string>(\\"\\");\\n  const [mnemonicFactor, setMnemonicFactor] = useState<string>(\\"\\");\\n\\n  // Firebase Initialisation\\n  const app = initializeApp(firebaseConfig);\\n\\n  useEffect(() => {\\n    const init = async () => {\\n      // IMP START - SDK Initialization\\n      await coreKitInstance.init();\\n      // IMP END - SDK Initialization\\n\\n      setCoreKitStatus(coreKitInstance.status);\\n    };\\n    init();\\n  }, []);\\n\\n  // IMP START - Auth Provider Login\\n  const signInWithGoogle = async (): Promise<UserCredential> => {\\n    try {\\n      const auth = getAuth(app);\\n      const googleProvider = new GoogleAuthProvider();\\n      const res = await signInWithPopup(auth, googleProvider);\\n      console.log(res);\\n      return res;\\n    } catch (err) {\\n      console.error(err);\\n      throw err;\\n    }\\n  };\\n  // IMP END - Auth Provider Login\\n\\n  const login = async () => {\\n    try {\\n      if (!coreKitInstance) {\\n        throw new Error(\\"initiated to login\\");\\n      }\\n      // IMP START - Auth Provider Login\\n      const loginRes = await signInWithGoogle();\\n      const idToken = await loginRes.user.getIdToken(true);\\n      const parsedToken = parseToken(idToken);\\n      // IMP END - Auth Provider Login\\n\\n      // IMP START - Login\\n      const idTokenLoginParams = {\\n        verifier,\\n        verifierId: parsedToken.sub,\\n        idToken,\\n      } as IdTokenLoginParams;\\n\\n      await coreKitInstance.loginWithJWT(idTokenLoginParams);\\n      // IMP END - Login\\n\\n      // IMP START - Recover MFA Enabled Account\\n      if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n        uiConsole(\\n          \\"required more shares, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\"\\n        );\\n      }\\n      // IMP END - Recover MFA Enabled Account\\n\\n      setCoreKitStatus(coreKitInstance.status);\\n    } catch (err) {\\n      uiConsole(err);\\n    }\\n  };\\n  // IMP START - Recover MFA Enabled Account\\n  const inputBackupFactorKey = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance not found\\");\\n    }\\n    if (!backupFactorKey) {\\n      throw new Error(\\"backupFactorKey not found\\");\\n    }\\n    const factorKey = new BN(backupFactorKey, \\"hex\\");\\n    await coreKitInstance.inputFactorKey(factorKey);\\n\\n    setCoreKitStatus(coreKitInstance.status);\\n\\n    if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n      uiConsole(\\n        \\"required more shares even after inputing backup factor key, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\"\\n      );\\n    }\\n  };\\n  // IMP END - Recover MFA Enabled Account\\n\\n  // IMP START - Enable Multi Factor Authentication\\n  const enableMFA = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    const factorKey = await coreKitInstance.enableMFA({});\\n    const factorKeyMnemonic = keyToMnemonic(factorKey);\\n\\n    uiConsole(\\"MFA enabled, device factor stored in local store, deleted hashed cloud key, your backup factor key: \\", factorKeyMnemonic);\\n  };\\n  // IMP END - Enable Multi Factor Authentication\\n\\n  const keyDetails = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance not found\\");\\n    }\\n    uiConsole(coreKitInstance.getKeyDetails());\\n  };\\n\\n  const getDeviceFactor = async () => {\\n    try {\\n      const factorKey = await getWebBrowserFactor(coreKitInstance!);\\n      setBackupFactorKey(factorKey!);\\n      uiConsole(\\"Device share: \\", factorKey);\\n    } catch (e) {\\n      uiConsole(e);\\n    }\\n  };\\n\\n  const exportMnemonicFactor = async (): Promise<void> => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    uiConsole(\\"export share type: \\", TssShareType.RECOVERY);\\n    const factorKey = generateFactorKey();\\n    await coreKitInstance.createFactor({\\n      shareType: TssShareType.RECOVERY,\\n      factorKey: factorKey.private,\\n    });\\n    const factorKeyMnemonic = await keyToMnemonic(factorKey.private.toString(\\"hex\\"));\\n    uiConsole(\\"Export factor key mnemonic: \\", factorKeyMnemonic);\\n  };\\n\\n  const MnemonicToFactorKeyHex = async (mnemonic: string) => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    try {\\n      const factorKey = await mnemonicToKey(mnemonic);\\n      setBackupFactorKey(factorKey);\\n      return factorKey;\\n    } catch (error) {\\n      uiConsole(error);\\n    }\\n  };\\n\\n  const getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = coreKitInstance.getUserInfo();\\n    // IMP END - Get User Information\\n    uiConsole(user);\\n  };\\n\\n  const logout = async () => {\\n    // IMP START - Logout\\n    await coreKitInstance.logout();\\n    // IMP END - Logout\\n    setCoreKitStatus(coreKitInstance.status);\\n    uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  const getAccounts = async () => {\\n    if (!coreKitInstance) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    uiConsole(address);\\n  };\\n\\n  const getBalance = async () => {\\n    if (!coreKitInstance) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    uiConsole(balance);\\n  };\\n\\n  const signMessage = async () => {\\n    if (!coreKitInstance) {\\n      uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  const criticalResetAccount = async (): Promise<void> => {\\n    // This is a critical function that should only be used for testing purposes\\n    // Resetting your account means clearing all the metadata associated with it from the metadata server\\n    // The key details will be deleted from our server and you will not be able to recover your account\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\\n    // @ts-ignore\\n    // if (selectedNetwork === WEB3AUTH_NETWORK.MAINNET) {\\n    //   throw new Error(\\"reset account is not recommended on mainnet\\");\\n    // }\\n    await coreKitInstance.tKey.storageLayer.setMetadata({\\n      privKey: new BN(coreKitInstance.metadataKey!, \\"hex\\"),\\n      input: { message: \\"KEY_NOT_FOUND\\" },\\n    });\\n    uiConsole(\\"reset\\");\\n    logout();\\n  };\\n\\n  function uiConsole(...args: any[]): void {\\n    const el = document.querySelector(\\"#console>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n    console.log(...args);\\n  }\\n\\n  const loggedInView = (\\n    <>\\n      <div className=\\"flex-container\\">\\n        <div>\\n          <button onClick={getUserInfo} className=\\"card\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={keyDetails} className=\\"card\\">\\n            Key Details\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={enableMFA} className=\\"card\\">\\n            Enable MFA\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getAccounts} className=\\"card\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={getBalance} className=\\"card\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={signMessage} className=\\"card\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={logout} className=\\"card\\">\\n            Log Out\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={criticalResetAccount} className=\\"card\\">\\n            [CRITICAL] Reset Account\\n          </button>\\n        </div>\\n        <div>\\n          <button onClick={exportMnemonicFactor} className=\\"card\\">\\n            Generate Backup (Mnemonic)\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n\\n  const unloggedInView = (\\n    <>\\n      <button onClick={login} className=\\"card\\">\\n        Login\\n      </button>\\n      <div className={coreKitStatus === COREKIT_STATUS.REQUIRED_SHARE ? \\"\\" : \\"disabledDiv\\"}>\\n        <button onClick={() => getDeviceFactor()} className=\\"card\\">\\n          Get Device Factor\\n        </button>\\n        <label>Backup/ Device Factor:</label>\\n        <input value={backupFactorKey} onChange={(e) => setBackupFactorKey(e.target.value)}></input>\\n        <button onClick={() => inputBackupFactorKey()} className=\\"card\\">\\n          Input Backup Factor Key\\n        </button>\\n        <button onClick={criticalResetAccount} className=\\"card\\">\\n          [CRITICAL] Reset Account\\n        </button>\\n        <label>Recover Using Mnemonic Factor Key:</label>\\n        <input value={mnemonicFactor} onChange={(e) => setMnemonicFactor(e.target.value)}></input>\\n        <button onClick={() => MnemonicToFactorKeyHex(mnemonicFactor)} className=\\"card\\">\\n          Get Recovery Factor Key using Mnemonic\\n        </button>\\n      </div>\\n    </>\\n  );\\n\\n  return (\\n    <div className=\\"container\\">\\n      <h1 className=\\"title\\">\\n        <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/mpc-core-kit/\\" rel=\\"noreferrer\\">\\n          Web3Auth MPC Core Kit\\n        </a>{\\" \\"}\\n        React Quick Start\\n      </h1>\\n\\n      <div className=\\"grid\\">{coreKitStatus === COREKIT_STATUS.LOGGED_IN ? loggedInView : unloggedInView}</div>\\n      <div id=\\"console\\" style={{ whiteSpace: \\"pre-line\\" }}>\\n        <p style={{ whiteSpace: \\"pre-line\\" }}></p>\\n      </div>\\n\\n      <footer className=\\"footer\\">\\n        <a\\n          href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/mpc-core-kit-web/quick-starts/mpc-core-kit-react-quick-start\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n        >\\n          Source code\\n        </a>\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-nextjs-quick-start/package.json":"{\\n  \\"name\\": \\"mpc-core-kit-nextjs-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"dev\\": \\"next dev\\",\\n    \\"build\\": \\"next build\\",\\n    \\"start\\": \\"next start\\",\\n    \\"lint\\": \\"next lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.2.0\\",\\n    \\"@web3auth/mpc-core-kit\\": \\"^1.1.0\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"next\\": \\"13.4.9\\",\\n    \\"react\\": \\"18.2.0\\",\\n    \\"react-dom\\": \\"18.2.0\\",\\n    \\"web3\\": \\"^1.8.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@toruslabs/eslint-config-typescript\\": \\"^3.0.3\\",\\n    \\"@types/elliptic\\": \\"^6.4.14\\",\\n    \\"@types/node\\": \\"20.4.1\\",\\n    \\"@types/react\\": \\"18.2.14\\",\\n    \\"@types/react-dom\\": \\"18.2.7\\",\\n    \\"eslint\\": \\"8.44.0\\",\\n    \\"eslint-config-next\\": \\"13.4.9\\",\\n    \\"typescript\\": \\"5.1.6\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-angular-quick-start/src/app/app.component.ts":"import { Component } from \\"@angular/core\\";\\n// IMP START - Quick Start\\nimport {\\n  COREKIT_STATUS,\\n  generateFactorKey,\\n  getWebBrowserFactor,\\n  IdTokenLoginParams,\\n  keyToMnemonic,\\n  mnemonicToKey,\\n  parseToken,\\n  TssShareType,\\n  WEB3AUTH_NETWORK,\\n  Web3AuthMPCCoreKit,\\n} from \\"@web3auth/mpc-core-kit\\";\\nimport { CHAIN_NAMESPACES } from \\"@web3auth/base\\";\\n// IMP END - Quick Start\\nimport Web3 from \\"web3\\";\\nimport { BN } from \\"bn.js\\";\\n// IMP START - Auth Provider Login\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { getAuth, GoogleAuthProvider, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\n// IMP END - Auth Provider Login\\n\\n// IMP START - SDK Initialization\\n// IMP START - Dashboard Registration\\nconst web3AuthClientId = \\"BEglQSgt4cUWcj6SKRdu5QkOXTsePmMcusG5EAoyjyOYKlVRjIF1iCNnMOTfpzCiunHRrMui8TIwQPXdkQ8Yxuk\\"; // get from https://dashboard.web3auth.io\\n// IMP END - Dashboard Registration\\n\\n// IMP START - Verifier Creation\\nconst verifier = \\"w3a-firebase-demo\\";\\n// IMP END - Verifier Creation\\n\\nconst chainConfig = {\\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\\n  chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n  rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n  displayName: \\"Ethereum Mainnet\\",\\n  blockExplorer: \\"https://etherscan.io/\\",\\n  ticker: \\"ETH\\",\\n  tickerName: \\"Ethereum\\",\\n};\\n\\nconst coreKitInstance = new Web3AuthMPCCoreKit({\\n  web3AuthClientId,\\n  web3AuthNetwork: WEB3AUTH_NETWORK.MAINNET,\\n  chainConfig,\\n});\\n// IMP END - SDK Initialization\\n\\n// IMP START - Auth Provider Login\\n// Your web app\'s Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n  authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n  projectId: \\"web3auth-oauth-logins\\",\\n  storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n  messagingSenderId: \\"461819774167\\",\\n  appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n};\\n// IMP END - Auth Provider Login\\n\\n@Component({\\n  selector: \\"app-root\\",\\n  templateUrl: \\"./app.component.html\\",\\n  styleUrls: [\\"./app.component.css\\"],\\n})\\nexport class AppComponent {\\n  title = \\"Web3Auth tKey Angular Quick Start\\";\\n\\n  coreKitStatus: COREKIT_STATUS = COREKIT_STATUS.NOT_INITIALIZED;\\n\\n  backupFactorKey = \\"\\";\\n\\n  mnemonicFactor = \\"\\";\\n\\n  getBackupFactorKeyInputEvent(event: any) {\\n    this.backupFactorKey = event.target.value;\\n  }\\n\\n  getMnemonicFactorInputEvent(event: any) {\\n    this.mnemonicFactor = event.target.value;\\n  }\\n\\n  app = initializeApp(firebaseConfig);\\n\\n  async ngOnInit() {\\n    const init = async () => {\\n      try {\\n        // IMP START - SDK Initialization\\n        await coreKitInstance.init();\\n        // IMP END - SDK Initialization\\n\\n        this.coreKitStatus = coreKitInstance.status;\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    };\\n\\n    init();\\n  }\\n\\n  // IMP START - Auth Provider Login\\n  signInWithGoogle = async (): Promise<UserCredential> => {\\n    try {\\n      const auth = getAuth(this.app);\\n      const googleProvider = new GoogleAuthProvider();\\n      const res = await signInWithPopup(auth, googleProvider);\\n      console.log(res);\\n      return res;\\n    } catch (err) {\\n      console.error(err);\\n      throw err;\\n    }\\n  };\\n  // IMP END - Auth Provider Login\\n\\n  login = async () => {\\n    try {\\n      if (!coreKitInstance) {\\n        throw new Error(\\"initiated to login\\");\\n      }\\n      // IMP START - Auth Provider Login\\n      const loginRes = await this.signInWithGoogle();\\n      const idToken = await loginRes.user.getIdToken(true);\\n      const parsedToken = parseToken(idToken);\\n      // IMP END - Auth Provider Login\\n\\n      // IMP START - Login\\n      const idTokenLoginParams = {\\n        verifier,\\n        verifierId: parsedToken.sub,\\n        idToken,\\n      } as IdTokenLoginParams;\\n\\n      await coreKitInstance.loginWithJWT(idTokenLoginParams);\\n      // IMP END - Login\\n\\n      // IMP START - Recover MFA Enabled Account\\n      if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n        this.uiConsole(\\n          \\"required more shares, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\"\\n        );\\n      }\\n      // IMP END - Recover MFA Enabled Account\\n\\n      this.coreKitStatus = coreKitInstance.status;\\n    } catch (err) {\\n      this.uiConsole(err);\\n    }\\n  };\\n\\n  // IMP START - Recover MFA Enabled Account\\n  inputBackupFactorKey = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance not found\\");\\n    }\\n    if (!this.backupFactorKey) {\\n      throw new Error(\\"backupFactorKey not found\\");\\n    }\\n    const factorKey = new BN(this.backupFactorKey, \\"hex\\");\\n    await coreKitInstance.inputFactorKey(factorKey);\\n\\n    this.coreKitStatus = coreKitInstance.status;\\n\\n    if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n      this.uiConsole(\\n        \\"required more shares even after inputing backup factor key, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\"\\n      );\\n    }\\n  };\\n  // IMP END - Recover MFA Enabled Account\\n\\n  // IMP START - Enable Multi Factor Authentication\\n  enableMFA = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    const factorKey = await coreKitInstance.enableMFA({});\\n    const factorKeyMnemonic = keyToMnemonic(factorKey);\\n\\n    this.uiConsole(\\"MFA enabled, device factor stored in local store, deleted hashed cloud key, your backup factor key: \\", factorKeyMnemonic);\\n  };\\n  // IMP END - Enable Multi Factor Authentication\\n\\n  keyDetails = async () => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance not found\\");\\n    }\\n    this.uiConsole(coreKitInstance.getKeyDetails());\\n  };\\n\\n  getDeviceFactor = async () => {\\n    try {\\n      const factorKey = await getWebBrowserFactor(coreKitInstance!);\\n      this.backupFactorKey = factorKey!;\\n      this.uiConsole(\\"Device share: \\", factorKey);\\n    } catch (e) {\\n      this.uiConsole(e);\\n    }\\n  };\\n\\n  exportMnemonicFactor = async (): Promise<void> => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    this.uiConsole(\\"export share type: \\", TssShareType.RECOVERY);\\n    const factorKey = generateFactorKey();\\n    await coreKitInstance.createFactor({\\n      shareType: TssShareType.RECOVERY,\\n      factorKey: factorKey.private,\\n    });\\n    const factorKeyMnemonic = await keyToMnemonic(factorKey.private.toString(\\"hex\\"));\\n    this.uiConsole(\\"Export factor key mnemonic: \\", factorKeyMnemonic);\\n  };\\n\\n  MnemonicToFactorKeyHex = async (mnemonic: string) => {\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    try {\\n      const factorKey = await mnemonicToKey(mnemonic);\\n      this.backupFactorKey = factorKey;\\n      return factorKey;\\n    } catch (error) {\\n      this.uiConsole(error);\\n      return null;\\n    }\\n  };\\n\\n  getUserInfo = async () => {\\n    // IMP START - Get User Information\\n    const user = coreKitInstance.getUserInfo();\\n    // IMP END - Get User Information\\n    this.uiConsole(user);\\n  };\\n\\n  logout = async () => {\\n    // IMP START - Logout\\n    await coreKitInstance.logout();\\n    // IMP END - Logout\\n    this.coreKitStatus = coreKitInstance.status;\\n    this.uiConsole(\\"logged out\\");\\n  };\\n\\n  // IMP START - Blockchain Calls\\n  getAccounts = async () => {\\n    if (!coreKitInstance) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = await web3.eth.getAccounts();\\n    this.uiConsole(address);\\n  };\\n\\n  getBalance = async () => {\\n    if (!coreKitInstance) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const address = (await web3.eth.getAccounts())[0];\\n\\n    // Get user\'s balance in ether\\n    const balance = web3.utils.fromWei(\\n      await web3.eth.getBalance(address), // Balance is in wei\\n      \\"ether\\"\\n    );\\n    this.uiConsole(balance);\\n  };\\n\\n  signMessage = async () => {\\n    if (!coreKitInstance) {\\n      this.uiConsole(\\"provider not initialized yet\\");\\n      return;\\n    }\\n    const web3 = new Web3(coreKitInstance.provider as any);\\n\\n    // Get user\'s Ethereum public address\\n    const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n    const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n    // Sign the message\\n    const signedMessage = await web3.eth.personal.sign(\\n      originalMessage,\\n      fromAddress,\\n      \\"test password!\\" // configure your own password here.\\n    );\\n    this.uiConsole(signedMessage);\\n  };\\n  // IMP END - Blockchain Calls\\n\\n  criticalResetAccount = async (): Promise<void> => {\\n    // This is a critical function that should only be used for testing purposes\\n    // Resetting your account means clearing all the metadata associated with it from the metadata server\\n    // The key details will be deleted from our server and you will not be able to recover your account\\n    if (!coreKitInstance) {\\n      throw new Error(\\"coreKitInstance is not set\\");\\n    }\\n    // @ts-ignore\\n    // if (selectedNetwork === WEB3AUTH_NETWORK.MAINNET) {\\n    //   throw new Error(\\"reset account is not recommended on mainnet\\");\\n    // }\\n    await coreKitInstance.tKey.storageLayer.setMetadata({\\n      privKey: new BN(coreKitInstance.metadataKey!, \\"hex\\"),\\n      input: { message: \\"KEY_NOT_FOUND\\" },\\n    });\\n    this.uiConsole(\\"reset\\");\\n    this.logout();\\n  };\\n\\n  uiConsole(...args: any[]) {\\n    const el = document.querySelector(\\"#console-ui>p\\");\\n    if (el) {\\n      el.innerHTML = JSON.stringify(args || {}, null, 2);\\n    }\\n  }\\n}\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-angular-quick-start/src/app/app.component.html":"<div class=\\"content\\">\\n  <h1 class=\\"title\\">\\n    <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/mpc-core-kit/\\">Web3Auth  MPC Core Kit</a> Angular\\n    Quick Start\\n  </h1>\\n  <div class=\\"setting\\">\\n    <div\\n      *ngIf=\\"coreKitStatus === \'LOGGED_IN\'; else elseBlock\\"\\n      class=\\"card-container\\"\\n    >\\n      <button class=\\"card card-small\\" (click)=\\"getUserInfo()\\">\\n        Get User Info\\n      </button>\\n      <button (click)=\\"keyDetails()\\" class=\'card card-small\'>\\n        Key Details\\n      </button>\\n      <button (click)=\\"enableMFA()\\" class=\'card card-small\'>\\n        Enable MFA\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getAccounts()\\">\\n        Get Accounts\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"getBalance()\\">\\n        Get Balance\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"signMessage()\\">\\n        Sign Message\\n      </button>\\n      <button class=\\"card card-small\\" (click)=\\"logout()\\">Log Out</button>\\n      <button (click)=\\"criticalResetAccount()\\" class=\\"card card-small\\">\\n        [CRITICAL] Reset Account\\n      </button>\\n      <button (click)=\\"exportMnemonicFactor()\\" class=\'card card-small\'>\\n        Generate Backup (Mnemonic)\\n      </button>\\n    </div>\\n    <ng-template #elseBlock>\\n      <div class=\\"card-container\\">\\n        <button class=\\"card card-small\\" (click)=\\"login()\\">Login</button>\\n        <div class=\\"card-container\\" *ngIf=\\"coreKitStatus === \'REQUIRED_SHARE\'\\" >\\n          <button (click)=\\"getDeviceFactor()\\" class=\\"card card-small\\">\\n            Get Device Factor\\n          </button>\\n          <label>Backup/ Device Factor:</label>\\n          <input name=\\"backupFactorKeyInputField\\" [(ngModel)]=\\"backupFactorKey\\" (ngModelChange)=\\"getBackupFactorKeyInputEvent($event)\\" />\\n          <button (click)=\\"inputBackupFactorKey()\\" class=\\"card card-small\\">\\n            Input Backup Factor Key\\n          </button>\\n          <button (click)=\\"criticalResetAccount()\\" class=\\"card card-small\\">\\n            [CRITICAL] Reset Account\\n          </button>\\n          <label>Recover Using Mnemonic Factor Key:</label>\\n            <input name=\\"MnemonicFactorInputField\\" [(ngModel)]=\\"mnemonicFactor\\" (ngModelChange)=\\"getMnemonicFactorInputEvent($event)\\" />\\n            <button (click)=\\"MnemonicToFactorKeyHex(mnemonicFactor)\\" class=\\"card card-small\\">\\n              Get Recovery Factor Key using Mnemonic\\n            </button>\\n          </div>\\n      </div>\\n    </ng-template>\\n    <div class=\\"console\\" id=\\"console-ui\\">\\n      <p class=\\"code\\">Logged In</p>\\n    </div>\\n  </div>\\n  <footer class=\\"footer\\">\\n    <a\\n      href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/mpc-core-kit-web/quick-starts/mpc-core-kit-angular-quick-start\\"\\n      target=\\"_blank\\"\\n      rel=\\"noopener noreferrer\\"\\n    >\\n      Source code\\n    </a>\\n  </footer>\\n</div>\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-angular-quick-start/src/polyfills.ts":"/* eslint-disable @typescript-eslint/no-var-requires */\\nimport \\"zone.js\\"; // Included with Angular CLI.\\n\\n// IMP START - Bundler Issues\\n(window as any).global = window;\\nglobal.Buffer = global.Buffer || require(\\"buffer\\").Buffer;\\nglobal.process = global.process || require(\\"process\\");\\n// IMP END - Bundler Issues\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-angular-quick-start/package.json":"{\\n  \\"name\\": \\"mpc-core-kit-angular-quick-start\\",\\n  \\"version\\": \\"0.0.0\\",\\n  \\"scripts\\": {\\n    \\"ng\\": \\"ng\\",\\n    \\"start\\": \\"ng serve\\",\\n    \\"build\\": \\"ng build\\",\\n    \\"watch\\": \\"ng build --watch --configuration development\\",\\n    \\"test\\": \\"ng test\\",\\n    \\"lint\\": \\"ng line\\"\\n  },\\n  \\"private\\": true,\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@angular/animations\\": \\"~14.2.7\\",\\n    \\"@angular/common\\": \\"~14.2.7\\",\\n    \\"@angular/compiler\\": \\"~14.2.7\\",\\n    \\"@angular/core\\": \\"~14.2.7\\",\\n    \\"@angular/forms\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser\\": \\"~14.2.7\\",\\n    \\"@angular/platform-browser-dynamic\\": \\"~14.2.7\\",\\n    \\"@angular/router\\": \\"~14.2.7\\",\\n    \\"@web3auth/base\\": \\"^7.2.0\\",\\n    \\"@web3auth/mpc-core-kit\\": \\"^1.1.0\\",\\n    \\"empty-module\\": \\"^0.0.2\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"web3\\": \\"^1.8.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@angular-devkit/build-angular\\": \\"~14.2.6\\",\\n    \\"@angular/cli\\": \\"~14.2.6\\",\\n    \\"@angular/compiler-cli\\": \\"~14.2.7\\",\\n    \\"@types/jasmine\\": \\"~4.3.0\\",\\n    \\"@types/keccak\\": \\"^3.0.1\\",\\n    \\"@types/node\\": \\"^18.11.2\\",\\n    \\"@types/readable-stream\\": \\"^2.3.14\\",\\n    \\"assert\\": \\"^2.0.0\\",\\n    \\"browserify-zlib\\": \\"^0.2.0\\",\\n    \\"buffer\\": \\"^6.0.3\\",\\n    \\"crypto-browserify\\": \\"^3.12.0\\",\\n    \\"eslint-config-react-app\\": \\"^7.0.1\\",\\n    \\"https-browserify\\": \\"^1.0.0\\",\\n    \\"jasmine-core\\": \\"~4.4.0\\",\\n    \\"karma\\": \\"~6.4.1\\",\\n    \\"karma-chrome-launcher\\": \\"~3.1.1\\",\\n    \\"karma-coverage\\": \\"~2.2.0\\",\\n    \\"karma-jasmine\\": \\"~5.1.0\\",\\n    \\"karma-jasmine-html-reporter\\": \\"~2.0.0\\",\\n    \\"os-browserify\\": \\"^0.3.0\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"stream-browserify\\": \\"^3.0.0\\",\\n    \\"stream-http\\": \\"^3.2.0\\",\\n    \\"typescript\\": \\"~4.8.0\\",\\n    \\"url\\": \\"^0.11.1\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-angular-quick-start/tsconfig.json":"/* To learn more about this file see: https://angular.io/config/tsconfig. */\\n{\\n  \\"compileOnSave\\": false,\\n  \\"compilerOptions\\": {\\n    \\"baseUrl\\": \\"./\\",\\n    \\"outDir\\": \\"./dist/out-tsc\\",\\n    \\"forceConsistentCasingInFileNames\\": true,\\n    \\"strict\\": true,\\n    \\"noImplicitOverride\\": true,\\n    \\"noPropertyAccessFromIndexSignature\\": true,\\n    \\"noImplicitReturns\\": true,\\n    \\"noFallthroughCasesInSwitch\\": true,\\n    \\"sourceMap\\": true,\\n    \\"declaration\\": false,\\n    \\"downlevelIteration\\": true,\\n    \\"experimentalDecorators\\": true,\\n    \\"moduleResolution\\": \\"node\\",\\n    \\"importHelpers\\": true,\\n    \\"skipLibCheck\\": true,\\n    \\"target\\": \\"es2020\\",\\n    \\"module\\": \\"es2020\\",\\n    \\"lib\\": [\\n      \\"es2020\\",\\n      \\"dom\\"\\n    ],\\n    \\"paths\\":{\\n      \\"crypto\\": [\\"./node_modules/crypto-browserify\\"],\\n      \\"stream\\": [\\"./node_modules/stream-browserify\\"],\\n      \\"assert\\": [\\"./node_modules/assert\\"],\\n      \\"http\\": [\\"./node_modules/stream-http\\"],\\n      \\"https\\": [\\"./node_modules/https-browserify\\"],\\n      \\"os\\": [\\"./node_modules/os-browserify\\"],\\n      \\"zlib\\": [\\"./node_modules/browserify-zlib\\"],\\n      \\"url\\": [\\"./node_modules/url\\"],\\n      \\"process\\": [\\"./node_modules/process\\"]\\n    }\\n  },\\n  \\"angularCompilerOptions\\": {\\n    \\"enableI18nLegacyMessageIdFormat\\": false,\\n    \\"strictInjectionParameters\\": true,\\n    \\"strictInputAccessModifiers\\": true,\\n    \\"strictTemplates\\": true\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-vue-quick-start/vue.config.js":"const { defineConfig } = require(\\"@vue/cli-service\\");\\nconst { ProvidePlugin } = require(\\"webpack\\");\\nconst { BundleAnalyzerPlugin } = require(\\"webpack-bundle-analyzer\\");\\n\\nmodule.exports = defineConfig({\\n  transpileDependencies: true,\\n  lintOnSave: false,\\n  // IMP START - Bundler Issues\\n  configureWebpack: (config) => {\\n    config.devtool = \\"source-map\\";\\n    config.resolve.symlinks = false;\\n    config.resolve.fallback = {\\n      crypto: \\"crypto-browserify\\",\\n      stream: \\"stream-browserify\\",\\n      assert: \\"assert\\",\\n      os: \\"os-browserify\\",\\n      https: \\"https-browserify\\",\\n      http: \\"stream-http\\",\\n      url: \\"url\\",\\n      zlib: \\"browserify-zlib\\",\\n    };\\n    config.plugins.push(new ProvidePlugin({ Buffer: [\\"buffer\\", \\"Buffer\\"] }));\\n    config.plugins.push(new ProvidePlugin({ process: [\\"process/browser\\"] }));\\n    // IMP END - Bundler Issues\\n    config.plugins.push(\\n      new BundleAnalyzerPlugin({\\n        analyzerMode: \\"disabled\\",\\n      })\\n    );\\n  },\\n});\\n","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-vue-quick-start/package.json":"{\\n  \\"name\\": \\"mpc-core-kit-vue-quick-start\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"scripts\\": {\\n    \\"serve\\": \\"vue-cli-service serve\\",\\n    \\"build\\": \\"vue-cli-service build\\",\\n    \\"lint\\": \\"vue-cli-service lint\\"\\n  },\\n  \\"//IMP START\\": \\"IMP START - Web3Auth Installation\\",\\n  \\"dependencies\\": {\\n    \\"@web3auth/base\\": \\"^7.2.0\\",\\n    \\"@web3auth/mpc-core-kit\\": \\"^1.1.0\\",\\n    \\"core-js\\": \\"^3.26.1\\",\\n    \\"firebase\\": \\"^10.4.0\\",\\n    \\"vue\\": \\"^3.3.4\\",\\n    \\"web3\\": \\"^1.8.1\\"\\n  },\\n  \\"//IMP END\\": \\"IMP END - Web3Auth Installation\\",\\n  \\"devDependencies\\": {\\n    \\"@typescript-eslint/eslint-plugin\\": \\"^5.46.1\\",\\n    \\"@typescript-eslint/parser\\": \\"^5.46.1\\",\\n    \\"@vue/cli-plugin-babel\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-eslint\\": \\"~5.0.8\\",\\n    \\"@vue/cli-plugin-typescript\\": \\"~5.0.8\\",\\n    \\"@vue/cli-service\\": \\"~5.0.8\\",\\n    \\"@vue/eslint-config-typescript\\": \\"^11.0.2\\",\\n    \\"assert\\": \\"^2.0.0\\",\\n    \\"browserify-zlib\\": \\"^0.2.0\\",\\n    \\"buffer\\": \\"^6.0.3\\",\\n    \\"crypto-browserify\\": \\"^3.12.0\\",\\n    \\"eslint\\": \\"^8.29.0\\",\\n    \\"eslint-config-react-app\\": \\"^7.0.1\\",\\n    \\"eslint-plugin-vue\\": \\"^9.8.0\\",\\n    \\"https-browserify\\": \\"^1.0.0\\",\\n    \\"os-browserify\\": \\"^0.3.0\\",\\n    \\"process\\": \\"^0.11.10\\",\\n    \\"stream-browserify\\": \\"^3.0.0\\",\\n    \\"stream-http\\": \\"^3.2.0\\",\\n    \\"typescript\\": \\"~4.9.4\\",\\n    \\"url\\": \\"^0.11.1\\"\\n  }\\n}","Web3Auth/web3auth-core-kit-examples/main/mpc-core-kit-web/quick-starts/mpc-core-kit-vue-quick-start/src/Home.vue":"\x3c!-- eslint-disable vue/no-ref-as-operand --\x3e\\n<template>\\n  <div id=\\"app\\">\\n    <h2>\\n      <a target=\\"_blank\\" href=\\"https://web3auth.io/docs/sdk/core-kit/mpc-core-kit/\\" rel=\\"noreferrer\\">\\n        Web3Auth MPC Core Kit\\n      </a>\\n      Vue.js Quick Start\\n    </h2>\\n\\n    <div v-if=\\"coreKitStatus !== COREKIT_STATUS.LOGGED_IN\\">\\n      <button @click=\\"login\\" class=\\"card\\">\\n        Login\\n      </button>\\n      <div v-if=\\"coreKitStatus === COREKIT_STATUS.REQUIRED_SHARE\\">\\n\\n        <button @click=\\"getDeviceFactor\\" class=\\"card\\">\\n          Get Device Factor\\n        </button>\\n        <label>Backup/ Device Factor:</label>\\n        <input v-model=\\"backupFactorKey\\" />\\n        <button @click=\\"inputBackupFactorKey\\" class=\\"card\\">\\n          Input Backup Factor Key\\n        </button>\\n        <button @click=\\"criticalResetAccount\\" class=\\"card\\">\\n          [CRITICAL] Reset Account\\n        </button>\\n        <label>Recover Using Mnemonic Factor Key:</label>\\n        <input v-model=\\"mnemonicFactor\\" />\\n        <button @click=\\"MnemonicToFactorKeyHex\\" class=\\"card\\">\\n          Get Recovery Factor Key using Mnemonic\\n        </button>\\n      </div>\\n    </div>\\n\\n    <div v-if=\\"coreKitStatus === COREKIT_STATUS.LOGGED_IN\\">\\n      <div class=\\"flex-container\\">\\n        <div>\\n          <button class=\\"card\\" @click=\\"getUserInfo\\" style=\\"cursor: pointer\\">\\n            Get User Info\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"keyDetails\\" style=\\"cursor: pointer\\">\\n            Key Details\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"enableMFA\\" style=\\"cursor: pointer\\">\\n            Enable MFA\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getAccounts\\" style=\\"cursor: pointer\\">\\n            Get Accounts\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"getBalance\\" style=\\"cursor: pointer\\">\\n            Get Balance\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"signMessage\\" style=\\"cursor: pointer\\">\\n            Sign Message\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"logout\\" style=\\"cursor: pointer\\">\\n            Logout\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"criticalResetAccount\\" style=\\"cursor: pointer\\">\\n            [CRITICAL] Reset Account\\n          </button>\\n        </div>\\n        <div>\\n          <button class=\\"card\\" @click=\\"exportMnemonicFactor\\" style=\\"cursor: pointer\\">\\n            Generate Backup (Mnemonic)\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\"console\\" style=\\"white-space: pre-line\\">\\n      <p style=\\"white-space: pre-line\\"></p>\\n    </div>\\n\\n    <footer class=\\"footer\\">\\n      <a href=\\"https://github.com/Web3Auth/web3auth-core-kit-examples/tree/main/mpc-core-kit-web/quick-starts/mpc-core-kit-vue-quick-start\\"\\n        target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n        Source code\\n      </a>\\n    </footer>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\nimport { ref, onMounted } from \\"vue\\";\\n// IMP START - Quick Start\\nimport { Web3AuthMPCCoreKit, WEB3AUTH_NETWORK, IdTokenLoginParams, TssShareType, parseToken, getWebBrowserFactor, generateFactorKey, COREKIT_STATUS, keyToMnemonic, mnemonicToKey } from \\"@web3auth/mpc-core-kit\\";\\nimport { CHAIN_NAMESPACES } from \\"@web3auth/base\\";\\n// IMP END - Quick Start\\nimport Web3 from \'web3\';\\nimport { BN } from \\"bn.js\\";\\n\\n// Firebase libraries for custom authentication\\nimport { initializeApp } from \\"firebase/app\\";\\nimport { GoogleAuthProvider, getAuth, signInWithPopup, UserCredential } from \\"firebase/auth\\";\\n\\nexport default {\\n  // eslint-disable-next-line vue/multi-word-component-names\\n  name: \\"Home\\",\\n  props: {\\n    msg: String,\\n  },\\n  setup() {\\n    const coreKitStatus = ref<COREKIT_STATUS>(COREKIT_STATUS.NOT_INITIALIZED);\\n    const backupFactorKey = ref<string>(\\"\\");\\n    const mnemonicFactor = ref<string>(\\"\\");\\n\\n    // IMP START - SDK Initialization\\n    // IMP START - Dashboard Registration\\n    const web3AuthClientId = \\"BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ\\"; // get from https://dashboard.web3auth.io\\n    // IMP END - Dashboard Registration\\n\\n    // IMP START - Verifier Creation\\n    const verifier = \\"w3a-firebase-demo\\";\\n    // IMP END - Verifier Creation\\n\\n    const chainConfig = {\\n      chainNamespace: CHAIN_NAMESPACES.EIP155,\\n      chainId: \\"0x1\\", // Please use 0x1 for Mainnet\\n      rpcTarget: \\"https://rpc.ankr.com/eth\\",\\n      displayName: \\"Ethereum Mainnet\\",\\n      blockExplorer: \\"https://etherscan.io/\\",\\n      ticker: \\"ETH\\",\\n      tickerName: \\"Ethereum\\",\\n    };\\n\\n    const coreKitInstance = new Web3AuthMPCCoreKit(\\n      {\\n        web3AuthClientId,\\n        web3AuthNetwork: WEB3AUTH_NETWORK.MAINNET,\\n        chainConfig,\\n      }\\n    );\\n    // IMP END - SDK Initialization\\n\\n    // IMP START - Auth Provider Login\\n    // Your web app\'s Firebase configuration\\n    const firebaseConfig = {\\n      apiKey: \\"AIzaSyB0nd9YsPLu-tpdCrsXn8wgsWVAiYEpQ_E\\",\\n      authDomain: \\"web3auth-oauth-logins.firebaseapp.com\\",\\n      projectId: \\"web3auth-oauth-logins\\",\\n      storageBucket: \\"web3auth-oauth-logins.appspot.com\\",\\n      messagingSenderId: \\"461819774167\\",\\n      appId: \\"1:461819774167:web:e74addfb6cc88f3b5b9c92\\",\\n    };\\n\\n    // Firebase Initialisation\\n    const app = initializeApp(firebaseConfig);\\n    // IMP END - Auth Provider Login\\n\\n\\n    onMounted(async () => {\\n      const init = async () => {\\n        try {\\n          // IMP START - SDK Initialization\\n          await coreKitInstance.init();\\n          // IMP END - SDK Initialization\\n\\n          coreKitStatus.value = coreKitInstance.status;\\n        } catch (error) {\\n          console.error(error);\\n        }\\n      };\\n\\n      init();\\n    });\\n\\n    // IMP START - Auth Provider Login\\n    const signInWithGoogle = async (): Promise<UserCredential> => {\\n      try {\\n        const auth = getAuth(app);\\n        const googleProvider = new GoogleAuthProvider();\\n        const res = await signInWithPopup(auth, googleProvider);\\n        console.log(res);\\n        return res;\\n      } catch (err) {\\n        console.error(err);\\n        throw err;\\n      }\\n    };\\n    // IMP END - Auth Provider Login\\n\\n    const login = async () => {\\n      try {\\n        if (!coreKitInstance) {\\n          throw new Error(\'initiated to login\');\\n        }\\n        // IMP START - Auth Provider Login\\n        const loginRes = await signInWithGoogle();\\n        const idToken = await loginRes.user.getIdToken(true);\\n        const parsedToken = parseToken(idToken);\\n        // IMP END - Auth Provider Login\\n\\n        // IMP START - Login\\n        const idTokenLoginParams = {\\n          verifier,\\n          verifierId: parsedToken.sub,\\n          idToken,\\n        } as IdTokenLoginParams;\\n\\n        await coreKitInstance.loginWithJWT(idTokenLoginParams);\\n        // IMP END - Login\\n\\n        // IMP START - Recover MFA Enabled Account\\n        if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n          uiConsole(\\"required more shares, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\");\\n        }\\n        // IMP END - Recover MFA Enabled Account\\n\\n        coreKitStatus.value = coreKitInstance.status;\\n      }\\n      catch (err) {\\n        uiConsole(err);\\n      }\\n    };\\n\\n    // IMP START - Recover MFA Enabled Account\\n    const inputBackupFactorKey = async () => {\\n      if (!coreKitInstance) {\\n        throw new Error(\\"coreKitInstance not found\\");\\n      }\\n      if (!backupFactorKey) {\\n        throw new Error(\\"backupFactorKey not found\\");\\n      }\\n      const factorKey = new BN(backupFactorKey.value, \\"hex\\")\\n      await coreKitInstance.inputFactorKey(factorKey);\\n\\n      coreKitStatus.value = coreKitInstance.status;\\n\\n      if (coreKitInstance.status === COREKIT_STATUS.REQUIRED_SHARE) {\\n        uiConsole(\\"required more shares even after inputing backup factor key, please enter your backup/ device factor key, or reset account [unrecoverable once reset, please use it with caution]\\");\\n      }\\n    };\\n    // IMP END - Recover MFA Enabled Account\\n\\n    // IMP START - Enable Multi Factor Authentication\\n    const enableMFA = async () => {\\n      if (!coreKitInstance) {\\n        throw new Error(\\"coreKitInstance is not set\\");\\n      }\\n      const factorKey = await coreKitInstance.enableMFA({});\\n      const factorKeyMnemonic = keyToMnemonic(factorKey);\\n\\n      uiConsole(\\"MFA enabled, device factor stored in local store, deleted hashed cloud key, your backup factor key: \\", factorKeyMnemonic);\\n    };\\n\\n    const keyDetails = async () => {\\n      if (!coreKitInstance) {\\n        throw new Error(\'coreKitInstance not found\');\\n      }\\n      uiConsole(coreKitInstance.getKeyDetails());\\n    };\\n    // IMP END - Enable Multi Factor Authentication\\n\\n    const getDeviceFactor = async () => {\\n      try {\\n        const factorKey = await getWebBrowserFactor(coreKitInstance!);\\n        backupFactorKey.value = factorKey!;\\n        uiConsole(\\"Device share: \\", factorKey);\\n      } catch (e) {\\n        uiConsole(e);\\n      }\\n    };\\n\\n    const exportMnemonicFactor = async (): Promise<void> => {\\n      if (!coreKitInstance) {\\n        throw new Error(\\"coreKitInstance is not set\\");\\n      }\\n      uiConsole(\\"export share type: \\", TssShareType.RECOVERY);\\n      const factorKey = generateFactorKey();\\n      await coreKitInstance.createFactor({\\n        shareType: TssShareType.RECOVERY,\\n        factorKey: factorKey.private\\n      });\\n      const factorKeyMnemonic = await keyToMnemonic(factorKey.private.toString(\\"hex\\"));\\n      uiConsole(\\"Export factor key mnemonic: \\", factorKeyMnemonic);\\n    };\\n\\n    const MnemonicToFactorKeyHex = async () => {\\n      if (!coreKitInstance) {\\n        throw new Error(\\"coreKitInstance is not set\\");\\n      }\\n      try {\\n        const factorKey = await mnemonicToKey(mnemonicFactor.value);\\n        backupFactorKey.value = factorKey;\\n        return factorKey;\\n      } catch (error) {\\n        uiConsole(error);\\n      }\\n    };\\n\\n    const getUserInfo = async () => {\\n      // IMP START - Get User Information\\n      const user = await coreKitInstance.getUserInfo();\\n      // IMP END - Get User Information\\n      uiConsole(user);\\n    };\\n\\n    const logout = async () => {\\n      // IMP START - Logout\\n      await coreKitInstance.logout();\\n      // IMP END - Logout\\n      coreKitStatus.value = coreKitInstance.status;\\n      uiConsole(\\"logged out\\");\\n    };\\n\\n\\n    // IMP START - Blockchain Calls\\n    const getAccounts = async () => {\\n      if (!coreKitInstance) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(coreKitInstance.provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = await web3.eth.getAccounts();\\n      uiConsole(address);\\n    };\\n\\n    const getBalance = async () => {\\n      if (!coreKitInstance) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(coreKitInstance.provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const address = (await web3.eth.getAccounts())[0];\\n\\n      // Get user\'s balance in ether\\n      const balance = web3.utils.fromWei(\\n        await web3.eth.getBalance(address), // Balance is in wei\\n        \\"ether\\"\\n      );\\n      uiConsole(balance);\\n    };\\n\\n    const signMessage = async () => {\\n      if (!coreKitInstance) {\\n        uiConsole(\\"provider not initialized yet\\");\\n        return;\\n      }\\n      const web3 = new Web3(coreKitInstance.provider as any);\\n\\n      // Get user\'s Ethereum public address\\n      const fromAddress = (await web3.eth.getAccounts())[0];\\n\\n      const originalMessage = \\"YOUR_MESSAGE\\";\\n\\n      // Sign the message\\n      const signedMessage = await web3.eth.personal.sign(\\n        originalMessage,\\n        fromAddress,\\n        \\"test password!\\" // configure your own password here.\\n      );\\n      uiConsole(signedMessage);\\n    };\\n    // IMP END - Blockchain Calls\\n\\n    const criticalResetAccount = async (): Promise<void> => {\\n      // This is a critical function that should only be used for testing purposes\\n      // Resetting your account means clearing all the metadata associated with it from the metadata server\\n      // The key details will be deleted from our server and you will not be able to recover your account\\n      if (!coreKitInstance) {\\n        throw new Error(\\"coreKitInstance is not set\\");\\n      }\\n      //@ts-ignore\\n      // if (selectedNetwork === WEB3AUTH_NETWORK.MAINNET) {\\n      //   throw new Error(\\"reset account is not recommended on mainnet\\");\\n      // }\\n      await coreKitInstance.tKey.storageLayer.setMetadata({\\n        privKey: new BN(coreKitInstance.metadataKey!, \\"hex\\"),\\n        input: { message: \\"KEY_NOT_FOUND\\" },\\n      });\\n      uiConsole(\'reset\');\\n      logout();\\n    }\\n\\n    function uiConsole(...args: any[]): void {\\n      const el = document.querySelector(\\"#console>p\\");\\n      if (el) {\\n        el.innerHTML = JSON.stringify(args || {}, null, 2);\\n      }\\n      console.log(...args);\\n    }\\n\\n    return {\\n      coreKitStatus,\\n      getDeviceFactor,\\n      COREKIT_STATUS,\\n      backupFactorKey,\\n      inputBackupFactorKey,\\n      mnemonicFactor,\\n      MnemonicToFactorKeyHex,\\n      login,\\n      logout,\\n      getUserInfo,\\n      getAccounts,\\n      getBalance,\\n      signMessage,\\n      criticalResetAccount,\\n      keyDetails,\\n      enableMFA,\\n      exportMnemonicFactor\\n    };\\n  },\\n};\\n<\/script>\\n\\n\x3c!-- Add \\"scoped\\" attribute to limit CSS to this component only --\x3e\\n<style scoped>\\n#app {\\n  width: 80%;\\n  margin: auto;\\n  padding: 0 2rem;\\n}\\n\\nh3 {\\n  margin: 40px 0 0;\\n}\\n\\nul {\\n  list-style-type: none;\\n  padding: 0;\\n}\\n\\nli {\\n  display: inline-block;\\n  margin: 0 10px;\\n}\\n\\na {\\n  color: #42b983;\\n}\\n\\n.card {\\n  margin: 0.5rem;\\n  padding: 0.7rem;\\n  text-align: center;\\n  color: #0070f3;\\n  background-color: #fafafa;\\n  text-decoration: none;\\n  border: 1px solid #0070f3;\\n  border-radius: 10px;\\n  transition: color 0.15s ease, border-color 0.15s ease;\\n  width: 100%;\\n}\\n\\n.card:hover,\\n.card:focus,\\n.card:active {\\n  cursor: pointer;\\n  background-color: #f1f1f1;\\n}\\n\\n.flex-container {\\n  display: flex;\\n  flex-flow: row wrap;\\n}\\n\\n.flex-container>div {\\n  width: 100px;\\n  margin: 10px;\\n  text-align: center;\\n  line-height: 75px;\\n  font-size: 30px;\\n}\\n\\n#console {\\n  width: 100%;\\n  height: 100%;\\n  overflow: auto;\\n  word-wrap: break-word;\\n  font-size: 16px;\\n  font-family: monospace;\\n  text-align: left;\\n}\\n\\n.disabledDiv {\\n  pointer-events: none;\\n  opacity: 0.4;\\n}\\n\\n.flex-column {\\n  display: flex;\\n  flex-direction: column;\\n}\\n</style>\\n"}')}}]);