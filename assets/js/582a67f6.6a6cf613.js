"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[5958],{23355:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(85893),i=t(11151);const o={title:"Integrate Web3Auth with the Solana Blockchain in Flutter",sidebar_label:"Flutter",image:"content-hub/guides/banners/solana.png",displayed_sidebar:"docs",keywords:["flutter","solana","web3auth","authentication","blockchain"],description:"Integrate Web3Auth with the Solana Blockchain in Flutter | Documentation - Web3Auth"},r=void 0,l={id:"connect-blockchain/solana/flutter",title:"Integrate Web3Auth with the Solana Blockchain in Flutter",description:"Integrate Web3Auth with the Solana Blockchain in Flutter | Documentation - Web3Auth",source:"@site/docs/connect-blockchain/solana/flutter.mdx",sourceDirName:"connect-blockchain/solana",slug:"/connect-blockchain/solana/flutter",permalink:"/docs/connect-blockchain/solana/flutter",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/connect-blockchain/solana/flutter.mdx",tags:[],version:"current",frontMatter:{title:"Integrate Web3Auth with the Solana Blockchain in Flutter",sidebar_label:"Flutter",image:"content-hub/guides/banners/solana.png",displayed_sidebar:"docs",keywords:["flutter","solana","web3auth","authentication","blockchain"],description:"Integrate Web3Auth with the Solana Blockchain in Flutter | Documentation - Web3Auth"},sidebar:"docs",previous:{title:"Web",permalink:"/docs/connect-blockchain/solana/web"},next:{title:"XRPL",permalink:"/docs/connect-blockchain/xrpl"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Initialize",id:"initialize",level:2},{value:"Initializing Solana SDK",id:"initializing-solana-sdk",level:3},{value:"Initializing Web3Auth",id:"initializing-web3auth",level:3},{value:"Get User Info",id:"get-user-info",level:2},{value:"Get Account and Balance",id:"get-account-and-balance",level:2},{value:"Setup Solana Provider",id:"setup-solana-provider",level:3},{value:"Sign Transaction",id:"sign-transaction",level:2},{value:"Send Transaction",id:"send-transaction",level:2},{value:"Fetch User&#39;s Private Key",id:"fetch-users-private-key",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["While using the Web3Auth Flutter SDK, you can retrive the Ed25519 private key upon successful authentication. This private key can be used to derive\nuser's public address and interact with ",(0,a.jsx)(e.a,{href:"https://ethereum.org/",children:"Solana"})," chain. We have highlighted a few methods here for getting you started quickly\non that."]}),"\n",(0,a.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(e.p,{children:["To interact with the Solana blockchain in Flutter, you can use any Solana compatible package. Here, we're using\n",(0,a.jsx)(e.a,{href:"https://pub.dev/packages/solana",children:"solana"})," to demonstrate how to interact with Solana chain using Web3Auth."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:"flutter pub add solana get_it hex\n"})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsxs)(e.p,{children:["Note: We will also be using ",(0,a.jsx)(e.code,{children:"get_it"})," package for dependency injection, and ",(0,a.jsx)(e.code,{children:"hex"})," package to perform Hex encoding and decoding."]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"initialize",children:"Initialize"}),"\n",(0,a.jsxs)(e.p,{children:["To Initialize the ",(0,a.jsx)(e.code,{children:"SolanaClient"})," we require ",(0,a.jsx)(e.code,{children:"rpcUrl"})," and ",(0,a.jsx)(e.code,{children:"websocketUrl"}),". The ",(0,a.jsx)(e.code,{children:"rpcUrl"})," will provide a gateway & protocol to interact with Solana\ncluster while sending requests and receving response. For this example, we are using ",(0,a.jsx)(e.code,{children:"rpcUrl"})," & ",(0,a.jsx)(e.code,{children:"websocketUrl"})," for Devnet-beta. To interact with\nTestnet or Mainnet, you can simply change the ",(0,a.jsx)(e.code,{children:"rpcUrl"})," and ",(0,a.jsx)(e.code,{children:"websocketUrl"}),"."]}),"\n",(0,a.jsx)(e.h3,{id:"initializing-solana-sdk",children:"Initializing Solana SDK"}),"\n",(0,a.jsxs)(e.p,{children:["In the below code block, we'll initialize the ",(0,a.jsx)(e.code,{children:"SolanaClient"})," using the Devnet-beta rpc and websocket urls. We'll also register the instance in GetIt\nfor it to be accessed anywhere using service locator."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:"import 'package:flutter_solana_example/core/solana/solana_provider.dart';\nimport 'package:get_it/get_it.dart';\n// highlight-next-line\nimport 'package:solana/solana.dart';\n\nclass ServiceLocator {\n  ServiceLocator._();\n\n  static GetIt get getIt => GetIt.instance;\n\n  static Future<void> init() async {\n    // highlight-start\n    final solanaClient = SolanaClient(\n      rpcUrl: Uri.parse('https://api.devnet.solana.com'),\n      websocketUrl: Uri.parse('ws://api.devnet.solana.com'),\n    );\n     // highlight-end\n\n    // Register SolanaClient to be accessed using service locator\n    getIt.registerLazySingleton<SolanaClient>(() => solanaClient);\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"initializing-web3auth",children:"Initializing Web3Auth"}),"\n",(0,a.jsxs)(e.p,{children:["In the below code block, we'll initialize the Web3Auth SDK and check whether the user has any Web3Auth session persisted or not. If the user is\nalready authenticated, we can route them directly to ",(0,a.jsx)(e.code,{children:"HomeScreen"}),", otherwise we can route them to ",(0,a.jsx)(e.code,{children:"LoginScreen"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["By default, the session is persisted for 1 day. You can modify it using ",(0,a.jsx)(e.code,{children:"sessionTime"})," parameter during initialization."]}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"Note: The session can be persisted only for 7 days max."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:"// Additional imports\n// ...\nimport 'package:web3auth_flutter/web3auth_flutter.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Initialize ServiceLocator\n  ServiceLocator.init();\n\n  final Uri redirectUrl;\n  if (Platform.isAndroid) {\n    redirectUrl = Uri.parse('w3aexample://com.example.flutter_solana_example/auth');\n  } else {\n    redirectUrl = Uri.parse('com.web3auth.fluttersolanasample://auth');\n  }\n\n  // highlight-start\n  await Web3AuthFlutter.init(\n    Web3AuthOptions(\n      clientId:\n          \"BHgArYmWwSeq21czpcarYh0EVq2WWOzflX-NTK-tY1-1pauPzHKRRLgpABkmYiIV_og9jAvoIxQ8L3Smrwe04Lw\",\n      network: Network.sapphire_devnet,\n      buildEnv: BuildEnv.production,\n      redirectUrl: redirectUrl,\n      whiteLabel: WhiteLabelData(\n        appName: \"Solana Web3Auth Flutter\",\n        mode: ThemeModes.dark,\n      ),\n    ),\n  );\n\n  // highlight-end\n\n  runApp(const MainApp());\n}\n\nclass MainApp extends StatefulWidget {\n  const MainApp({super.key});\n\n  @override\n  State<MainApp> createState() => _MainAppState();\n}\n\nclass _MainAppState extends State<MainApp> {\n  late final Future<String> privateKeyFuture;\n  @override\n  void initState() {\n    super.initState();\n    privateKeyFuture = Web3AuthFlutter.getEd25519PrivKey();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: FutureBuilder<String>(\n        future: privateKeyFuture,\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.done) {\n            // highlight-start\n            if (snapshot.hasData) {\n              // Check if user is already authenticated. If user is already\n              // authenticated the snapshot.data will be non empty string\n              // representing the private key used for Solana ecosystem.\n              if (snapshot.data!.isNotEmpty) {\n                return const HomeScreen();\n              }\n            }\n            return const LoginScreen();\n            // highlight-end\n          }\n          return const Center(\n            child: CircularProgressIndicator.adaptive(),\n          );\n        },\n      ),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"get-user-info",children:"Get User Info"}),"\n",(0,a.jsx)(e.p,{children:"After logging in, the Web3Auth instance will provide you with information regarding the user that is logged in. This information is obtained directly\nfrom the JWT token and is not stored by Web3Auth. Therefore, this information can only be accessed through social logins after the user has logged\ninto your application."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:'\n// ..\n// Additional code\n// ..\nclass _HomeScreenState extends State<HomeScreen> {\n  late final ValueNotifier<bool> isAccountLoaded;\n  late final Ed25519HDKeyPair keyPair;\n  late final SolanaProvider provider;\n  late double balance;\n  // highlight-next-line\n  late final dynamic web3AuthInfo;\n\n  @override\n  void initState() {\n    super.initState();\n    isAccountLoaded = ValueNotifier<bool>(false);\n    provider = ServiceLocator.getIt<SolanaProvider>();\n    loadAccount(context);\n  }\n\n  Future<void> loadAccount(BuildContext context) async {\n    try {\n      final privateKey = await Web3AuthFlutter.getEd25519PrivKey();\n\n      // getUserInfo method can be used to fetch the user information\n      // such as email, name, isMFA enabled. Checkout documentation\n      // to know more.\n      // highlight-next-line\n      web3AuthInfo = await Web3AuthFlutter.getUserInfo();\n\n      // ..\n      // Additional codebase\n      // ..\n      isAccountLoaded.value = true;\n    } catch (e, _) {\n      if (context.mounted) {\n        showInfoDialog(context, e.toString());\n      }\n    }\n  }\n\n  Widget get verticalGap => const SizedBox(height: 16);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: const Icon(Icons.logout),\n          onPressed: () {\n            logOut(context);\n          },\n        ),\n      ),\n      body: ValueListenableBuilder<bool>(\n        valueListenable: isAccountLoaded,\n        builder: (context, isLoaded, _) {\n          if (isLoaded) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  Text(\n                    balance.toString(),\n                    style: Theme.of(context).textTheme.displaySmall,\n                  ),\n                  // highlight-start\n                  if (web3AuthInfo.email != null) ...[\n                    verticalGap,\n                    Text(\n                      web3AuthInfo.email!,\n                      style: Theme.of(context).textTheme.bodyLarge,\n                    )\n                  ],\n                  // highlight-end\n\n                  // ..\n                  // Additional code\n                  // ..\n\n                  verticalGap,\n\n                  // Logs the user information in the console\n                  // highlight-start\n                  OutlinedButton(\n                    onPressed: () async {\n                     showInfoDialog(\n                        context,\n                        jsonEncode(web3AuthInfo.toJson()),\n                        true,\n                      );\n                    },\n                    child: const Text("Get user info"),\n                  ),\n                  // highlight-end\n                ],\n              ),\n            );\n          }\n          return const Center(child: CircularProgressIndicator.adaptive());\n        },\n      ),\n    );\n  }\n'})}),"\n",(0,a.jsx)(e.h2,{id:"get-account-and-balance",children:"Get Account and Balance"}),"\n",(0,a.jsxs)(e.p,{children:["We can use ",(0,a.jsx)(e.code,{children:"getEd25519PrivKey"})," method in Web3Auth to retrive the priavte key for the Solana ecosystem. In the below code block, we'll use the Ed25519\nprivate key to retive user's public address, and solana balance. We'll use ",(0,a.jsx)(e.code,{children:"SolanaProvider"})," class to interact with Solana cluster and fetch user\nbalance."]}),"\n",(0,a.jsx)(e.h3,{id:"setup-solana-provider",children:"Setup Solana Provider"}),"\n",(0,a.jsx)(e.p,{children:"In the below code block, we'll create Solana provider to interact and perform solana operations."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:"import 'dart:math';\n\nimport 'package:solana/dto.dart';\nimport 'package:solana/solana.dart';\n\nconst int tokenDecimals = 9;\n\nclass SolanaProvider {\n  final SolanaClient solanaClient;\n\n  SolanaProvider(this.solanaClient);\n\n  // highlight-start\n  Future<double> getBalance(String address) async {\n    final balanceResponse = await solanaClient.rpcClient.getBalance(\n      address,\n    );\n\n    /// We are dividing the balance by 10^9, because Solana's\n    /// token decimals is set to be 9;\n    return balanceResponse.value / pow(10, tokenDecimals);\n  }\n  // highlight-end\n\n   // ..\n  // Additional methods\n  // ..\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Once we have setup the ",(0,a.jsx)(e.code,{children:"SolanaProvider"})," we'll use it to fetch user balance in the ",(0,a.jsx)(e.code,{children:"HomeScreen"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:"// ..\n// Additional code\n// ..\nclass _HomeScreenState extends State<HomeScreen> {\n  late final ValueNotifier<bool> isAccountLoaded;\n  late final Ed25519HDKeyPair keyPair;\n  late final SolanaProvider provider;\n  late double balance;\n  late final dynamic web3AuthInfo;\n\n  @override\n  void initState() {\n    super.initState();\n    isAccountLoaded = ValueNotifier<bool>(false);\n    // highlight-next-line\n    provider = ServiceLocator.getIt<SolanaProvider>();\n    loadAccount(context);\n  }\n\n  Future<void> loadAccount(BuildContext context) async {\n    try {\n      final privateKey = await Web3AuthFlutter.getEd25519PrivKey();\n\n      // ..\n      // Additional code\n      // ..\n\n      /// The ED25519 PrivateKey returns a key pair from\n      /// which we only require first 32 byte.\n      // highlight-start\n      keyPair = await Ed25519HDKeyPair.fromPrivateKeyBytes(\n        privateKey: privateKey.hexToBytes.take(32).toList(),\n      );\n      balance = await provider.getBalance(keyPair.address);\n      // highlight-end\n      isAccountLoaded.value = true;\n    } catch (e, _) {\n      if (context.mounted) {\n        showInfoDialog(context, e.toString());\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ValueListenableBuilder<bool>(\n        valueListenable: isAccountLoaded,\n        builder: (context, isLoaded, _) {\n          if (isLoaded) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  // highlight-start\n                  Text(\n                    balance.toString(),\n                    style: Theme.of(context).textTheme.displaySmall,\n                  ),\n                  // highlight-end\n                  // ..\n                  // Additional code\n                  // ..\n                  // highlight-start\n                  Row(\n                    children: [\n                      const Spacer(),\n                      Text(\n                        keyPair.address.addressAbbreviation,\n                        style: Theme.of(context).textTheme.bodyLarge,\n                      ),\n                      const SizedBox(\n                        width: 4,\n                      ),\n                      IconButton(\n                        onPressed: () {\n                          copyContentToClipboard(context, keyPair.address);\n                        },\n                        icon: const Icon(Icons.copy),\n                      ),\n                      const Spacer(),\n                    ],\n                  ),\n                  // highlight-end\n                  // ..\n                  // Additional code\n                  // ..\n                ],\n              ),\n            );\n          }\n          return const Center(child: CircularProgressIndicator.adaptive());\n        },\n      ),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"sign-transaction",children:"Sign Transaction"}),"\n",(0,a.jsxs)(e.p,{children:["Let's now go through how can we sign the transaction. In the below code block, we'll add a new method inside ",(0,a.jsx)(e.code,{children:"SolanaProvider"})," we setup earlier to help\nus sign a transfer transaction. After successful implementation, we can use the method in ",(0,a.jsx)(e.code,{children:"HomeScreen"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:'class SolanaProvider {\n  final SolanaClient solanaClient;\n\n  SolanaProvider(this.solanaClient);\n\n  // highlight-start\n  Future<String> signSendTransaction({\n    required Ed25519HDKeyPair keyPair,\n    required String destination,\n    required double value,\n  }) async {\n    /// Converting user input to the lamports, which are smallest value\n    /// in Solana.\n    final num lamports = value * pow(10, tokenDecimals);\n\n    final message = Message(instructions: [\n      SystemInstruction.transfer(\n        fundingAccount: keyPair.publicKey,\n        recipientAccount: Ed25519HDPublicKey.fromBase58(destination),\n        lamports: lamports.toInt(),\n      ),\n    ]);\n\n    final recentBlockHash = await getRecentBlockhash();\n\n    final signedTx = await signTransaction(recentBlockHash, message, [keyPair]);\n    return signedTx.signatures.first.toBase58();\n  }\n  // highlight-end\n\n  Future<RecentBlockhash> getRecentBlockhash() async {\n    return await solanaClient.rpcClient\n        .getRecentBlockhash(commitment: Commitment.finalized)\n        .value;\n  }\n}\n\n// HomeScreen code\n\n// ..\n// Additional code\n// ..\nclass _HomeScreenState extends State<HomeScreen> {\n\n  late final SolanaProvider provider;\n\n  @override\n  void initState() {\n    super.initState();\n    isAccountLoaded = ValueNotifier<bool>(false);\n    // highlight-next-line\n    provider = ServiceLocator.getIt<SolanaProvider>();\n    loadAccount(context);\n  }\n\n  // ..\n  // Additional code\n  // ..\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // ..\n      body: ValueListenableBuilder<bool>(\n        valueListenable: isAccountLoaded,\n        builder: (context, isLoaded, _) {\n          if (isLoaded) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  // highlight-start\n                  OutlinedButton(\n                    onPressed: () {\n                      signSelfTransfer(context);\n                    },\n                    child: const Text(\n                      "Sign Self transfer 0.0001 Sol",\n                    ),\n                  ),\n                  // highlight-end\n                ],\n              ),\n            );\n          }\n          return const Center(child: CircularProgressIndicator.adaptive());\n        },\n      ),\n    );\n  }\n\n  // highlight-start\n  Future<void> signSelfTransfer(BuildContext context) async {\n    showLoader(context);\n    try {\n      final signedMessage = await provider.signSendTransaction(\n        keyPair: keyPair,\n        destination: keyPair.address,\n        value: 0.0001,\n      );\n      if (context.mounted) {\n        removeDialog(context);\n        showInfoDialog(context, "Signed message\\n$signedMessage");\n      }\n    } catch (e, _) {\n      if (context.mounted) {\n        removeDialog(context);\n        showInfoDialog(context, e.toString());\n      }\n    }\n  }\n  // highlight-end\n}\n\n'})}),"\n",(0,a.jsx)(e.h2,{id:"send-transaction",children:"Send Transaction"}),"\n",(0,a.jsxs)(e.p,{children:["For the send transaction, we'll create a new method ",(0,a.jsx)(e.code,{children:"sendSol"})," in the ",(0,a.jsx)(e.code,{children:"SolanaProvider"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:"class SolanaProvider {\n  final SolanaClient solanaClient;\n\n  SolanaProvider(this.solanaClient);\n\n  // highlight-start\n  Future<String> sendSol({\n    required Ed25519HDKeyPair keyPair,\n    required String destination,\n    required double value,\n  }) async {\n    /// Converting user input to the lamports, which are smallest value\n    /// in Solana.\n    final num lamports = value * pow(10, tokenDecimals);\n    final transactionHash = await solanaClient.transferLamports(\n      source: keyPair,\n      destination: Ed25519HDPublicKey.fromBase58(destination),\n      lamports: lamports.toInt(),\n    );\n\n    return transactionHash;\n  }\n  // highlight-end\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Once created, we can use the method in ",(0,a.jsx)(e.code,{children:"HomeScreen"})," to transfer SOL. Upon successful transfer, we'll also refresh the balance of the user."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:'// ..\n\nclass _HomeScreenState extends State<HomeScreen> {\n  late final ValueNotifier<bool> isAccountLoaded;\n  late final Ed25519HDKeyPair keyPair;\n  late final SolanaProvider provider;\n  late double balance;\n  late final dynamic web3AuthInfo;\n\n  @override\n  void initState() {\n    super.initState();\n    isAccountLoaded = ValueNotifier<bool>(false);\n    provider = ServiceLocator.getIt<SolanaProvider>();\n    loadAccount(context);\n  }\n\n  Future<void> refreshBalance(BuildContext context) async {\n    try {\n      isAccountLoaded.value = false;\n      balance = await provider.getBalance(keyPair.address);\n      isAccountLoaded.value = true;\n    } catch (e, _) {\n      if (context.mounted) {\n        showInfoDialog(context, e.toString());\n      }\n    }\n  }\n\n  Widget get verticalGap => const SizedBox(height: 16);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: const Icon(Icons.logout),\n          onPressed: () {\n            logOut(context);\n          },\n        ),\n      ),\n      body: ValueListenableBuilder<bool>(\n        valueListenable: isAccountLoaded,\n        builder: (context, isLoaded, _) {\n          if (isLoaded) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  // ..\n                  verticalGap,\n                  // highlight-start\n                  OutlinedButton(\n                    onPressed: () {\n                      selfTransfer(context);\n                    },\n                    child: const Text(\n                      "Self transfer 0.0001 Sol",\n                    ),\n                  ),\n                  // highlight-end\n                  // ..\n                ],\n              ),\n            );\n          }\n          return const Center(child: CircularProgressIndicator.adaptive());\n        },\n      ),\n    );\n  }\n\n  // highlight-start\n  Future<void> selfTransfer(BuildContext context) async {\n    showLoader(context);\n    try {\n      final hash = await provider.sendSol(\n        destination: keyPair.address,\n        keyPair: keyPair,\n        value: 0.0001,\n      );\n      if (context.mounted) {\n        removeDialog(context);\n        showInfoDialog(context, "Success: $hash");\n        refreshBalance(context);\n      }\n    } catch (e, _) {\n      if (context.mounted) {\n        removeDialog(context);\n        showInfoDialog(context, e.toString());\n      }\n    }\n  }\n  // highlight-end\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"fetch-users-private-key",children:"Fetch User's Private Key"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"getEd25519PrivKey"})," is used to fetch the Ed25519 private key of the logged in user."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",children:"// Assuming user is already logged in.\n\nfinal privateKey = await Web3AuthFlutter.getEd25519PrivKey();\n"})})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>r});var a=t(67294);const i={},o=a.createContext(i);function r(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);