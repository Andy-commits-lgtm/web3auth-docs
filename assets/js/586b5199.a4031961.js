"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[92162],{89365:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(85893),n=t(11151);const s={title:"Initializing Web3auth CoreKit tKey MPC Swift SDK",sidebar_label:"Initialize",displayed_sidebar:"sdk",description:"Web3Auth CoreKit tKey MPC Swift SDK - Initiatize | Documentation - Web3Auth"},d=void 0,l={id:"sdk/core-kit/mpc-tkey-ios/initialize",title:"Initializing Web3auth CoreKit tKey MPC Swift SDK",description:"Web3Auth CoreKit tKey MPC Swift SDK - Initiatize | Documentation - Web3Auth",source:"@site/docs/sdk/core-kit/mpc-tkey-ios/initialize.mdx",sourceDirName:"sdk/core-kit/mpc-tkey-ios",slug:"/sdk/core-kit/mpc-tkey-ios/initialize",permalink:"/docs/sdk/core-kit/mpc-tkey-ios/initialize",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/sdk/core-kit/mpc-tkey-ios/initialize.mdx",tags:[],version:"current",frontMatter:{title:"Initializing Web3auth CoreKit tKey MPC Swift SDK",sidebar_label:"Initialize",displayed_sidebar:"sdk",description:"Web3Auth CoreKit tKey MPC Swift SDK - Initiatize | Documentation - Web3Auth"},sidebar:"sdk"},a={},c=[{value:"Configuring Service Provider",id:"configuring-service-provider",level:2},{value:"Initialization",id:"initialization",level:3},{value:"<code>SubVerifierDetails</code>",id:"subverifierdetails",level:4},{value:"<code>CustomAuth</code>",id:"customauth",level:4},{value:"Getting User Data from Custom Auth",id:"getting-user-data-from-custom-auth",level:2},{value:"Instantiating tKey",id:"instantiating-tkey",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3}];function o(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.p,{children:"Once you have installed the Web3Auth Core Kit tKey SDK, the next step is to initialize it. This involves a few steps, such as initiating the tKey SDK\nwith the service provider and modules."}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#configuring-service-provider",children:"Configuration of Service Provider"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#initializing-service-provider",children:"Initializing Service Provider"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"#instantiating-tkey",children:"Instantiation of tKey"})}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"configuring-service-provider",children:"Configuring Service Provider"}),"\n",(0,r.jsxs)(i.p,{children:["Service Provider in ",(0,r.jsx)(i.code,{children:"tKey"})," generates a ",(0,r.jsx)(i.a,{href:"/sdk/core-kit/tkey",children:(0,r.jsx)(i.strong,{children:"Share A"})}),", i.e., the private key share managed by a wallet service provider via their\nauthentication flows. This share in our ",(0,r.jsx)(i.a,{href:"/infrastructure/",children:"wallet infrastructure"})," refers to the social login aspect, where we associate a private key\nshare with the user's social login, enabling the seamless login experience."]}),"\n",(0,r.jsxs)(i.p,{children:["To configure your service provider, you must use ",(0,r.jsx)(i.a,{href:"https://github.com/torusresearch/customauth-swift-sdk",children:"CustomAuth Swift SDK"}),". Please note that this\nSDK is not automatically installed with tKey iOS SDK, so you must install it first."]}),"\n",(0,r.jsx)(i.h3,{id:"initialization",children:"Initialization"}),"\n",(0,r.jsx)(i.p,{children:"Initalize the SDK depending on the login you require."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-swift",children:'import CustomAuth\n\nlet sub = SubVerifierDetails(\n  loginType: .web, // default .web\n  loginProvider: "TYPE_OF_LOGIN", // .google, .facebook, .discord and other supported login providers\n  clientId: "CLIENT_ID",\n  verifierName: "VERIFIER_NAME",\n  redirectURL: "tdsdk://tdsdk/oauthCallback",\n  browserRedirectURL: "https://scripts.toruswallet.io/redirect.html")\n\nlet tdsdk = CustomAuth(\n  aggregateVerifierType: "TYPE_OF_VERIFIER", // singleLogin, singleIdVerifier supported\n  aggregateVerifierName: "VERIFIER_NAME", // Web3Auth Custom verifier name\n  subVerifierDetails: [sub],\n  network: .SAPPHIRE_DEVNET,\n  enableOneKey: true)\n'})}),"\n",(0,r.jsx)(i.h4,{id:"subverifierdetails",children:(0,r.jsx)(i.code,{children:"SubVerifierDetails"})}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Parameter"}),(0,r.jsx)(i.th,{children:"Type"}),(0,r.jsx)(i.th,{children:"Mandatory"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"loginType"})}),(0,r.jsx)(i.td,{children:"SubVerifierType"}),(0,r.jsx)(i.td,{children:"No"}),(0,r.jsxs)(i.td,{children:["loginType to be used. [ ",(0,r.jsx)(i.code,{children:"web"}),": default, ",(0,r.jsx)(i.code,{children:"installed"}),"]"]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"loginProvider"})}),(0,r.jsx)(i.td,{children:"LoginProviders"}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsxs)(i.td,{children:["loginProvider to be used. [ ",(0,r.jsx)(i.code,{children:"google"}),", ",(0,r.jsx)(i.code,{children:"facebook"}),", ",(0,r.jsx)(i.code,{children:"twitch"}),", ",(0,r.jsx)(i.code,{children:"reddit"}),", ",(0,r.jsx)(i.code,{children:"discord"}),", ",(0,r.jsx)(i.code,{children:"apple"}),", ",(0,r.jsx)(i.code,{children:"github"}),", ",(0,r.jsx)(i.code,{children:"linkedin"}),", ",(0,r.jsx)(i.code,{children:"kakao"}),", ",(0,r.jsx)(i.code,{children:"twitter"}),", ",(0,r.jsx)(i.code,{children:"weibo"}),", ",(0,r.jsx)(i.code,{children:"line"}),", ",(0,r.jsx)(i.code,{children:"wechat"}),", ",(0,r.jsx)(i.code,{children:"email_password"}),", and ",(0,r.jsx)(i.code,{children:"jwt"})," ]"]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"clientId"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsx)(i.td,{children:"login provider's client Id."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"verifier"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsx)(i.td,{children:"Web3Auth verifier name"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"redirectURL"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsxs)(i.td,{children:["It refers to a url for the login flow to redirect into your app, it should have a scheme that is registered by your app, for example ",(0,r.jsx)(i.code,{children:"com.mycompany.myapp://redirect"})]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"browserRedirectURL"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"No"}),(0,r.jsxs)(i.td,{children:["It refers to a page that the browser should use in the login flow, it should have a http or https scheme. e.g. ",(0,r.jsx)(i.code,{children:"https://scripts.toruswallet.io/redirect.html"})]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"jwtParams"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"No"}),(0,r.jsx)(i.td,{children:"Additional JWT parameters to be passed."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"urlSession"})}),(0,r.jsx)(i.td,{children:"URLSession"}),(0,r.jsx)(i.td,{children:"No"}),(0,r.jsx)(i.td,{children:"Custom URLSession to be used."})]})]})]}),"\n",(0,r.jsx)(i.h4,{id:"customauth",children:(0,r.jsx)(i.code,{children:"CustomAuth"})}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Parameter"}),(0,r.jsx)(i.th,{children:"Type"}),(0,r.jsx)(i.th,{children:"Mandatory"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"aggregateVerifierType"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsx)(i.td,{children:"Type of the aggregate verifier."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"aggregateVerifier"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsx)(i.td,{children:"Name of the aggregate verifier."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"subVerifierDetails"})}),(0,r.jsxs)(i.td,{children:["[",(0,r.jsx)(i.code,{children:"SubVerifierDetails"}),"]"]}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsx)(i.td,{children:"Array of SubVerifierDetails."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"network"})}),(0,r.jsx)(i.td,{children:"TorusNetwork"}),(0,r.jsx)(i.td,{children:"Yes"}),(0,r.jsxs)(i.td,{children:["Network to be used. [ ",(0,r.jsx)(i.code,{children:"SAPPHIRE_DEVNET"}),", ",(0,r.jsx)(i.code,{children:"SAPPHIRE_MAINNET"}),", ",(0,r.jsx)(i.code,{children:"MAINNET"}),", ",(0,r.jsx)(i.code,{children:"TESTNET"}),", ",(0,r.jsx)(i.code,{children:"CYAN"}),", ",(0,r.jsx)(i.code,{children:"AQUA"}),"]"]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"enableOneKey"})}),(0,r.jsx)(i.td,{children:"Bool"}),(0,r.jsx)(i.td,{children:"No"}),(0,r.jsx)(i.td,{children:"Use one key feature that allows users to have the same account in tKey. Note: This flag shouldn't be changed once set for an account; changing it will lead to a different account."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"networkUrl"})}),(0,r.jsx)(i.td,{children:"String"}),(0,r.jsx)(i.td,{children:"No"}),(0,r.jsx)(i.td,{children:"Custom network url to be used."})]})]})]}),"\n",(0,r.jsx)(i.h2,{id:"getting-user-data-from-custom-auth",children:"Getting User Data from Custom Auth"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"triggerLogin()"})," returns a promise that resolve with a Dictionary that contain ",(0,r.jsx)(i.code,{children:"finalKeyData"})," field to be used to initialize the tKey."]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-swift",children:'tdsdk.triggerLogin().done{ data in\n    print("user data", data)\n    self.userData = data\n}.catch{ err in\n    print(err)\n}\n'})}),"\n",(0,r.jsx)(i.h2,{id:"instantiating-tkey",children:"Instantiating tKey"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-swift",children:"let rss_comm = try RssComm()\nlet thresholdKey = try? ThresholdKey(\n  storage_layer: storage_layer,\n  service_provider: service_provider,\n  enable_logging: true,\n  manual_sync: false,\n  rss_comm: rss_comm)\n"})}),"\n",(0,r.jsx)(i.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Parameter"}),(0,r.jsx)(i.th,{children:"Type"}),(0,r.jsx)(i.th,{children:"Description"}),(0,r.jsx)(i.th,{children:"Mandatory"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"metadata"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"Metadata"})}),(0,r.jsx)(i.td,{children:"Metadata object containing the metadata details of tKey."}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"shares"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"ShareStorePolyIdIndexMap"})}),(0,r.jsx)(i.td,{children:"Array of ShareStore with PolyId."}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"storage_layer"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"StorageLayer"})}),(0,r.jsx)(i.td,{children:"Takes in the Storage Provider Instance"}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"service_provider"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"ServiceProvider"})}),(0,r.jsx)(i.td,{children:"Takes in the Service Provider Instance"}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"local_matadata_transitions"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"Metadata"})}),(0,r.jsx)(i.td,{children:"Existing local metadata to be used."}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"last_fetch_cloud_metadata"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"Metadata"})}),(0,r.jsx)(i.td,{children:"Existing cloud metadata to be used."}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"enable_logging"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"Bool"})}),(0,r.jsx)(i.td,{children:"This option is used to specify whether to enable logging or not."}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"manual_sync"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"Bool"})}),(0,r.jsx)(i.td,{children:"manual sync provides atomicity to your tkey share. If manual_sync is true, you should sync your local metadata transitions manually to your storage_layer, which means your storage layer doesn\u2019t know the local changes of your tkey unless you manually sync, gives atomicity. Otherwise, If manual_sync is false, then your local metadata changes will be synced automatically to your storage layer. If manual_sync = true and want to synchronize manually, you need to call sync_local_metadata_transitions() manually."}),(0,r.jsx)(i.td,{children:"No"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"rss_comm"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"RssComm"})}),(0,r.jsx)(i.td,{children:"RssComm object to be used. RSS client, required for TSS."}),(0,r.jsx)(i.td,{children:"No"})]})]})]}),"\n",(0,r.jsx)(i.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-swift",children:'let finalKeyData = userData["finalKeyData"] as? [String: Any]\n\nlet postboxkey = finalKeyData["privKey"] as? String\n\nlet verifier =  userData["verifier"] as? String\nlet verifierId = userData["verifierId"] as? String\n\nlet storage_layer = try? StorageLayer(\n  enable_logging: true,\n  host_url: "https://metadata.tor.us",\n  server_time_offset: 2)\n\nlet fnd = NodeDetailManager(network: .sapphire(.SAPPHIRE_DEVNET))\nlet nodeDetails = try await fnd.getNodeDetails(verifier: verifier, verifierID: verifierId)\n\nlet service_provider = try? ServiceProvider(\n  enable_logging: true,\n  postbox_key: postboxkey,\n  useTss: true,\n  verifier: verifier,\n  verifierId: verifierId,\n  nodeDetails: nodeDetails )\n\nlet rss_comm = try RssComm()\n\nlet thresholdKey = try? ThresholdKey(\n  storage_layer: storage_layer,\n  service_provider: service_provider,\n  enable_logging: true,\n  manual_sync: false,\n  rss_comm: rss_comm)\n'})}),"\n",(0,r.jsx)(i.p,{children:"The following parameters are required to initialize MPC tKey:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-swift",children:'@State private var signatures: [[String: Any]]!\n@State private var tssEndpoint: [String]!\n\nlet fetchKey = finalKeyData["evmAddress"] as? String\n\nlet sessionData = userData["sessionData"] as? [String: Any]\n\nlet sessionTokenData = sessionData["sessionTokenData"] as? [SessionToken]\n\nsignatures = sessionTokenData.map { token in\n    return [  "data": Data(hex: token.token)!.base64EncodedString(),\n              "sig": token.signature ]\n}\n\nlet torusUtils = TorusUtils(\n  enableOneKey: true,\n  network: .sapphire(.SAPPHIRE_DEVNET) )\n\ntssEndpoint = nodeDetails!.torusNodeTSSEndpoints\n'})})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},11151:(e,i,t)=>{t.d(i,{Z:()=>l,a:()=>d});var r=t(67294);const n={},s=r.createContext(n);function d(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);