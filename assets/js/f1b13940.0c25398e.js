"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[53379],{82219:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var t=a(85893),r=a(11151),o=a(85162),s=a(74866);const i={title:"Solana Provider",displayed_sidebar:"sdk",description:"Solana Provider | Documentation - Web3Auth"},l=void 0,c={id:"sdk/helper-sdks/providers/solana",title:"Solana Provider",description:"Solana Provider | Documentation - Web3Auth",source:"@site/docs/sdk/helper-sdks/providers/solana.mdx",sourceDirName:"sdk/helper-sdks/providers",slug:"/sdk/helper-sdks/providers/solana",permalink:"/docs/sdk/helper-sdks/providers/solana",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/sdk/helper-sdks/providers/solana.mdx",tags:[],version:"current",frontMatter:{title:"Solana Provider",displayed_sidebar:"sdk",description:"Solana Provider | Documentation - Web3Auth"},sidebar:"sdk",previous:{title:"EIP1193 (EVM) Provider",permalink:"/docs/sdk/helper-sdks/providers/evm"},next:{title:"XRPL Provider",permalink:"/docs/sdk/helper-sdks/providers/xrpl"}},d={},h=[{value:"<code>@web3auth/solana-provider</code>",id:"web3authsolana-provider",level:2},{value:"Installation",id:"installation",level:2},{value:"<code>@web3auth/solana-provider</code>",id:"web3authsolana-provider-1",level:4},{value:"Initialisation",id:"initialisation",level:2},{value:"Assign the <code>SolanaPrivateKeyProvider</code> class to a variable",id:"assign-the-solanaprivatekeyprovider-class-to-a-variable",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Chain Config",id:"chain-config",level:3},{value:"Example",id:"example",level:4},{value:"Setting up the provider",id:"setting-up-the-provider",level:2},{value:"For Web3Auth PnP Web SDKs",id:"for-web3auth-pnp-web-sdks",level:3},{value:"For Single Factor Auth Web SDK",id:"for-single-factor-auth-web-sdk",level:3},{value:"For tKey JS SDK",id:"for-tkey-js-sdk",level:3},{value:"Using the provider",id:"using-the-provider",level:2},{value:"Get User Account and Balance",id:"get-user-account-and-balance",level:3},{value:"<code>solana_requestAccounts</code>",id:"solana_requestaccounts",level:4},{value:"Example",id:"example-1",level:4},{value:"Sign a Transaction",id:"sign-a-transaction",level:3},{value:"<code>signTransaction</code>",id:"signtransaction",level:4},{value:"Example",id:"example-2",level:4},{value:"Sign all Transactions",id:"sign-all-transactions",level:3},{value:"<code>signAllTransactions</code>",id:"signalltransactions",level:4},{value:"Example:",id:"example-3",level:4},{value:"Sign and Send a Transaction",id:"sign-and-send-a-transaction",level:3},{value:"<code>signAndSendTransaction</code>",id:"signandsendtransaction",level:4},{value:"Example:",id:"example-4",level:4},{value:"Sign a Message",id:"sign-a-message",level:3},{value:"<code>signMessage</code>",id:"signmessage",level:4},{value:"Example",id:"example-5",level:4},{value:"Fetch User&#39;s Private Key",id:"fetch-users-private-key",level:3},{value:"<code>solanaPrivateKey</code>",id:"solanaprivatekey",level:4},{value:"Example",id:"example-6",level:4}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"web3authsolana-provider",children:(0,t.jsx)(n.a,{href:"https://npmjs.com/package/@web3auth/solana-provider",children:(0,t.jsx)(n.code,{children:"@web3auth/solana-provider"})})}),"\n",(0,t.jsxs)(n.p,{children:["The Solana Blockchain Provider is basically a wrapper around the ",(0,t.jsx)(n.a,{href:"https://solana.com/docs/rpc",children:"Solana JSON RPC API"})," making it easier to interact with\nthe Solana Blockchain."]}),"\n",(0,t.jsx)(n.p,{children:"In this section we'll explore more about how you can use this provider with our SDKs."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h4,{id:"web3authsolana-provider-1",children:(0,t.jsx)(n.a,{href:"https://npmjs.com/package/@web3auth/solana-provider",children:(0,t.jsx)(n.code,{children:"@web3auth/solana-provider"})})}),"\n",(0,t.jsxs)(s.Z,{groupId:"npm2yarn",children:[(0,t.jsx)(o.Z,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save @web3auth/solana-provider\n"})})}),(0,t.jsx)(o.Z,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add @web3auth/solana-provider\n"})})}),(0,t.jsx)(o.Z,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add @web3auth/solana-provider\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"initialisation",children:"Initialisation"}),"\n",(0,t.jsxs)(n.p,{children:["Import the ",(0,t.jsx)(n.code,{children:"SolanaPrivateKeyProvider"})," ",(0,t.jsx)(n.strong,{children:"class"})," from ",(0,t.jsx)(n.code,{children:"@web3auth/solana-provider"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { SolanaPrivateKeyProvider } from "@web3auth/solana-provider";\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"assign-the-solanaprivatekeyprovider-class-to-a-variable",children:["Assign the ",(0,t.jsx)(n.code,{children:"SolanaPrivateKeyProvider"})," class to a variable"]}),"\n",(0,t.jsx)(n.p,{children:"After creating your Web3Auth instance, you need to initialize the Torus Wallet UI Plugin and add it to a class for further usage."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const privateKeyProvider = new SolanaPrivateKeyProvider({ config: SolanaPrivKeyProviderConfig });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This constructor takes an object with a config of ",(0,t.jsx)(n.code,{children:"SolanaPrivKeyProviderConfig"})," as input."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"SolanaPrivKeyProviderConfig"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'export interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, "chainNamespace">;\n}\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * web socket target Url for the chain\n   */\n  wsTarget?: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n  /**\n   * Number of decimals for the currency ticker (e.g: 18)\n   */\n  decimals?: number;\n};\nexport interface BaseProviderConfig extends BaseConfig {\n  chainConfig: Partial<CustomChainConfig>;\n  networks?: Record<string, CustomChainConfig>;\n  skipLookupNetwork?: boolean;\n}\nexport interface BaseConfig {\n  /**\n   *  Determines if this controller is enabled\n   */\n  disabled?: boolean;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"chain-config",children:"Chain Config"}),"\n",(0,t.jsx)(n.p,{children:"While connecting your preferred chain, you need to pass the chainConfig as a parameter. For solana you can use one of the following chain configs\naccording to your use case."}),"\n",(0,t.jsxs)(s.Z,{defaultValue:"mainnet",values:[{label:"Solana Mainnet",value:"mainnet"},{label:"Solana Testnet",value:"testnet"},{label:"Solana Devnet",value:"devnet"}],children:[(0,t.jsx)(o.Z,{value:"mainnet",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  chainId: "0x1", // Please use 0x1 for Mainnet\n  rpcTarget: "" // Please use some Production RPC Target for Solana Mainnet\n  displayName: "Solana Mainnet",\n  blockExplorer: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n};\n'})})}),(0,t.jsx)(o.Z,{value:"testnet",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  chainId: "0x2", // Please use 0x2 for Testnet\n  rpcTarget: "" // Please use some Testing/ Public RPC Target for Solana Tesnet\n  displayName: "Solana Testnet",\n  blockExplorer: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n};\n'})})}),(0,t.jsx)(o.Z,{value:"devnet",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  chainId: "0x3", // Please use 0x3 for Devnet\n  rpcTarget: "" // Please use some Testing/ Public RPC Target for Solana Devnet\n  displayName: "Solana Devnet",\n  blockExplorer: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n};\n'})})})]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  chainId: "0x3", // Please use 0x1 for Mainnet, 0x2 for Testnet, 0x3 for Devnet\n  rpcTarget: "https://api.devnet.solana.com",\n  displayName: "Solana Devnet",\n  blockExplorer: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n};\n\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: { chainConfig },\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-the-provider",children:"Setting up the provider"}),"\n",(0,t.jsx)(n.h3,{id:"for-web3auth-pnp-web-sdks",children:"For Web3Auth PnP Web SDKs"}),"\n",(0,t.jsxs)(n.p,{children:["If you are using ",(0,t.jsx)(n.code,{children:'chainNamespace: "solana"'})," while initializing ",(0,t.jsx)(n.code,{children:"Web3Auth"})," or ",(0,t.jsx)(n.code,{children:"Web3AuthNoModal"})," with the ",(0,t.jsx)(n.code,{children:"OpenloginAdapter"}),", you need to add the\n",(0,t.jsx)(n.code,{children:"privateKeyProvider"})," to the OpenLogin instance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  chainId: "0x3", // Please use 0x1 for Mainnet, 0x2 for Testnet, 0x3 for Devnet\n  rpcTarget: "https://api.devnet.solana.com",\n  displayName: "Solana Devnet",\n  blockExplorer: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n};\n\nconst web3auth = new Web3AuthNoModal({\n  clientId,\n  chainConfig,\n  web3AuthNetwork: "sapphire_mainnet",\n});\n\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: { chainConfig },\n});\n\nconst openloginAdapter = new OpenloginAdapter({\n  privateKeyProvider,\n  adapterSettings: {...},\n  mfaSettings: {...},\n  loginSettings: {...},\n});\nweb3auth.configureAdapter(openloginAdapter);\n\nconst web3authProvider = await web3auth.connectTo(\n  WALLET_ADAPTERS.OPENLOGIN,\n  {\n    loginProvider: "google",\n  }\n);\n\n// use this provider to interact with the blockchain\n'})}),"\n",(0,t.jsx)(n.h3,{id:"for-single-factor-auth-web-sdk",children:"For Single Factor Auth Web SDK"}),"\n",(0,t.jsx)(n.p,{children:"While using the SFA Web SDK, you need to pass the provider during the initialisation of SDK, while calling the init() function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  chainId: "0x3", // Please use 0x1 for Mainnet, 0x2 for Testnet, 0x3 for Devnet\n  rpcTarget: "https://api.devnet.solana.com",\n  displayName: "Solana Devnet",\n  blockExplorer: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n};\n\nconst web3authSfa = new Web3Auth({\n  clientId, // Get your Client ID from the Web3Auth Dashboard\n  chainConfig,\n  web3AuthNetwork: "sapphire_mainnet",\n  usePnPKey: false, // Setting this to true returns the same key as PnP Web SDK, By default, this SDK returns CoreKitKey.\n});\n\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: { chainConfig },\n});\n\nweb3authSfa.init(privateKeyProvider);\n\nconst web3authProvider = await web3authSFAuth.connect({\n  verifier,\n  verifierId: sub,\n  idToken,\n});\n\n// use this provider to interact with the blockchain\n'})}),"\n",(0,t.jsx)(n.h3,{id:"for-tkey-js-sdk",children:"For tKey JS SDK"}),"\n",(0,t.jsx)(n.p,{children:"In tKey JS SDK, there is not internal method of passing the provider directly. Hence, you need to setup the provider using the private key generated\nfrom tKey, using the setupProvider function of the SolanaPrivateKeyProvider."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"setupProvider(privKey: string): Promise<void>;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { getED25519Key } from "@toruslabs/openlogin-ed25519";\n\n// please complete the tKey setup and login before this.\nconst chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  chainId: "0x3", // Please use 0x1 for Mainnet, 0x2 for Testnet, 0x3 for Devnet\n  rpcTarget: "https://api.devnet.solana.com",\n  displayName: "Solana Devnet",\n  blockExplorer: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n};\n\nconst reconstructedKey = await tKey.reconstructKey();\nsecp256k1privateKey = reconstructedKey?.privKey.toString("hex");\n\nconst privateKey = getED25519Key(secp256k1privateKey).sk.toString("hex");\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: { chainConfig },\n});\n\nawait privateKeyProvider.setupProvider(privateKey);\nprovider = privateKeyProvider.provider;\n\n// use this provider to interact with the blockchain\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-the-provider",children:"Using the provider"}),"\n",(0,t.jsxs)(n.p,{children:["On connection, you can use ",(0,t.jsx)(n.code,{children:"web3auth.provider"})," as a solana provider with ",(0,t.jsx)(n.code,{children:"@web3auth/solana-provider"})," along with\n",(0,t.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/",children:"@solana/web3.js"})," library."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { SolanaWallet } from "@web3auth/solana-provider";\n\nconst solanaWallet = new SolanaWallet(provider);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Once you have setup the provider, you can use the standard functions in the ",(0,t.jsx)(n.code,{children:"solana/web3.js"})," library to get user's account, perform transaction, sign\na message etc. Here we have listed a few examples to help you get started there:"]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["All the RPC methods which are available by default on Solana Blockchain are also available on the Solana Provider. Although, for the case of ",(0,t.jsx)(n.code,{children:"phantom"}),"\nadapter they are not available."]}),(0,t.jsxs)(n.p,{children:["You can refer to standard RPC calls for Solana ",(0,t.jsx)(n.a,{href:"https://solana.com/docs/rpc",children:"here"})]})]}),"\n",(0,t.jsx)(n.h3,{id:"get-user-account-and-balance",children:"Get User Account and Balance"}),"\n",(0,t.jsx)(n.h4,{id:"solana_requestaccounts",children:(0,t.jsx)(n.code,{children:"solana_requestAccounts"})}),"\n",(0,t.jsx)(n.p,{children:"This method is used fetch the address of connected account."}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\nimport { SolanaWallet } from "@web3auth/solana-provider";\n\nconst solanaWallet = new SolanaWallet(provider);\n\n// Get user\'s Solana public address\nconst accounts = await solanaWallet.requestAccounts();\n\nconst connectionConfig = await solanaWallet.request({\n  method: "solana_provider_config",\n  params: [],\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\n// Fetch the balance for the specified public key\nconst balance = await connection.getBalance(new PublicKey(accounts[0]));\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sign-a-transaction",children:"Sign a Transaction"}),"\n",(0,t.jsx)(n.h4,{id:"signtransaction",children:(0,t.jsx)(n.code,{children:"signTransaction"})}),"\n",(0,t.jsxs)(n.p,{children:["This method is used to sign a single serialized transaction and it returns a signed ",(0,t.jsx)(n.code,{children:"Transaction"})," object."]}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\nimport { SolanaWallet } from "@web3auth/solana-provider";\n\nconst solanaWallet = new SolanaWallet(provider);\n\nconst connectionConfig = await solanaWallet.request({\n  method: "solana_provider_config",\n  params: [],\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\nconst accounts = await solanaWallet.requestAccounts();\nconst blockhash = (await connection.getRecentBlockhash("finalized")).blockhash;\nconst TransactionInstruction = SystemProgram.transfer({\n  fromPubkey: new PublicKey(accounts[0]),\n  toPubkey: new PublicKey(accounts[0]),\n  lamports: 0.01 * LAMPORTS_PER_SOL,\n});\nconst transaction = new Transaction({\n  recentBlockhash: blockhash,\n  feePayer: new PublicKey(pubKey[0]),\n}).add(TransactionInstruction);\n\nconst signedTx = await solanaWallet.signTransaction(transaction);\nconsole.log(signedTx.signature);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sign-all-transactions",children:"Sign all Transactions"}),"\n",(0,t.jsx)(n.h4,{id:"signalltransactions",children:(0,t.jsx)(n.code,{children:"signAllTransactions"})}),"\n",(0,t.jsxs)(n.p,{children:["This method is used to sign a list of serialized transactions and it returns back list of signed of ",(0,t.jsx)(n.code,{children:"Transaction"})," objects."]}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\nimport { SolanaWallet } from "@web3auth/solana-provider";\n\nconst solanaWallet = new SolanaWallet(provider);\n\nconst connectionConfig = await solanaWallet.request({\n  method: "solana_provider_config",\n  params: [],\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\nconst accounts = await solanaWallet.requestAccounts();\nconst blockhash = (await connection.getRecentBlockhash("finalized")).blockhash;\nconst TransactionInstruction = SystemProgram.transfer({\n  fromPubkey: new PublicKey(accounts[0]),\n  toPubkey: new PublicKey(accounts[0]),\n  lamports: 0.01 * LAMPORTS_PER_SOL,\n});\nconst transaction = new Transaction({\n  recentBlockhash: blockhash,\n  feePayer: new PublicKey(pubKey[0]),\n}).add(TransactionInstruction);\n\nconst signedTx = await solanaWallet.signAllTransactions(transaction);\nconsole.log(signedTx.signature);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sign-and-send-a-transaction",children:"Sign and Send a Transaction"}),"\n",(0,t.jsx)(n.h4,{id:"signandsendtransaction",children:(0,t.jsx)(n.code,{children:"signAndSendTransaction"})}),"\n",(0,t.jsx)(n.p,{children:"This function is used to sign and broadcast the transaction on chain. It returns the signature of broadcasted transaction."}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\nimport { SolanaWallet } from "@web3auth/solana-provider";\n\nconst solanaWallet = new SolanaWallet(provider);\n\nconst connectionConfig = await solanaWallet.request({\n  method: "solana_provider_config",\n  params: [],\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\nconst accounts = await solanaWallet.requestAccounts();\nconst blockhash = (await connection.getRecentBlockhash("finalized")).blockhash;\nconst TransactionInstruction = SystemProgram.transfer({\n  fromPubkey: new PublicKey(accounts[0]),\n  toPubkey: new PublicKey(accounts[0]),\n  lamports: 0.01 * LAMPORTS_PER_SOL,\n});\nconst transaction = new Transaction({\n  recentBlockhash: blockhash,\n  feePayer: new PublicKey(pubKey[0]),\n}).add(TransactionInstruction);\nconst { signature } = await solanaWallet.signAndSendTransaction(transaction);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sign-a-message",children:"Sign a Message"}),"\n",(0,t.jsx)(n.h4,{id:"signmessage",children:(0,t.jsx)(n.code,{children:"signMessage"})}),"\n",(0,t.jsx)(n.p,{children:"This method is used sign any message from connected wallet."}),"\n",(0,t.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\nimport { SolanaWallet } from "@web3auth/solana-provider";\n\nconst solanaWallet = new SolanaWallet(provider);\n\nconst msg = Buffer.from("Test Signing Message ", "utf8");\nconst result = await solanaWallet.signMessage(msg);\nconsole.log(result.toString());\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fetch-users-private-key",children:"Fetch User's Private Key"}),"\n",(0,t.jsx)(n.h4,{id:"solanaprivatekey",children:(0,t.jsx)(n.code,{children:"solanaPrivateKey"})}),"\n",(0,t.jsxs)(n.p,{children:["This method is used to fetch the private key of logged in user. It is only available for ",(0,t.jsx)(n.code,{children:"in-app"})," adapters like ",(0,t.jsx)(n.code,{children:"openlogin"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'//Assuming user is already logged in.\nasync getPrivateKey() {\n  const privateKey = await web3auth.provider.request({\n    method: "solanaPrivateKey"\n  });\n  //Do something with privateKey\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},85162:(e,n,a)=>{a.d(n,{Z:()=>s});a(67294);var t=a(36905);const r={tabItem:"tabItem_Ymn6"};var o=a(85893);function s(e){let{children:n,hidden:a,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.Z)(r.tabItem,s),hidden:a,children:n})}},74866:(e,n,a)=>{a.d(n,{Z:()=>j});var t=a(67294),r=a(36905),o=a(12466),s=a(16550),i=a(20469),l=a(91980),c=a(67392),d=a(50012);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}(a);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:a}=e;const r=(0,s.k6)(),o=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l._X)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function v(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,o=u(e),[s,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,h]=g({queryString:a,groupId:r}),[v,m]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,d.Nk)(a);return[r,(0,t.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),x=(()=>{const e=c??v;return p({value:e,tabValues:o})?e:null})();(0,i.Z)((()=>{x&&l(x)}),[x]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),m(e)}),[h,m,o]),tabValues:o}}var m=a(72389);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=a(85893);function b(e){let{className:n,block:a,selectedValue:t,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const n=e.currentTarget,a=l.indexOf(n),r=i[a].value;r!==t&&(c(n),s(r))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;n=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;n=l[a]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n),children:i.map((e=>{let{value:n,label:a,attributes:o}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...o,className:(0,r.Z)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function y(e){let{lazy:n,children:a,selectedValue:r}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function S(e){const n=v(e);return(0,f.jsxs)("div",{className:(0,r.Z)("tabs-container",x.tabList),children:[(0,f.jsx)(b,{...e,...n}),(0,f.jsx)(y,{...e,...n})]})}function j(e){const n=(0,m.Z)();return(0,f.jsx)(S,{...e,children:h(e.children)},String(n))}},11151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>s});var t=a(67294);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);