"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[17246],{57619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=n(85893),r=n(11151);const s={title:"Different Private Keys/ Wallet Address across Integrations",image:"images/docs-meta-cards/documentation-card.png",displayed_sidebar:"docs",description:"Different Private Keys across Integrations | Documentation - Web3Auth"},o=void 0,a={id:"troubleshooting/different-private-key",title:"Different Private Keys/ Wallet Address across Integrations",description:"Different Private Keys across Integrations | Documentation - Web3Auth",source:"@site/docs/troubleshooting/different-private-key.mdx",sourceDirName:"troubleshooting",slug:"/troubleshooting/different-private-key",permalink:"/docs/troubleshooting/different-private-key",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/troubleshooting/different-private-key.mdx",tags:[],version:"current",frontMatter:{title:"Different Private Keys/ Wallet Address across Integrations",image:"images/docs-meta-cards/documentation-card.png",displayed_sidebar:"docs",description:"Different Private Keys across Integrations | Documentation - Web3Auth"},sidebar:"docs",previous:{title:"Troubleshooting with Web3Auth",permalink:"/docs/troubleshooting/"},next:{title:"SDK Errors & Warnings",permalink:"/docs/troubleshooting/sdk-errors-warnings"}},l={},d=[{value:"Verifier",id:"verifier",level:2},{value:"Aggregate Verifier",id:"aggregate-verifier",level:3},{value:"Client ID",id:"client-id",level:2},{value:"Environment",id:"environment",level:2},{value:"Product",id:"product",level:2},{value:"Migrating between SDKs",id:"migrating-between-sdks",level:3},{value:"Plug and Play to Core Kit Migration",id:"plug-and-play-to-core-kit-migration",level:4},{value:"To Single Factor Auth (SFA) SDKs",id:"to-single-factor-auth-sfa-sdks",level:5},{value:"To tKey JS SDK",id:"to-tkey-js-sdk",level:5},{value:"If you&#39;re looking to use Core Kit SDKs in the future, planning the use Plug and Play SDKs right now, make sure:",id:"if-youre-looking-to-use-core-kit-sdks-in-the-future-planning-the-use-plug-and-play-sdks-right-now-make-sure",level:5},{value:"Core Kit to Plug and Play Migration",id:"core-kit-to-plug-and-play-migration",level:4}];function h(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Developers and users frequently face confusion when they get different wallet addresses for multitudes of reasons. Here's our attempt to explain the\npossible reasons for different wallet addresses and what to keep in mind while designing your solutions."}),"\n",(0,i.jsx)(t.h2,{id:"verifier",children:"Verifier"}),"\n",(0,i.jsx)(t.p,{children:"A verifier is a piece of information about the OAuth provider being used by the application, which is queried by web3auth auth network nodes from a\nsmart contract deployed on the Ethereum blockchain to verify the JWT token."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["To know more about creating verifiers, please refer to ",(0,i.jsx)(t.a,{href:"/auth-provider-setup/verifiers",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.p,{children:"If you use the same verifier across every SDK your wallet address will not change, since all SDKs support all the same verifier information."}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["You might face errors where users using different social login credentials use different methods (like Google Login and Email Passwordless), and\nreceive different wallet addresses/ keys. This is because, ",(0,i.jsx)(t.strong,{children:"when you use different login providers, verifiers do change,"})," even though the id, sub,\nemail etc fields remain the same. For such cases, you can use an Aggregate Verifier."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"aggregate-verifier",children:"Aggregate Verifier"}),"\n",(0,i.jsx)(t.p,{children:"An aggregate verifier combines multiple login methods to create a verifier to get the same wallet address for your user for the same email ID\nregardless of their login providers, for example, combining a Google and Email Passwordless login or Google and GitHub via Auth0 to access the same\nkey for your user."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Refer to the docs ",(0,i.jsx)(t.a,{href:"/auth-provider-setup/aggregate-verifier",children:"here"})," to know more about creating an aggregate verifier."]})}),"\n",(0,i.jsx)(t.p,{children:"Here, multiple sub-verifiers are combined under one single aggregate verifier, and one wallet address is generated from the aggregate verifier. So for\nIn the case discussed above verifiers with different login providers can be added as sub-verifiers under one aggregate verifier, which would allow\nusers get a single wallet address provided one of the fields (like email) stays the same across sub-verifiers."}),"\n",(0,i.jsx)(t.h2,{id:"client-id",children:"Client ID"}),"\n",(0,i.jsx)(t.p,{children:"To get your Client ID, it's as simple as setting up a new Plug and Play project on the Web3Auth dashboard. Now, \"Plug and Play\" might sound technical,\nbut it's just a way of describing the pre-packaged user interface and experience that Web3Auth has ready for you. The idea here is to integrate\nWeb3Auth into your project as easily and efficiently as possible, saving you the hassle of building everything from scratch."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["To get a client ID for your project, please refer to ",(0,i.jsx)(t.a,{href:"/dashboard-setup/projects-and-analytics",children:"here"}),"."]})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Wallet addresses change if the client ID changes. Please use the same client ID across all your SDK integrations to get the same wallet address."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"environment",children:"Environment"}),"\n",(0,i.jsxs)(t.p,{children:["While creating a verifier you need to select between ",(0,i.jsx)(t.code,{children:"testnet"}),", ",(0,i.jsx)(t.code,{children:"mainnet"}),", ",(0,i.jsx)(t.code,{children:"aqua"}),", ",(0,i.jsx)(t.code,{children:"cyan"}),", ",(0,i.jsx)(t.code,{children:"sapphire_devnet"}),", and ",(0,i.jsx)(t.code,{children:"sapphire_mainnet"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"testnet"})," and ",(0,i.jsx)(t.code,{children:"sapphire_devnet"})," are sandbox environments for developers to experiment with. People usually test and finish their integration here.\n",(0,i.jsx)(t.code,{children:"mainnet"}),", ",(0,i.jsx)(t.code,{children:"aqua"}),", ",(0,i.jsx)(t.code,{children:"cyan"})," & ",(0,i.jsx)(t.code,{children:"sapphire_mainnet"})," are the production environments for scalable applications."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Every network has different nodes and that causes the keys to change. If you move from one network to another, the keys are meant to change."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"product",children:"Product"}),"\n",(0,i.jsx)(t.p,{children:"Every product across the Web3Auth Stack has a different set of keys, owing to how the infrastructure is set up and how the keys are generated. At\nlarge, we can consider 3 different sets of Web3Auth Products:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Core Kit: Includes Web3Auth SFA and tKey SDKs. Contain the base key generation logic according to the verifier selected."}),"\n",(0,i.jsx)(t.li,{children:"Plug and Play: Includes the Plug and Play SDKs across various platforms. The keys here are generated from the Core Kit SDKs, however, the keys are\ndifferent because of the subkey generation logic. Keys here change according to the verifier and client ID selected."}),"\n",(0,i.jsx)(t.li,{children:"Torus Wallet: It is a wallet built on top of our Core Kit SDK. It has a different set of keys because it is an application integration Web3Auth and\nnot directly related to any of our infrastructure offerings."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"migrating-between-sdks",children:"Migrating between SDKs"}),"\n",(0,i.jsx)(t.p,{children:"Whether you're seeking to optimize your current user flows or want to try out new features, migrating from one Web3Auth product to another can be a\npowerful way to enhance your application. However, it's crucial to handle migrations properly to ensure security and seamless user experience."}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsx)(t.p,{children:"Migrations might involve changing the wallets, that can lead to loss of access to the user's account. Please ensure you meet all the requirements for\nmigrating between SDKs."})}),"\n",(0,i.jsx)(t.h4,{id:"plug-and-play-to-core-kit-migration",children:"Plug and Play to Core Kit Migration"}),"\n",(0,i.jsx)(t.p,{children:"This is one of the most common migration paths. Usually, developers start with the Web3Auth Plug and Play for low engineering effort and then\ntransition to Core Kit for a more customized integration."}),"\n",(0,i.jsx)(t.admonition,{type:"danger",children:(0,i.jsx)(t.p,{children:"This migration is only possible if you've used custom authentication with your own login verifiers with Plug and Play SDKs. If you're using the\nstandard authentication flows, the keys will change in the new integration."})}),"\n",(0,i.jsx)(t.h5,{id:"to-single-factor-auth-sfa-sdks",children:"To Single Factor Auth (SFA) SDKs"}),"\n",(0,i.jsxs)(t.p,{children:["If you're migrating to SFA SDKs, you can directly use the SDK with the same Client ID, alongside authentication and verifier details. Additionally, by\nsetting the ",(0,i.jsx)(t.code,{children:"usePnPKey"})," flag to ",(0,i.jsx)(t.code,{children:"true"}),", you can get the same key as the Plug and Play SDKs. However, if a user has enabled MFA, they will not be able\nto use the SFA SDKs."]}),"\n",(0,i.jsx)(t.h5,{id:"to-tkey-js-sdk",children:"To tKey JS SDK"}),"\n",(0,i.jsxs)(t.p,{children:["If you're migrating to the tKey JS SDK, it is a more manual process in total. Firstly, you need to use the same authentication and verifier details as\nthe plug-and-play integration, but additionally, you need to create a subkey of the final private key generated by the Plug and Play SDKs. To do this,\nyou'll need to use the ",(0,i.jsx)(t.code,{children:"@toruslabs/openlogin-subkey"})," and generate a subkey of the private key with your Plug and Play Client ID as the parameter."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { subkey } from "@toruslabs/openlogin-subkey";\n\nsubkey(PRIVATE_KEY.padStart(64, "0"), Buffer.from(CLIENT_ID, "base64"));\n'})}),"\n",(0,i.jsxs)(t.admonition,{title:"Pre-planning Migrations",type:"info",children:[(0,i.jsx)(t.p,{children:"Ideally, we would recommend you use the products within the correct configuration to minimize the migration efforts. Ideally, using the Single Factor\nAuth SDK beforehand and then shifting to tKey SDK works best for most integrations, pre-planning your key requirements while using Plug and Play SDKs\ncan be helpful."}),(0,i.jsx)(t.h5,{id:"if-youre-looking-to-use-core-kit-sdks-in-the-future-planning-the-use-plug-and-play-sdks-right-now-make-sure",children:"If you're looking to use Core Kit SDKs in the future, planning the use Plug and Play SDKs right now, make sure:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"You're using Custom Authentication with your own login verifiers."}),"\n",(0,i.jsxs)(t.li,{children:["Set the ",(0,i.jsx)(t.code,{children:"useCoreKitKey"})," flag to ",(0,i.jsx)(t.code,{children:"true"})]}),"\n"]})]}),"\n",(0,i.jsx)(t.h4,{id:"core-kit-to-plug-and-play-migration",children:"Core Kit to Plug and Play Migration"}),"\n",(0,i.jsxs)(t.p,{children:["This migration typically occurs when developers want to leverage the prebuilt UI/UX of the Plug and Play SDKs for user MFA. Use the same verifier\ndetails from your Core Kit integration in the custom authentication feature of Plug and Play. Set the ",(0,i.jsx)(t.code,{children:"useCoreKitKey"})," flag to ",(0,i.jsx)(t.code,{children:"true"})," to use the same\nprivate key as the Core Kit SDKs."]})]})}function c(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var i=n(67294);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);