"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[83263],{91487:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var t=r(85893),a=r(11151),i=r(74866),s=r(85162);const o={title:"XRPL Provider",displayed_sidebar:"sdk",description:"XRPL Provider | Documentation - Web3Auth"},l=void 0,c={id:"sdk/helper-sdks/providers/xrpl",title:"XRPL Provider",description:"XRPL Provider | Documentation - Web3Auth",source:"@site/docs/sdk/helper-sdks/providers/xrpl.mdx",sourceDirName:"sdk/helper-sdks/providers",slug:"/sdk/helper-sdks/providers/xrpl",permalink:"/docs/sdk/helper-sdks/providers/xrpl",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/sdk/helper-sdks/providers/xrpl.mdx",tags:[],version:"current",frontMatter:{title:"XRPL Provider",displayed_sidebar:"sdk",description:"XRPL Provider | Documentation - Web3Auth"},sidebar:"sdk",previous:{title:"Solana Provider",permalink:"/docs/sdk/helper-sdks/providers/solana"},next:{title:"Common Provider",permalink:"/docs/sdk/helper-sdks/providers/common"}},d={},u=[{value:"<code>@web3auth/xrpl-provider</code>",id:"web3authxrpl-provider",level:2},{value:"Installation",id:"installation",level:2},{value:"<code>@web3auth/xrpl-provider</code>",id:"web3authxrpl-provider-1",level:4},{value:"Initialisation",id:"initialisation",level:2},{value:"Assign the <code>XrplPrivateKeyProvider</code> class to a variable",id:"assign-the-xrplprivatekeyprovider-class-to-a-variable",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Chain Config",id:"chain-config",level:3},{value:"Example",id:"example",level:4},{value:"Setting up the provider",id:"setting-up-the-provider",level:2},{value:"For Web3Auth PnP Web SDKs",id:"for-web3auth-pnp-web-sdks",level:3},{value:"Usage",id:"usage",level:2},{value:"Get User Account and Balance",id:"get-user-account-and-balance",level:3},{value:"<code>xrpl_getAccounts</code>",id:"xrpl_getaccounts",level:4},{value:"Example",id:"example-1",level:4},{value:"Sign a Transaction",id:"sign-a-transaction",level:3},{value:"<code>xrpl_signTransaction</code>",id:"xrpl_signtransaction",level:4},{value:"Example",id:"example-2",level:4},{value:"Sign and Send a Transaction",id:"sign-and-send-a-transaction",level:3},{value:"<code>xrpl_submitTransaction</code>",id:"xrpl_submittransaction",level:4},{value:"Example:",id:"example-3",level:4},{value:"Sign a Message",id:"sign-a-message",level:3},{value:"<code>xrpl_signMessage</code>",id:"xrpl_signmessage",level:4},{value:"Example",id:"example-4",level:4},{value:"Fetch User&#39;s Private Key",id:"fetch-users-private-key",level:3},{value:"<code>private_key</code>",id:"private_key",level:4},{value:"Example",id:"example-5",level:4}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"web3authxrpl-provider",children:(0,t.jsx)(n.a,{href:"https://npmjs.com/package/@web3auth/xrpl-provider",children:(0,t.jsx)(n.code,{children:"@web3auth/xrpl-provider"})})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@web3auth/xrpl-provider"})," is a Web3Auth provider that simplifies interaction with the XRPL Blockchain by serving as a wrapper around the\n",(0,t.jsx)(n.a,{href:"https://xrpl.org/request-formatting.html",children:"XRPL JSON RPC API"}),". It is used to interact with the XRPL blockchain and perform various operations like\ngetting user's account, balance, signing a transaction, sending a transaction etc."]}),"\n",(0,t.jsx)(n.p,{children:"In this section we'll explore more about how you can use this provider with our SDKs."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h4,{id:"web3authxrpl-provider-1",children:(0,t.jsx)(n.a,{href:"https://npmjs.com/package/@web3auth/xrpl-provider",children:(0,t.jsx)(n.code,{children:"@web3auth/xrpl-provider"})})}),"\n",(0,t.jsxs)(i.Z,{groupId:"npm2yarn",children:[(0,t.jsx)(s.Z,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save @web3auth/xrpl-provider\n"})})}),(0,t.jsx)(s.Z,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add @web3auth/xrpl-provider\n"})})}),(0,t.jsx)(s.Z,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add @web3auth/xrpl-provider\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"initialisation",children:"Initialisation"}),"\n",(0,t.jsxs)(n.p,{children:["Import the ",(0,t.jsx)(n.code,{children:"XrplPrivateKeyProvider"})," ",(0,t.jsx)(n.strong,{children:"class"})," from ",(0,t.jsx)(n.code,{children:"@web3auth/xrpl-provider"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { XrplPrivateKeyProvider } from "@web3auth/xrpl-provider";\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"assign-the-xrplprivatekeyprovider-class-to-a-variable",children:["Assign the ",(0,t.jsx)(n.code,{children:"XrplPrivateKeyProvider"})," class to a variable"]}),"\n",(0,t.jsx)(n.p,{children:"After creating your Web3Auth instance, you need to initialize the Torus Wallet UI Plugin and add it to a class for further usage."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const privateKeyProvider = new XrplPrivateKeyProvider({ config: XrplPrivKeyProviderConfig });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This constructor takes an object with a config of ",(0,t.jsx)(n.code,{children:"XrplPrivKeyProviderConfig"})," as input."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"XrplPrivKeyProviderConfig"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'export interface XrplPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, "chainNamespace"> & Pick<CustomChainConfig, "wsTarget">;\n}\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * web socket target Url for the chain\n   */\n  wsTarget?: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n  /**\n   * Number of decimals for the currency ticker (e.g: 18)\n   */\n  decimals?: number;\n};\nexport interface BaseProviderConfig extends BaseConfig {\n  chainConfig: Partial<CustomChainConfig>;\n  networks?: Record<string, CustomChainConfig>;\n  skipLookupNetwork?: boolean;\n}\nexport interface BaseConfig {\n  /**\n   *  Determines if this controller is enabled\n   */\n  disabled?: boolean;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"chain-config",children:"Chain Config"}),"\n",(0,t.jsxs)(n.p,{children:["For getting the Chain Config for XRPL Chain, you need to use the ",(0,t.jsx)(n.code,{children:"getXRPLChainConfig"})," function from ",(0,t.jsx)(n.code,{children:"@web3auth/xrpl-provider"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'export declare const getXRPLChainConfig: (\n  network: XRPLNetworkType,\n  customChainConfig?: Partial<Omit<CustomChainConfig, "chainNamespace">>\n) => CustomChainConfig & Pick<CustomChainConfig, "wsTarget">;\n'})}),"\n",(0,t.jsx)(n.p,{children:"In this function, you can pass over your custom config as well as just the network type for web3auth to generate a standard config according to your\nrequirement."}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const xrplProvider: any = new XrplPrivateKeyProvider({\n  config: { chainConfig: getXRPLChainConfig("testnet") },\n}); // devnet, testnet, mainnet\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-the-provider",children:"Setting up the provider"}),"\n",(0,t.jsx)(n.h3,{id:"for-web3auth-pnp-web-sdks",children:"For Web3Auth PnP Web SDKs"}),"\n",(0,t.jsxs)(n.p,{children:["If you are using ",(0,t.jsx)(n.code,{children:'chainNamespace: "other"'})," while initializing ",(0,t.jsx)(n.code,{children:"Web3Auth"})," or ",(0,t.jsx)(n.code,{children:"Web3AuthNoModal"})," with the ",(0,t.jsx)(n.code,{children:"OpenloginAdapter"}),", you need to add the\n",(0,t.jsx)(n.code,{children:"privateKeyProvider"})," to the OpenLogin instance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Web3Auth } from "@web3auth/modal";\nimport { CHAIN_NAMESPACES } from "@web3auth/base";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { XrplPrivateKeyProvider, getXRPLChainConfig } from "@web3auth/xrpl-provider";\nimport { convertStringToHex, Payment, xrpToDrops } from "xrpl";\n\nconst web3auth = new Web3Auth({\n  chainConfig: {\n    chainNamespace: CHAIN_NAMESPACES.OTHER,\n  },\n  clientId = "YOUR_WEB3AUTH_CLIENT_ID", // get from https://dashboard.web3auth.io\n  web3AuthNetwork = "sapphire_mainnet",\n});\n\nconst xrplProvider = new XrplPrivateKeyProvider({\n  config: {\n    chainConfig: getXRPLChainConfig("testnet"), // devnet, testnet, mainnet\n  },\n});\n\nconst adapter = new OpenloginAdapter({\n  privateKeyProvider: xrplProvider, // <-- Injecting the XRPL provider\n});\nweb3AuthInstance.configureAdapter(adapter);\n\nawait web3auth.initModal();\n\nconst web3authProvider = await web3auth.connect();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["After configuring the provider, you may utilize various functions from the ",(0,t.jsx)(n.code,{children:"@web3auth/xrpl-provider"})," library for tasks such as obtaining the user's\naccount, executing transactions, and signing messages. Below are a few sample use cases to assist you in getting started:"]}),"\n",(0,t.jsx)(n.h3,{id:"get-user-account-and-balance",children:"Get User Account and Balance"}),"\n",(0,t.jsx)(n.h4,{id:"xrpl_getaccounts",children:(0,t.jsx)(n.code,{children:"xrpl_getAccounts"})}),"\n",(0,t.jsx)(n.p,{children:"The purpose of this function is to retrieve the details of the connected account."}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'try {\n  // web3authProvider is from above\n  const accounts = await web3authProvider.request<string[]>({\n    method: "xrpl_getAccounts",\n  });\n\n  if (accounts) {\n    const accInfo = (await web3authProvider.request({\n      method: "account_info",\n      params: [\n        {\n          account: accounts[0],\n          strict: true,\n          ledger_index: "current",\n          queue: true,\n        },\n      ],\n    })) as Record<string, Record<string, string>>;\n    console.log("XRPL account info", accInfo);\n    // xrpl Account\n    const account = accInfo?.account_data?.Account;\n    // Balance\n    const balance = accInfo?.account_data?.Balance;\n  } else {\n    console.log("No accounts found, please report this issue.");\n  }\n} catch (error) {\n  console.error("Error", error);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sign-a-transaction",children:"Sign a Transaction"}),"\n",(0,t.jsx)(n.h4,{id:"xrpl_signtransaction",children:(0,t.jsx)(n.code,{children:"xrpl_signTransaction"})}),"\n",(0,t.jsx)(n.p,{children:"The function is utilized for signing transactions."}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'try {\n  const accounts = await web3authProvider.request<string[]>({\n    method: "xrpl_getAccounts",\n  });\n\n  if (accounts && accounts.length > 0) {\n    const tx: Payment = {\n      TransactionType: "Payment",\n      Account: accounts[0] as string,\n      Amount: xrpToDrops(2),\n      Destination: "rJAHHPYmy4g3h7kzfj2Mzm2nHwpKuVdEvX", // Destination address\n    };\n    const txSign = await web3authProvider.request({\n      method: "xrpl_signTransaction",\n      params: {\n        transaction: tx,\n      },\n    });\n    console.log("txRes", txSign);\n  } else {\n    console.log("failed to fetch accounts");\n  }\n} catch (error) {\n  console.log("error", error);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sign-and-send-a-transaction",children:"Sign and Send a Transaction"}),"\n",(0,t.jsx)(n.h4,{id:"xrpl_submittransaction",children:(0,t.jsx)(n.code,{children:"xrpl_submitTransaction"})}),"\n",(0,t.jsx)(n.p,{children:"The purpose of this function is to sign and broadcast a transaction onto the blockchain. Upon successful execution, it will return the signature of\nthe broadcasted transaction."}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'try {\n  const accounts = await web3authProvider.request<string[]>({\n    method: "xrpl_getAccounts",\n  });\n\n  if (accounts && accounts.length > 0) {\n    const tx: Payment = {\n      TransactionType: "Payment",\n      Account: accounts[0] as string,\n      Amount: xrpToDrops(2),\n      Destination: "rJAHHPYmy4g3h7kzfj2Mzm2nHwpKuVdEvX",\n    };\n    const txSign = await provider.request({\n      method: "xrpl_submitTransaction",\n      params: {\n        transaction: tx,\n      },\n    });\n    console.log("txRes", txSign);\n  } else {\n    console.log("failed to fetch accounts");\n  }\n} catch (error) {\n  console.log("error", error);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sign-a-message",children:"Sign a Message"}),"\n",(0,t.jsx)(n.h4,{id:"xrpl_signmessage",children:(0,t.jsx)(n.code,{children:"xrpl_signMessage"})}),"\n",(0,t.jsx)(n.p,{children:"This method is utilized for signing any message using the currently connected wallet."}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'try {\n  const msg = "Hello world";\n  const hexMsg = convertStringToHex(msg);\n  const txSign = await web3authProvider.request<{ signature: string }>({\n    method: "xrpl_signMessage",\n    params: {\n      message: hexMsg,\n    },\n  });\n  console.log("txRes", txSign);\n} catch (error) {\n  console.log("error", error);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fetch-users-private-key",children:"Fetch User's Private Key"}),"\n",(0,t.jsx)(n.h4,{id:"private_key",children:(0,t.jsx)(n.code,{children:"private_key"})}),"\n",(0,t.jsx)(n.p,{children:"The purpose of this method is to retrieve the private key of the currently logged-in user."}),"\n",(0,t.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'//Assuming user is already logged in.\nasync getPrivateKey() {\n\tconst privateKey = await web3authProvider.request({\n\t\tmethod: "private_key"\n\t});\n\t//Do something with privateKey\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},85162:(e,n,r)=>{r.d(n,{Z:()=>s});r(67294);var t=r(36905);const a={tabItem:"tabItem_Ymn6"};var i=r(85893);function s(e){let{children:n,hidden:r,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,s),hidden:r,children:n})}},74866:(e,n,r)=>{r.d(n,{Z:()=>y});var t=r(67294),a=r(36905),i=r(12466),s=r(16550),o=r(20469),l=r(91980),c=r(67392),d=r(50012);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}}))}(r);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:r}=e;const a=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l._X)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,i=h(e),[s,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[c,u]=g({queryString:r,groupId:a}),[x,v]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,d.Nk)(r);return[a,(0,t.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:a}),m=(()=>{const e=c??x;return p({value:e,tabValues:i})?e:null})();(0,o.Z)((()=>{m&&l(m)}),[m]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),v(e)}),[u,v,i]),tabValues:i}}var v=r(72389);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(85893);function b(e){let{className:n,block:r,selectedValue:t,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const n=e.currentTarget,r=l.indexOf(n),a=o[r].value;a!==t&&(c(n),s(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},n),children:o.map((e=>{let{value:n,label:r,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...i,className:(0,a.Z)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function j(e){let{lazy:n,children:r,selectedValue:a}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,a.Z)("tabs-container",m.tabList),children:[(0,f.jsx)(b,{...e,...n}),(0,f.jsx)(j,{...e,...n})]})}function y(e){const n=(0,v.Z)();return(0,f.jsx)(w,{...e,children:u(e.children)},String(n))}},11151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>s});var t=r(67294);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);