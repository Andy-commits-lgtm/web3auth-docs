"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[78200],{82499:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var i=t(85893),s=t(11151),r=t(85162),o=t(74866);const a={title:"Bring your own custom JWT Providers",displayed_sidebar:"docs",description:"Bring your own custom JWT Providers | Documentation - Web3Auth",image:"images/docs-meta-cards/documentation-card.png"},l=void 0,c={id:"auth-provider-setup/byo-jwt-providers",title:"Bring your own custom JWT Providers",description:"Bring your own custom JWT Providers | Documentation - Web3Auth",source:"@site/docs/auth-provider-setup/byo-jwt-providers.mdx",sourceDirName:"auth-provider-setup",slug:"/auth-provider-setup/byo-jwt-providers",permalink:"/docs/auth-provider-setup/byo-jwt-providers",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/auth-provider-setup/byo-jwt-providers.mdx",tags:[],version:"current",frontMatter:{title:"Bring your own custom JWT Providers",displayed_sidebar:"docs",description:"Bring your own custom JWT Providers | Documentation - Web3Auth",image:"images/docs-meta-cards/documentation-card.png"},sidebar:"docs",previous:{title:"Federated / Identity Providers",permalink:"/docs/auth-provider-setup/federated-identity-providers"},next:{title:"Connecting Blockchains with Web3Auth",permalink:"/docs/connect-blockchain/"}},d={},u=[{value:"Set up Custom JWT Verifier",id:"set-up-custom-jwt-verifier",level:2},{value:"Using <code>jsonwebtoken</code> to generate JWT",id:"using-jsonwebtoken-to-generate-jwt",level:2},{value:"Using RSA for JWT Signing",id:"using-rsa-for-jwt-signing",level:3},{value:"Using ECDSA for JWT Signing",id:"using-ecdsa-for-jwt-signing",level:3},{value:"Login with JWT (idToken - jsonwebtoken)",id:"login-with-jwt-idtoken---jsonwebtoken",level:3},{value:"Using <code>jose</code> to generate JWT",id:"using-jose-to-generate-jwt",level:2},{value:"Login with JWT (idToken - jose)",id:"login-with-jwt-idtoken---jose",level:3},{value:"Using <code>passport-jwt</code> to generate JWT",id:"using-passport-jwt-to-generate-jwt",level:2},{value:"Login with JWT (idToken - passport-jwt)",id:"login-with-jwt-idtoken---passport-jwt",level:3},{value:"Filled Custom JWT Verifier",id:"filled-custom-jwt-verifier",level:2},{value:"What are JWKS?",id:"what-are-jwks",level:2},{value:"How to create JWKS?",id:"how-to-create-jwks",level:3},{value:"How to convert PEM to JWKS?",id:"how-to-convert-pem-to-jwks",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"You can incorporate your login providers by utilizing one of the custom login schemes, including RSA or ECDSA signatures. By doing so, your users can\ncontinue using your current login providers or your custom authentication scheme."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Custom JWT authentication is only supported with ",(0,i.jsx)(n.a,{href:"/sdk/pnp/web/no-modal/",children:(0,i.jsx)(n.code,{children:"Web3Auth Plug and Play No Modal SDK"})})," since the Web3Auth PnP Modal SDK will\nonly help you configure the social logins within the Modal UI."]})}),"\n",(0,i.jsx)(n.p,{children:"For signing the JWT, your application must follow the JWT specification and use the private key corresponding to the JWKS. And the public keys of the\nJWT should be exposed through an endpoint, which is used by Web3Auth to verify the JWT."}),"\n",(0,i.jsx)(n.admonition,{title:"Facing issue with JWT?",type:"warning",children:(0,i.jsxs)(n.p,{children:["Check out ",(0,i.jsx)(n.a,{href:"/troubleshooting/jwt-errors",children:(0,i.jsx)(n.strong,{children:"this troubleshooting page to fix those."})})]})}),"\n",(0,i.jsx)(n.h2,{id:"set-up-custom-jwt-verifier",children:"Set up Custom JWT Verifier"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Custom JWT Provider on Web3Auth Dashboard",src:t(50473).Z+"",width:"1840",height:"1191"})}),"\n",(0,i.jsx)(n.p,{children:"To create a custom verifier for your JWT Providers, you'll need"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"JWT Verifier ID"}),": JWT Verifier ID is the unique identifier to publicly represent a user on a verifier. e.g: ",(0,i.jsx)(n.code,{children:"sub"}),", ",(0,i.jsx)(n.code,{children:"email"}),", or even a custom\nfield of your JWT payload that is unique in your system for each user."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"JWK Endpoint"}),": An endpoint containing the JWKS used for signing the JWT."]}),"\n",(0,i.jsxs)(n.p,{children:["Check ",(0,i.jsx)(n.a,{href:"#what-are-jwks",children:"What are JWKS and How to create one from PEM"})," to learn how to create JWKS."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="Your JWKS must have the following fields."',children:'{\n  "keys": [\n    {\n      "kty": "RSA",\n      "kid": "{your_kid}",\n      "use": "sig",\n      "alg": "RS256",\n      "n": "{your_n}",\n      "e": "{your_e}"\n    }\n  ]\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"JWT Validations"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Your JWT header must contain the ",(0,i.jsx)(n.code,{children:"kid"})," field and the payload data must contain the ",(0,i.jsx)(n.code,{children:"iat"})," field."]})}),"\n",(0,i.jsxs)(n.p,{children:["You can add up to 3 validation fields, including any claims like ",(0,i.jsx)(n.code,{children:"aud"}),", ",(0,i.jsx)(n.code,{children:"sub"}),", ",(0,i.jsx)(n.code,{children:"iss"}),", ",(0,i.jsx)(n.code,{children:"email_verified"})," etc. These are the claims against which a\nJWT is validated."]}),"\n",(0,i.jsx)(n.p,{children:"Here are a couple of examples to be used in validation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Token Audience ( ",(0,i.jsx)(n.code,{children:"aud"}),' ): The "aud" (audience) claim identifies the recipients for which the JWT is intended. Each principal intended to process\nthe JWT MUST identify itself with a value in the audience claim. If the principal processing the claim does not identify itself with a value in\nthe "aud" claim when this claim is present, then the JWT will be rejected. The ',(0,i.jsx)(n.code,{children:"aud"})," value is a case-sensitive string containing a StringOrURI\nvalue. The interpretation of audience values is generally application-specific."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Token Issuer ( ",(0,i.jsx)(n.code,{children:"iss"})," ): The issuing authority of the token. The ",(0,i.jsx)(n.code,{children:"iss"})," value is a case-sensitive string containing a StringOrURI value. Use of\nthis claim is OPTIONAL."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Token Subject ( ",(0,i.jsx)(n.code,{children:"sub"})," ): The subject of the token. The ",(0,i.jsx)(n.code,{children:"sub"})," value is a case-sensitive string containing a StringOrURI value. Use of this claim\nis OPTIONAL."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Token Email Verified ( ",(0,i.jsx)(n.code,{children:"email_verified"})," ): The email verified claim is a boolean value that indicates whether the email address has been\nverified."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"using-jsonwebtoken-to-generate-jwt",children:["Using ",(0,i.jsx)(n.code,{children:"jsonwebtoken"})," to generate JWT"]}),"\n","\n","\n",(0,i.jsxs)(o.Z,{defaultValue:"rsa",values:[{label:"RSA",value:"rsa"},{label:"ECDSA",value:"ecdsa"}],children:[(0,i.jsxs)(r.Z,{value:"rsa",children:[(0,i.jsx)(n.h3,{id:"using-rsa-for-jwt-signing",children:"Using RSA for JWT Signing"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// Step 1. npm init -y\n// Step 2. npm install jsonwebtoken\n// Step 3. create an index.js file and paste the below code\nimport jwt from "jsonwebtoken";\nimport fs from "fs";\n// openssl genrsa -out privateKey.pem 2048\nvar privateKey = fs.readFileSync("privateKey.pem");\n// openssl rsa -in privateKey.pem -pubout -out publicKey.pem\n// var publicKey = fs.readFileSync("publicKey.pem");\n// https://my-authz-server/.well-known/jwks.json -> publicKey to be used in Custom Authentication as JWK Endpoint.\n// Check out below to convert PEM to JWKS\n\nvar token = jwt.sign(\n  {\n    sub: "faj2720i2fdG7NsqznOKrthDvq43", // must be unique to each user\n    name: "Mohammad Shahbaz Alam",\n    email: "shahbaz@web3auth.io",\n    aud: "urn:my-resource-server", // -> to be used in Custom Authentication as JWT Field\n    iss: "https://my-authz-server", // -> to be used in Custom Authentication as JWT Field\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + 60 * 60,\n  },\n  privateKey,\n  { algorithm: "RS256", keyid: "1bb9605c36e69386830202b2d" }, // <-- Replace it with your kid. This has to be present in the JWKS endpoint.\n);\n\nconsole.log(token);\n// Step 4. open terminal inside the vscode and type\n// openssl genrsa -out privateKey.pem 2048\n// This is the private key used to sign the JWT.\n// Step 5. inside the vscode terminal type\n// openssl rsa -in privateKey.pem -pubout -out publicKey.pem\n// This is the public key used to verify the JWT. This is the key that is used to make JWKS.\n// Check out below to convert PEM to JWKS\n// Store it in gist, public folder or somewhere else that is accessible to the public.\n// like this enpoint: https://my-authz-server/.well-known/jwks.json\n// Step 6. Create the JWT Verifier in Web3Auth Dashboard as per the above fields of JWT.\n'})})]}),(0,i.jsxs)(r.Z,{value:"ecdsa",children:[(0,i.jsx)(n.h3,{id:"using-ecdsa-for-jwt-signing",children:"Using ECDSA for JWT Signing"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// Step 1. npm init -y\n// Step 2. npm install jsonwebtoken\n// Step 3. create an index.js file and paste the below code\nimport jwt from "jsonwebtoken";\nimport fs from "fs";\n// openssl ecparam -name secp256k1 -genkey -noout -out ec-secp256k1-privateKey.pem\nvar privateKey = fs.readFileSync("ec-secp256k1-privateKey.pem");\n// openssl ec -in ec-secp256k1-privateKey.pem -pubout -out ec-secp256k1-publicKey.pem\n// var publicKey = fs.readFileSync("ec-secp256k1-publicKey.pem");\n// https://my-authz-server/.well-known/jwks.json -> publicKey to be used in Custom Authentication as JWK Endpoint.\n// Check out below to convert PEM to JWKS\n\nvar token = jwt.sign(\n  {\n    sub: "faj2720i2fdG7NsqzncndijwnKrthDvq43",\n    name: "Mohammad Shahbaz Alam",\n    email: "shahbaz@web3auth.io",\n    aud: "urn:my-resource-server", // -> to be used in Custom Authentication as JWT Field\n    iss: "https://my-authz-server", // -> to be used in Custom Authentication as JWT Field\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + 60 * 60,\n  },\n  privateKey,\n  { algorithm: "ECDSA", keyid: "1bb9605c36e69386830202b2d" }, // <-- Replace it with your kid. This has to be present in the JWKS endpoint.\n);\n\nconsole.log(token);\n// Step 4. open terminal inside the vscode and type\n// openssl ecparam -name secp256k1 -genkey -noout -out ec-secp256k1-privateKey.pem\n// This is the private key used to sign the JWT.\n// Step 5. inside the vscode terminal type\n// openssl ec -in ec-secp256k1-privateKey.pem -pubout -out ec-secp256k1-publicKey.pem\n// This is the public key used to verify the JWT. This is the key that is used to make JWKS.\n// Check out below to convert PEM to JWKS\n// Store it in gist, public folder or somewhere else that is accessible to the public.\n// like this enpoint: https://my-authz-server/.well-known/jwks.json\n// Step 6. Create the JWT Verifier in Web3Auth Dashboard as per the above fields of JWT.\n'})})]})]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"#filled-custom-jwt-verifier",children:"this"})," to set up the custom jwt verifier using the above JWT data on the Web3Auth Dashboard."]}),"\n",(0,i.jsx)(n.h3,{id:"login-with-jwt-idtoken---jsonwebtoken",children:"Login with JWT (idToken - jsonwebtoken)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: "0x1",\n  rpcTarget: "https://rpc.ankr.com/eth",\n  displayName: "Ethereum Mainnet",\n  blockExplorerUrl: "https://etherscan.io",\n  ticker: "ETH",\n  tickerName: "Ethereum",\n  logo: "https://images.toruswallet.io/ethereum.svg"\n};\n\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig } });\n\nconst web3auth = new Web3AuthNoModal({\n  clientId: "", // Web3Auth Client ID\n  web3AuthNetwork: "saphhire_mainnet",\n  privateKeyProvider: privateKeyProvider,\n  useCoreKitKey: false,\n});\n\n\nconst openloginAdapter = new OpenloginAdapter({\n  adapterSettings: {\n    uxMode: "redirect", // redirect or popup\n    loginConfig: {\n      jwt: {\n        verifier: "verifier-name", // name of the verifier created on Web3Auth Dashboard\n        typeOfLogin: "jwt",\n        clientId: "", // Web3Auth Client ID\n      },\n    },\n  },\n  privateKeyProvider,\n});\n\nawait web3auth.connectTo(WALLET_ADAPTERS.OPENLOGIN, {\n  loginProvider: "jwt",\n  extraLoginOptions: {\n    id_token: "YOUR_GENERATED_ID_TOKEN",\n    verifierIdField: "sub", // sub, email, or custom\n  },\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"using-jose-to-generate-jwt",children:["Using ",(0,i.jsx)(n.code,{children:"jose"})," to generate JWT"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// Step 1. npm init -y && npm install jose\n// Step 2. create an index.js file and paste the below code\nimport * as jose from "jose";\nimport fs from "fs";\n// openssl genrsa -out privateKey.pem 2048\nvar privateKey = fs.readFileSync("privateKey.pem");\n// openssl rsa -in privateKey.pem -pubout -out publicKey.pem\nvar publicKey = fs.readFileSync("publicKey.pem");\n// https://my-authz-server/.well-known/jwks.json -> to be used in Custom Authentication as JWK Endpoint.\n\n// Signing the JWT\nconst jwt = await new jose.SignJWT({ "urn:example:claim": true })\n  .setProtectedHeader({ alg: "RS256", kid: "1bb9605c36e69386830202b2d" }) // <-- Replace it with your kid. This has to be present in the JWKS endpoint.\n  .setIssuedAt()\n  .setIssuer("https://my-authz-server")\n  .setAudience("urn:my-resource-server")\n  .setExpirationTime("2h")\n  .sign(privateKey);\n\nconsole.log(jwt);\n\n// Verifying the JWT using Remote JWK Set.\n// This is just to show how the Verify works, look above to set-up custom jwt verifier on the Web3Auth Dashboard.\nconst JWKS = jose.createRemoteJWKSet(new URL("https://my-authz-server/.well-known/jwks.json"));\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, JWKS, {\n  issuer: "https://my-authz-server",\n  audience: "urn:my-resource-server",\n});\n\nconsole.log(protectedHeader);\nconsole.log(payload);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"#filled-custom-jwt-verifier",children:"this"})," to set up the custom jwt verifier using the above JWT data on the Web3Auth Dashboard."]}),"\n",(0,i.jsx)(n.h3,{id:"login-with-jwt-idtoken---jose",children:"Login with JWT (idToken - jose)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="Example"',children:'const chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: "0x1",\n  rpcTarget: "https://rpc.ankr.com/eth",\n  displayName: "Ethereum Mainnet",\n  blockExplorerUrl: "https://etherscan.io",\n  ticker: "ETH",\n  tickerName: "Ethereum",\n  logo: "https://images.toruswallet.io/ethereum.svg"\n};\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig } });\n\nconst web3auth = new Web3AuthNoModal({\n  clientId: "", // Web3Auth Client ID\n  web3AuthNetwork: "saphhire_mainnet",\n  useCoreKitKey: false,\n  privateKeyProvider: privateKeyProvider,\n});\n\nconst openloginAdapter = new OpenloginAdapter({\n  adapterSettings: {\n    uxMode: "redirect", // redirect or popup\n    loginConfig: {\n      jwt: {\n        verifier: "verifier-name", // name of the verifier created on Web3Auth Dashboard\n        typeOfLogin: "jwt",\n        clientId: "", // Web3Auth Client ID\n      },\n    },\n  },\n  privateKeyProvider,\n});\n\nawait web3auth.connectTo(WALLET_ADAPTERS.OPENLOGIN, {\n  loginProvider: "jwt",\n  extraLoginOptions: {\n    id_token: "YOUR_GENERATED_ID_TOKEN",\n    verifierIdField: "sub", // sub, email, or custom\n  },\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"using-passport-jwt-to-generate-jwt",children:["Using ",(0,i.jsx)(n.code,{children:"passport-jwt"})," to generate JWT"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"jwks-rsa - Passport Example"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"jwks-rsa"})," library provides a small helper that makes it easy to configure ",(0,i.jsx)(n.code,{children:"passport-jwt"})," with the ",(0,i.jsx)(n.code,{children:"RS256"})," algorithm. Using ",(0,i.jsx)(n.code,{children:"passportJwtSecret"}),"\nyou can generate a secret provider that will provide the right signing key to ",(0,i.jsx)(n.code,{children:"passport-jwt"})," based on the ",(0,i.jsx)(n.code,{children:"kid"})," in the JWT header."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Step 1. npm init -y && npm install passport-jwt\n// Step 2. create an index.js file and paste the below code\nconst Express = require('express');\nconst passport = require('passport');\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\nconst jwksRsa = require('jwks-rsa');\n\n...\n// Initialize the app.\nconst app = new Express();\n\npassport.use(\n  new JwtStrategy({\n    // Dynamically provide a signing key based on the kid in the header and the signing keys provided by the JWKS endpoint.\n    secretOrKeyProvider: jwksRsa.passportJwtSecret({\n      cache: true,\n      rateLimit: true,\n      jwksRequestsPerMinute: 5,\n      jwksUri: `https://my-authz-server/.well-known/jwks.json`\n    }),\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\n    // Validate the audience and the issuer.\n    audience: 'urn:my-resource-server',\n    issuer: 'https://my-authz-server',\n    algorithms: ['RS256']\n  },\n  verify)\n);\n\napp.use(passport.initialize());\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"#filled-custom-jwt-verifier",children:"this"})," to set up the custom jwt verifier using the above JWT data on the Web3Auth Dashboard."]}),"\n",(0,i.jsx)(n.h3,{id:"login-with-jwt-idtoken---passport-jwt",children:"Login with JWT (idToken - passport-jwt)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="Example"',children:'import { Web3AuthNoModal } from "@web3auth/no-modal";\nimport { EthereumPrivateKeyProvider } from "@web3auth/ethereum-provider";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\n\nconst chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: "0x1",\n  rpcTarget: "https://rpc.ankr.com/eth",\n  displayName: "Ethereum Mainnet",\n  blockExplorerUrl: "https://etherscan.io",\n  ticker: "ETH",\n  tickerName: "Ethereum",\n   logo: "https://images.toruswallet.io/ethereum.svg"\n};\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig } });\n\n\nconst web3auth = new Web3AuthNoModal({\n  clientId: "", // Web3Auth Client ID\n  web3AuthNetwork: "saphhire_mainnet",\n  useCoreKitKey: false,\n  privateKeyProvider: privateKeyProvider,\n});\n\nconst openloginAdapter = new OpenloginAdapter({\n  adapterSettings: {\n    uxMode: "redirect", // redirect or popup\n    loginConfig: {\n      jwt: {\n        verifier: "verifier-name", // name of the verifier created on Web3Auth Dashboard\n        typeOfLogin: "jwt",\n        clientId: "", // Web3Auth Client ID\n      },\n    },\n  },\n  privateKeyProvider,\n});\n\nawait web3auth.connectTo(WALLET_ADAPTERS.OPENLOGIN, {\n  loginProvider: "jwt",\n  extraLoginOptions: {\n    id_token: "YOUR_GENERATED_ID_TOKEN",\n    verifierIdField: "sub", // sub, email, or custom\n  },\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"filled-custom-jwt-verifier",children:"Filled Custom JWT Verifier"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Custom JSON Web Token Provider on Web3Auth Dashboard",src:t(51e3).Z+"",width:"13008",height:"11568"})}),"\n",(0,i.jsx)(n.h2,{id:"what-are-jwks",children:"What are JWKS?"}),"\n",(0,i.jsx)(n.p,{children:"JWKS stands for JSON Web Key Set. It is a set of keys containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the\nauthorization server and signed using the RS256 signing algorithm."}),"\n",(0,i.jsx)(n.h3,{id:"how-to-create-jwks",children:"How to create JWKS?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Most of the login providers that support JWT-based login will provide you this URL, such as Firebase, Google, Auth0, AWS Cognito etc."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Firebase: ",(0,i.jsx)(n.code,{children:"https://www.googleapis.com/service_accounts/v1/jwk/{your-project-id}"})]}),"\n",(0,i.jsxs)(n.li,{children:["Auth0: ",(0,i.jsx)(n.code,{children:"https://{your-domain}/.well-known/jwks.json"})]}),"\n",(0,i.jsxs)(n.li,{children:["Google: ",(0,i.jsx)(n.code,{children:"https://www.googleapis.com/oauth2/v3/certs"})]}),"\n",(0,i.jsxs)(n.li,{children:["AWS Cognito: ",(0,i.jsx)(n.code,{children:"https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"If you are using your own custom JWT, you will need to convert your PEM file to JWKS."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-to-convert-pem-to-jwks",children:"How to convert PEM to JWKS?"}),"\n",(0,i.jsxs)(n.p,{children:["If you're using ",(0,i.jsx)(n.code,{children:"jose"})," or ",(0,i.jsx)(n.code,{children:"jsonwebtoken"})," library, you can use the following steps to convert your PEM file to JWKS."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create a Private Key using openssl."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"openssl genrsa -out privateKey.pem 2048\n"})}),"\n",(0,i.jsx)(n.p,{children:"This privateKey will be used to sign the token."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Using the above privateKey.pem file, create a Public Key."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"openssl rsa -in privateKey.pem -pubout -out publicKey.pem\n"})}),"\n",(0,i.jsx)(n.p,{children:"This publicKey.pem file will be converted to JWKS."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Convert the publicKey.pem file to JWKS."}),"\n",(0,i.jsxs)(n.p,{children:["Now, look for a tool that converts ",(0,i.jsx)(n.code,{children:".pem"})," to ",(0,i.jsx)(n.code,{children:"jwk(s)"})," format."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["One of the tools is ",(0,i.jsx)(n.a,{href:"https://pem2jwk.vercel.app/",children:"https://pem2jwk.vercel.app/"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Select Signing Algorithm: ",(0,i.jsx)(n.code,{children:"RS256"})]}),"\n",(0,i.jsxs)(n.li,{children:["Select Public Key Use: ",(0,i.jsx)(n.code,{children:"Signing"})]}),"\n",(0,i.jsxs)(n.li,{children:["Key ID: ",(0,i.jsx)(n.code,{children:"paste-yours"})," or leave it blank to generate a random one."]}),"\n",(0,i.jsxs)(n.li,{children:["PEM encoded key: ",(0,i.jsx)(n.code,{children:"{paste-the-publicKey-pem-file-s-content-here}"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Click on the ",(0,i.jsx)(n.code,{children:"Convert to JWK"})," button."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://web3auth.io/community/uploads/default/optimized/2X/3/3e58a3b7378b9778b0b2d646ec2a3cf47c56ee5e_2_690x448.jpeg",alt:"JWKS Convert Tool"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To complete the process, you need to save the output as a ",(0,i.jsx)(n.code,{children:".json"})," file, host it on your server, and make sure it's publicly accessible."]}),"\n",(0,i.jsxs)(n.p,{children:["This will give you the ",(0,i.jsx)(n.code,{children:"JWKS Endpoint"}),", which is required when setting up a ",(0,i.jsx)(n.code,{children:"Custom JWT Verifier"})," on the Web3Auth Dashboard."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>o});t(67294);var i=t(36905);const s={tabItem:"tabItem_Ymn6"};var r=t(85893);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)(s.tabItem,o),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>x});var i=t(67294),s=t(36905),r=t(12466),o=t(16550),a=t(20469),l=t(91980),c=t(67392),d=t(50012);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:s}}=e;return{value:n,label:t,attributes:i,default:s}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function j(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[c,u]=m({queryString:t,groupId:s}),[j,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,d.Nk)(t);return[s,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),v=(()=>{const e=c??j;return p({value:e,tabValues:r})?e:null})();(0,a.Z)((()=>{v&&l(v)}),[v]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var g=t(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var w=t(85893);function b(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),s=a[t].value;s!==i&&(c(n),o(s))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,w.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,w.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...r,className:(0,s.Z)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:s}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,w.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=j(e);return(0,w.jsxs)("div",{className:(0,s.Z)("tabs-container",v.tabList),children:[(0,w.jsx)(b,{...e,...n}),(0,w.jsx)(f,{...e,...n})]})}function x(e){const n=(0,g.Z)();return(0,w.jsx)(y,{...e,children:u(e.children)},String(n))}},51e3:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/custom-jsonwebtoken-verifier-ab82e86043a997b0f4fd04c3ce497315.png"},50473:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/create-verifier-custom-jwt-ebb56e916d8d8ae86a97d4a95b0bbe1b.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(67294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);