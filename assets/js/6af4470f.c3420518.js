"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[20031],{18786:(e,n,a)=>{a.d(n,{ZP:()=>i});var t=a(85893),o=a(11151);function r(e){const n={code:"code",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"After logging in, the Web3Auth instance will provide you with information regarding the user that is logged in. This information is obtained directly\nfrom the JWT token and is not stored by Web3Auth. Therefore, this information can only be accessed through social logins after the user has logged\ninto your application."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const user = await web3auth.getUserInfo(); // web3auth instance\n"})})]})}function i(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},50210:(e,n,a)=>{a.d(n,{ZP:()=>l});var t=a(85893),o=a(11151),r=a(74866),i=a(85162);function s(e){const n={code:"code",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(r.Z,{defaultValue:"modal",values:[{label:"PnP Modal SDK",value:"modal"},{label:"PnP NoModal SDK",value:"no-modal"},{label:"CoreKit SFA Web SDK",value:"sfa"},{label:"CoreKit MFA tKey JS SDK",value:"tkey"}],children:[(0,t.jsx)(i.Z,{value:"modal",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Web3Auth } from "@web3auth/modal";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\nimport { WEB3AUTH_NETWORK } from "@web3auth/base";\n\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: { chainConfig: chainConfig }\n});\n\nconst web3auth = new Web3Auth({\n  // Get it from Web3Auth Dashboard\n  clientId,\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  privateKeyProvider: privateKeyProvider,\n});\n'})})}),(0,t.jsx)(i.Z,{value:"no-modal",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Web3AuthNoModal } from "@web3auth/no-modal";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\nimport { WEB3AUTH_NETWORK } from "@web3auth/base";\n\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: {chainConfig},\n});\n\nconst web3auth = new Web3AuthNoModal({\n  clientId, // Get it from Web3Auth Dashboard\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n});\n\nconst openloginAdapter = new OpenloginAdapter();\nweb3auth.configureAdapter(openloginAdapter);\n'})})}),(0,t.jsx)(i.Z,{value:"sfa",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Web3Auth } from "@web3auth/single-factor-auth";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\n\nconst web3auth = new Web3Auth({\n  clientId, // Get your Client ID from Web3Auth Dashboard\n  web3AuthNetwork: "sapphire_mainnet",\n});\n\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: { chainConfig },\n});\n'})})}),(0,t.jsx)(i.Z,{value:"tkey",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { SfaServiceProvider } from "@tkey/service-provider-sfa";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\n\n// Initialization of private key provider\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: {\n    chainConfig,\n  },\n});\n\nawait (tKey.serviceProvider as SfaServiceProvider).init(privateKeyProvider);\n'})})})]})}function l(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}},86177:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>h});var t=a(85893),o=a(11151),r=a(18786),i=(a(50210),a(85162)),s=a(74866);const l={title:"Integrate Web3Auth with the Solana Blockchain in Javascript",sidebar_label:"Web",image:"content-hub/guides/banners/solana.png",displayed_sidebar:"docs",keywords:["solana","web3auth","authentication","blockchain"],description:"Integrate Web3Auth with the Solana Blockchain in Javascript | Documentation - Web3Auth"},c=void 0,u={id:"connect-blockchain/solana/web",title:"Integrate Web3Auth with the Solana Blockchain in Javascript",description:"Integrate Web3Auth with the Solana Blockchain in Javascript | Documentation - Web3Auth",source:"@site/docs/connect-blockchain/solana/web.mdx",sourceDirName:"connect-blockchain/solana",slug:"/connect-blockchain/solana/web",permalink:"/docs/connect-blockchain/solana/web",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/connect-blockchain/solana/web.mdx",tags:[],version:"current",frontMatter:{title:"Integrate Web3Auth with the Solana Blockchain in Javascript",sidebar_label:"Web",image:"content-hub/guides/banners/solana.png",displayed_sidebar:"docs",keywords:["solana","web3auth","authentication","blockchain"],description:"Integrate Web3Auth with the Solana Blockchain in Javascript | Documentation - Web3Auth"},sidebar:"docs",previous:{title:"Integrate Web3Auth with the Solana Blockchain",permalink:"/docs/connect-blockchain/solana/"},next:{title:"Flutter",permalink:"/docs/connect-blockchain/solana/flutter"}},d={},h=[{value:"Installation",id:"installation",level:2},{value:"Getting the <code>chainConfig</code>",id:"getting-the-chainconfig",level:3},{value:"Initializing and instantiating the Web3Auth SDK",id:"initializing-and-instantiating-the-web3auth-sdk",level:3},{value:"Get User Info",id:"get-user-info",level:2},{value:"Get Account and Balance",id:"get-account-and-balance",level:2},{value:"Sign a Transaction",id:"sign-a-transaction",level:2},{value:"Sign all Transactions",id:"sign-all-transactions",level:2},{value:"Sign and Send a Transaction",id:"sign-and-send-a-transaction",level:2},{value:"Sign Message",id:"sign-message",level:2},{value:"Fetch User&#39;s Private Key",id:"fetch-users-private-key",level:2},{value:"Gasless Transactions",id:"gasless-transactions",level:2}];function b(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["While using the Web3Auth Web SDK for ",(0,t.jsx)(n.a,{href:"https://solana.com/",children:"Solana"})," you get a standard provider for Solana containing functions to help you make\nblockchain calls via the ",(0,t.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/",children:(0,t.jsx)(n.code,{children:"@solana/web3.js"})})," library. We have highlighted a few methods here for\ngetting you started quickly on that."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This reference is for the ",(0,t.jsx)(n.code,{children:"Web"}),", however, you can use Solana on ",(0,t.jsx)(n.code,{children:"React Native"}),", as well, quite similarly. Please follow our reference for\n",(0,t.jsx)(n.a,{href:"/connect-blockchain/evm/",children:"EVM Chains"}),", and similarly use Solana libraries that support the platforms to use the private key and make blockchain calls\naccordingly."]})}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["To interact with the Solana blockchain, you can use ",(0,t.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/",children:(0,t.jsx)(n.code,{children:"@solana/web3.js"})})," library with Web3Auth along\nwith ",(0,t.jsx)(n.code,{children:"@web3auth/solana-provider"})," package."]}),"\n",(0,t.jsxs)(n.h3,{id:"getting-the-chainconfig",children:["Getting the ",(0,t.jsx)(n.code,{children:"chainConfig"})]}),"\n",(0,t.jsxs)(s.Z,{defaultValue:"mainnet",values:[{label:"Mainnet",value:"mainnet"},{label:"Testnet",value:"testnet"}],children:[(0,t.jsx)(i.Z,{value:"mainnet",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const chainConfig: {\n  chainNamespace: "solana",\n  chainId: "0x1", // Please use 0x1 for Mainnet, 0x2 for Testnet, 0x3 for Devnet\n  rpcTarget: "https://rpc.ankr.com/solana",\n  displayName: "Solana Mainnet",\n  blockExplorerUrl: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n  logo: "https://images.toruswallet.io/solana.svg",\n};\n'})})}),(0,t.jsx)(i.Z,{value:"testnet",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const chainConfig: {\n  chainNamespace: "solana",\n  chainId: "0x2", // Please use 0x1 for Mainnet, 0x2 for Testnet, 0x3 for Devnet\n  rpcTarget: "https://api.testnet.solana.com",\n  displayName: "Solana Testnet",\n  blockExplorerUrl: "https://explorer.solana.com",\n  ticker: "SOL",\n  tickerName: "Solana",\n  logo: "https://images.toruswallet.io/solana.svg"\n};\n'})})})]}),"\n",(0,t.jsx)(n.h3,{id:"initializing-and-instantiating-the-web3auth-sdk",children:"Initializing and instantiating the Web3Auth SDK"}),"\n",(0,t.jsxs)(s.Z,{defaultValue:"modal",values:[{label:"PnP Modal SDK",value:"modal"},{label:"PnP NoModal SDK",value:"no-modal"},{label:"CoreKit SFA Web SDK",value:"sfa"},{label:"CoreKit MFA tKey JS SDK",value:"tkey"}],children:[(0,t.jsx)(i.Z,{value:"modal",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Web3Auth } from "@web3auth/modal";\nimport { SolanaPrivateKeyProvider } from "@web3auth/solana-provider";\nimport { WEB3AUTH_NETWORK } from "@web3auth/base";\n\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: { chainConfig: chainConfig }\n});\n\nconst web3auth = new Web3Auth({\n  // Get it from Web3Auth Dashboard\n  clientId,\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  privateKeyProvider: privateKeyProvider,\n});\n'})})}),(0,t.jsx)(i.Z,{value:"no-modal",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Web3AuthNoModal } from "@web3auth/no-modal";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { SolanaPrivateKeyProvider } from "@web3auth/solana-provider";\nimport { WEB3AUTH_NETWORK } from "@web3auth/base";\n\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: {chainConfig},\n});\n\nconst web3auth = new Web3AuthNoModal({\n  clientId, // Get it from Web3Auth Dashboard\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n});\n\nconst openloginAdapter = new OpenloginAdapter();\nweb3auth.configureAdapter(openloginAdapter);\n'})})}),(0,t.jsx)(i.Z,{value:"sfa",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Web3Auth } from "@web3auth/single-factor-auth";\nimport { SolanaPrivateKeyProvider } from "@web3auth/solana-provider";\n\nconst web3auth = new Web3Auth({\n  clientId, // Get your Client ID from Web3Auth Dashboard\n  web3AuthNetwork: "sapphire_mainnet",\n});\n\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: { chainConfig },\n});\n'})})}),(0,t.jsx)(i.Z,{value:"tkey",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { SfaServiceProvider } from "@tkey/service-provider-sfa";\nimport { SolanaPrivateKeyProvider } from "@web3auth/solana-provider";\n\n// Initialization of private key provider\nconst privateKeyProvider = new SolanaPrivateKeyProvider({\n  config: {\n    chainConfig,\n  },\n});\n\nawait (tKey.serviceProvider as SfaServiceProvider).init(privateKeyProvider);\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"get-user-info",children:"Get User Info"}),"\n",(0,t.jsx)(r.ZP,{}),"\n",(0,t.jsx)(n.h2,{id:"get-account-and-balance",children:"Get Account and Balance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\n\nconst solanaWallet = new SolanaWallet(web3auth.provider);\n\n// Get user\'s Solana public address\nconst accounts = await solanaWallet.requestAccounts();\n\n\nconst connectionConfig = await solanaWallet.request<string[], CustomChainConfig>({\n  method: "solana_provider_config",\n  params: [],\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\n// Fetch the balance for the specified public key\nconst balance = await connection.getBalance(new PublicKey(accounts[0]));\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sign-a-transaction",children:"Sign a Transaction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\n\n// solanaWallet is from above\nconst connectionConfig = await solanaWallet.request({\n  method: "solana_provider_config",\n  params: [],\n});\n\nconst connectionConfig = await solanaWallet.request<string[], CustomChainConfig>({\n  method: "solana_provider_config",\n  params: [],\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\nconst pubKey = await solanaWallet.requestAccounts();\nconst { blockhash } = await connection.getRecentBlockhash("finalized");\n\nconst TransactionInstruction = SystemProgram.transfer({\n  fromPubkey: new PublicKey(pubKey[0]),\n  toPubkey: new PublicKey(pubKey[0]),\n  lamports: 0.01 * LAMPORTS_PER_SOL,\n});\n\nconst transaction = new Transaction({\n  recentBlockhash: blockhash,\n  feePayer: new PublicKey(pubKey[0]),\n}).add(TransactionInstruction);\n\nconst signedTx = await solanaWallet.signTransaction(transaction);\nconsole.log(signedTx.signature);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sign-all-transactions",children:"Sign all Transactions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\n\n// solanaWallet is from above\nconst connectionConfig = await solanaWallet.request<string[], CustomChainConfig>({\n  method: "solana_provider_config", params: []\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\nconst pubKey = await solanaWallet.requestAccounts();\nconst { blockhash } = await connection.getRecentBlockhash("finalized");\n\n// First transaction\nconst TransactionInstruction1 = SystemProgram.transfer({\n  fromPubkey: new PublicKey(pubKey[0]),\n  toPubkey: new PublicKey(pubKey[0]),\n  lamports: 0.01 * LAMPORTS_PER_SOL,\n});\n\n// Second transaction\nconst TransactionInstruction2 = SystemProgram.transfer({\n  fromPubkey: new PublicKey(pubKey[0]),\n  toPubkey: new PublicKey(pubKey[0]),\n  lamports: 0.02 * LAMPORTS_PER_SOL,\n});\n\nconst transaction1 = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction1);\nconst transaction2 = new Transaction({ recentBlockhash: blockhash, feePayer: new PublicKey(pubKey[0]) }).add(TransactionInstruction2);\n\nconst signedTx = await solanaWallet.signAllTransactions([transaction1, transaction2]);\nconsole.log(signedTx);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sign-and-send-a-transaction",children:"Sign and Send a Transaction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\n\n\n// solanaWallet is from above\nconst connectionConfig = await solanaWallet.request<string[], CustomChainConfig>({\n  method: "solana_provider_config", params: []\n});\n\nconst connection = new Connection(connectionConfig.rpcTarget);\n\nconst accounts = await solanaWallet.requestAccounts();\nconst block = await connection.getLatestBlockhash("finalized");\n\nconst TransactionInstruction = SystemProgram.transfer({\n  fromPubkey: new PublicKey(accounts[0]),\n  toPubkey: new PublicKey(accounts[0]),\n  lamports: 0.01 * LAMPORTS_PER_SOL,\n});\n\nconst transaction = new Transaction({\n  blockhash: block.blockhash,\n  lastValidBlockHeight: block.lastValidBlockHeight,\n  feePayer: new PublicKey(accounts[0]),\n}).add(TransactionInstruction);\n\nconst { signature } = await solanaWallet.signAndSendTransaction(transaction);\n\nconsole.log(signature);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sign-message",children:"Sign Message"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";\n\n// solanaWallet is from above\nconst msg = Buffer.from("Test Signing Message", "utf8");\nconst result = await solanaWallet.signMessage(msg);\nconsole.log(result.toString());\n'})}),"\n",(0,t.jsx)(n.h2,{id:"fetch-users-private-key",children:"Fetch User's Private Key"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"solanaPrivateKey"})," is used to fetch the private key of the logged in user. It is only available for ",(0,t.jsx)(n.code,{children:"in-app"})," adapters like ",(0,t.jsx)(n.code,{children:"openlogin"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Assuming user is already logged in.\nasync getPrivateKey() {\n  const privateKey = await web3auth.provider.request({\n    method: "solanaPrivateKey"\n  });\n\n  // Do something with privateKey\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"gasless-transactions",children:"Gasless Transactions"}),"\n",(0,t.jsxs)(n.p,{children:["To do gasless transactions in Solana, use ",(0,t.jsx)(n.a,{href:"https://github.com/solana-labs/octane",children:"Solana labs's Octane"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Octane is a gasless transaction relayer for Solana. Octane accepts transactions via an HTTP API, signs them if they satisfy certain conditions and\nbroadcasts to the network."}),"\n",(0,t.jsxs)(n.p,{children:["Follow ",(0,t.jsx)(n.a,{href:"https://github.com/solana-labs/octane/blob/master/docs/example-integration.md",children:"this guide"})," to run your first transaction through Octane."]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(b,{...e})}):b(e)}},85162:(e,n,a)=>{a.d(n,{Z:()=>i});a(67294);var t=a(36905);const o={tabItem:"tabItem_Ymn6"};var r=a(85893);function i(e){let{children:n,hidden:a,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.Z)(o.tabItem,i),hidden:a,children:n})}},74866:(e,n,a)=>{a.d(n,{Z:()=>P});var t=a(67294),o=a(36905),r=a(12466),i=a(16550),s=a(20469),l=a(91980),c=a(67392),u=a(50012);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:o}}=e;return{value:n,label:a,attributes:t,default:o}}))}(a);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function b(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:a}=e;const o=(0,i.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l._X)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(o.location.search);n.set(r,e),o.replace({...o.location,search:n.toString()})}),[r,o])]}function m(e){const{defaultValue:n,queryString:a=!1,groupId:o}=e,r=h(e),[i,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,d]=p({queryString:a,groupId:o}),[m,g]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,r]=(0,u.Nk)(a);return[o,(0,t.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:o}),f=(()=>{const e=c??m;return b({value:e,tabValues:r})?e:null})();(0,s.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!b({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)}),[d,g,r]),tabValues:r}}var g=a(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=a(85893);function w(e){let{className:n,block:a,selectedValue:t,selectValue:i,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),u=e=>{const n=e.currentTarget,a=l.indexOf(n),o=s[a].value;o!==t&&(c(n),i(o))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;n=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;n=l[a]??l[l.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},n),children:s.map((e=>{let{value:n,label:a,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...r,className:(0,o.Z)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function y(e){let{lazy:n,children:a,selectedValue:o}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function x(e){const n=m(e);return(0,v.jsxs)("div",{className:(0,o.Z)("tabs-container",f.tabList),children:[(0,v.jsx)(w,{...e,...n}),(0,v.jsx)(y,{...e,...n})]})}function P(e){const n=(0,g.Z)();return(0,v.jsx)(x,{...e,children:d(e.children)},String(n))}},11151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>i});var t=a(67294);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);