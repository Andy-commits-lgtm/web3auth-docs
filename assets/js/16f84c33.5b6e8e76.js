"use strict";(self.webpackChunkweb3auth_docs=self.webpackChunkweb3auth_docs||[]).push([[15542],{18786:(e,n,t)=>{t.d(n,{ZP:()=>i});var r=t(85893),a=t(11151);function o(e){const n={code:"code",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"After logging in, the Web3Auth instance will provide you with information regarding the user that is logged in. This information is obtained directly\nfrom the JWT token and is not stored by Web3Auth. Therefore, this information can only be accessed through social logins after the user has logged\ninto your application."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const user = await web3auth.getUserInfo(); // web3auth instance\n"})})]})}function i(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},50210:(e,n,t)=>{t.d(n,{ZP:()=>c});var r=t(85893),a=t(11151),o=t(74866),i=t(85162);function s(e){const n={code:"code",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(o.Z,{defaultValue:"modal",values:[{label:"PnP Modal SDK",value:"modal"},{label:"PnP NoModal SDK",value:"no-modal"},{label:"CoreKit SFA Web SDK",value:"sfa"},{label:"CoreKit MFA tKey JS SDK",value:"tkey"}],children:[(0,r.jsx)(i.Z,{value:"modal",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Web3Auth } from "@web3auth/modal";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\nimport { WEB3AUTH_NETWORK } from "@web3auth/base";\n\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: { chainConfig: chainConfig }\n});\n\nconst web3auth = new Web3Auth({\n  // Get it from Web3Auth Dashboard\n  clientId,\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  privateKeyProvider: privateKeyProvider,\n});\n'})})}),(0,r.jsx)(i.Z,{value:"no-modal",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Web3AuthNoModal } from "@web3auth/no-modal";\nimport { OpenloginAdapter } from "@web3auth/openlogin-adapter";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\nimport { WEB3AUTH_NETWORK } from "@web3auth/base";\n\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: {chainConfig},\n});\n\nconst web3auth = new Web3AuthNoModal({\n  clientId, // Get it from Web3Auth Dashboard\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n});\n\nconst openloginAdapter = new OpenloginAdapter();\nweb3auth.configureAdapter(openloginAdapter);\n'})})}),(0,r.jsx)(i.Z,{value:"sfa",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Web3Auth } from "@web3auth/single-factor-auth";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\n\nconst web3auth = new Web3Auth({\n  clientId, // Get your Client ID from Web3Auth Dashboard\n  web3AuthNetwork: "sapphire_mainnet",\n});\n\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: { chainConfig },\n});\n'})})}),(0,r.jsx)(i.Z,{value:"tkey",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { SfaServiceProvider } from "@tkey/service-provider-sfa";\nimport { CommonPrivateKeyProvider } from "@web3auth/base-provider";\n\n// Initialization of private key provider\nconst privateKeyProvider = new CommonPrivateKeyProvider({\n  config: {\n    chainConfig,\n  },\n});\n\nawait (tKey.serviceProvider as SfaServiceProvider).init(privateKeyProvider);\n'})})})]})}function c(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},41047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=t(85893),a=t(11151),o=t(74866),i=t(85162),s=t(18786),c=t(50210);const l={title:"Integrate Web3Auth with the Cosmos Blockchain",sidebar_label:"Cosmos",image:"content-hub/guides/banners/cosmos.png",displayed_sidebar:"docs",keywords:["cosmos","web3auth","authentication","blockchain"],description:"Integrate Web3Auth with the Cosmos Blockchain | Documentation - Web3Auth"},d=void 0,u={id:"connect-blockchain/other/cosmos",title:"Integrate Web3Auth with the Cosmos Blockchain",description:"Integrate Web3Auth with the Cosmos Blockchain | Documentation - Web3Auth",source:"@site/docs/connect-blockchain/other/cosmos.mdx",sourceDirName:"connect-blockchain/other",slug:"/connect-blockchain/other/cosmos",permalink:"/docs/connect-blockchain/other/cosmos",draft:!1,unlisted:!1,editUrl:"https://github.com/web3auth/web3auth-docs/edit/master/docs/connect-blockchain/other/cosmos.mdx",tags:[],version:"current",frontMatter:{title:"Integrate Web3Auth with the Cosmos Blockchain",sidebar_label:"Cosmos",image:"content-hub/guides/banners/cosmos.png",displayed_sidebar:"docs",keywords:["cosmos","web3auth","authentication","blockchain"],description:"Integrate Web3Auth with the Cosmos Blockchain | Documentation - Web3Auth"},sidebar:"docs",previous:{title:"Aptos",permalink:"/docs/connect-blockchain/other/aptos"},next:{title:"ImmutableX",permalink:"/docs/connect-blockchain/other/immutablex"}},h={},p=[{value:"Installation",id:"installation",level:2},{value:"Initializing Provider",id:"initializing-provider",level:2},{value:"Getting the <code>chainConfig</code>",id:"getting-the-chainconfig",level:3},{value:"Initializing and instantiating the Web3Auth SDK",id:"initializing-and-instantiating-the-web3auth-sdk",level:3},{value:"Get User Info",id:"get-user-info",level:2},{value:"Get ChainID",id:"get-chainid",level:2},{value:"CosmJS Libraries",id:"cosmjs-libraries",level:3},{value:"Get Account",id:"get-account",level:2},{value:"Get Balance",id:"get-balance",level:2},{value:"Send transaction",id:"send-transaction",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["While using the Web3Auth Web SDK for a non-EVM chain like ",(0,r.jsx)(n.a,{href:"https://cosmos.network/",children:"Cosmos"})," you get a standard provider from which you can get the\nprivate key of the user. Using this private key, you can use the corresponding libraries of the blockchain to make blockchain calls like getting the\nuser's ",(0,r.jsx)(n.code,{children:"account"}),", ",(0,r.jsx)(n.code,{children:"chain ID"}),", fetch ",(0,r.jsx)(n.code,{children:"balance"}),", ",(0,r.jsx)(n.code,{children:"send transaction"}),", etc. We have highlighted a few methods here to get you started quickly on that."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This reference is for the ",(0,r.jsx)(n.code,{children:"Web"}),", however, you can use Cosmos on other Mobile and Gaming Platforms as well. Please follow our reference for\n",(0,r.jsx)(n.a,{href:"/connect-blockchain/evm/",children:"EVM Blockchains"}),", and similarly use Cosmos libraries that support the platforms to use the private key and make blockchain\ncalls accordingly."]})}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(o.Z,{groupId:"npm2yarn",children:[(0,r.jsx)(i.Z,{value:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save @web3auth/no-modal @web3auth/openlogin-adapter @web3auth/base @cosmjs/stargate @cosmjs/proto-signing\n"})})}),(0,r.jsx)(i.Z,{value:"yarn",label:"Yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @web3auth/no-modal @web3auth/openlogin-adapter @web3auth/base @cosmjs/stargate @cosmjs/proto-signing\n"})})}),(0,r.jsx)(i.Z,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @web3auth/no-modal @web3auth/openlogin-adapter @web3auth/base @cosmjs/stargate @cosmjs/proto-signing\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"initializing-provider",children:"Initializing Provider"}),"\n",(0,r.jsxs)(n.h3,{id:"getting-the-chainconfig",children:["Getting the ",(0,r.jsx)(n.code,{children:"chainConfig"})]}),"\n",(0,r.jsxs)(o.Z,{defaultValue:"mainnet",values:[{label:"Mainnet",value:"mainnet"},{label:"Testnet",value:"testnet"}],children:[(0,r.jsx)(i.Z,{value:"mainnet",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const chainConfig = {\n  chainNamespace: "other",\n  chainId: "cosmoshub-4", //\n  rpcTarget: "https://cosmos-rpc.quickapi.com", // Please add in your custom URL\n  // Avoid using public rpcTarget in production.\n  displayName: "Cosmos Mainnet",\n  blockExplorerUrl: "https://www.mintscan.io/cosmos", // Please add in your custom URL\n  ticker: "ATOM",\n  tickerName: "Cosmos",\n};\n'})})}),(0,r.jsx)(i.Z,{value:"testnet",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const chainConfig = {\n  chainNamespace: "other",\n  chainId: "theta-testnet-001", //\n  rpcTarget: "https://rpc.sentry-02.theta-testnet.polypore.xyz",\n  // Avoid using public rpcTarget in production.\n  displayName: "Cosmos Testnet",\n  blockExplorerUrl: "https://explorer.theta-testnet.polypore.xyz",\n  ticker: "ATOM",\n  tickerName: "Cosmos",\n};\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"initializing-and-instantiating-the-web3auth-sdk",children:"Initializing and instantiating the Web3Auth SDK"}),"\n",(0,r.jsx)(c.ZP,{}),"\n",(0,r.jsx)(n.h2,{id:"get-user-info",children:"Get User Info"}),"\n",(0,r.jsx)(s.ZP,{}),"\n",(0,r.jsx)(n.h2,{id:"get-chainid",children:"Get ChainID"}),"\n",(0,r.jsx)(n.p,{children:"Once a user logs in, the Web3Auth SDK returns a provider. Since Web3Auth doesn't have a native provider for Cosmos, we need to directly use the\nprivate key to make the RPC calls."}),"\n",(0,r.jsx)(n.h3,{id:"cosmjs-libraries",children:"CosmJS Libraries"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@cosmjs/stargate"})," A client library for the Cosmos SDK 0.40+. Provides a high-level client for querying, signing and broadcasting. This is an npm\nlibrary that provides a JavaScript/TypeScript interface to interact with the Cosmos SDK blockchain via the Tendermint RPC interface."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@cosmjs/proto-signing"})," It is an npm library for signing messages using protobuf serialization, which is commonly used in Cosmos SDK-based\nblockchains. It provides a simple API for generating and verifying signatures using different algorithms and key types."]}),"\n",(0,r.jsxs)(n.p,{children:["In order to get the ChainId, we connect to the RPC using StargateClient and make a call using the Cosmos RPC client to get the chainId. You can get\nthe private key using ",(0,r.jsx)(n.code,{children:'this.provider.request({method: "private_key",})'}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import type { IProvider } from "@web3auth/base";\nimport { SigningStargateClient, StargateClient } from "@cosmjs/stargate";\nimport { DirectSecp256k1Wallet, OfflineDirectSigner } from "@cosmjs/proto-signing";\n\nconst rpc = "https://rpc.sentry-02.theta-testnet.polypore.xyz";\nexport default class CosmosRPC {\n  private provider: IProvider;\n\n  constructor(provider: IProvider) {\n    this.provider = provider;\n  }\n\n  async getPrivateKey(): Promise<any> {\n    try {\n      return await this.provider.request({\n        method: "private_key",\n      });\n    } catch (error) {\n      return error as string;\n    }\n  }\n\n  async getChainId(): Promise<string> {\n    try {\n      const client = await StargateClient.connect(rpc);\n\n      // Get the connected Chain\'s ID\n      const chainId = await client.getChainId();\n\n      return chainId.toString();\n    } catch (error) {\n      return error as string;\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"get-account",children:"Get Account"}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"DirectSecp256k1Wallet.fromKey()"})," we can get the accounts via the private key we get through the provider."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import type { IProvider } from "@web3auth/base";\nimport { SigningStargateClient, StargateClient } from "@cosmjs/stargate";\nimport { DirectSecp256k1Wallet, OfflineDirectSigner } from "@cosmjs/proto-signing";\n\nconst rpc = "https://rpc.sentry-02.theta-testnet.polypore.xyz";\nexport default class CosmosRPC {\n  private provider: IProvider;\n\n  constructor(provider: IProvider) {\n    this.provider = provider;\n  }\n\n  async getAccounts(): Promise<any> {\n    try {\n      const privateKey = Buffer.from(await this.getPrivateKey(), "hex");\n      const walletPromise = await DirectSecp256k1Wallet.fromKey(privateKey, "cosmos");\n      return (await walletPromise.getAccounts())[0].address;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"get-balance",children:"Get Balance"}),"\n",(0,r.jsxs)(n.p,{children:["Using the account address we received in the previous step, we can fetch the balance using an RPC call to ",(0,r.jsx)(n.code,{children:"client.getAllBalances(address)"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import type { IProvider } from "@web3auth/base";\nimport { SigningStargateClient, StargateClient } from "@cosmjs/stargate";\nimport { DirectSecp256k1Wallet, OfflineDirectSigner } from "@cosmjs/proto-signing";\n\nconst rpc = "https://rpc.sentry-02.theta-testnet.polypore.xyz";\nexport default class CosmosRPC {\n  private provider: IProvider;\n\n  constructor(provider: IProvider) {\n    this.provider = provider;\n  }\n\n  async getBalance(): Promise<any> {\n    try {\n      const client = await StargateClient.connect(rpc);\n\n      const privateKey = Buffer.from(await this.getPrivateKey(), "hex");\n      const walletPromise = await DirectSecp256k1Wallet.fromKey(privateKey, "cosmos");\n      const address = (await walletPromise.getAccounts())[0].address;\n      // Get user\'s balance in uAtom\n      return await client.getAllBalances(address);\n    } catch (error) {\n      return error as string;\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"send-transaction",children:"Send transaction"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import type { IProvider } from "@web3auth/base";\nimport { SigningStargateClient, StargateClient } from "@cosmjs/stargate";\nimport { DirectSecp256k1Wallet, OfflineDirectSigner } from "@cosmjs/proto-signing";\n\nconst rpc = "https://rpc.sentry-02.theta-testnet.polypore.xyz";\nexport default class CosmosRPC {\n  private provider: IProvider;\n\n  constructor(provider: IProvider) {\n    this.provider = provider;\n  }\n\n  async sendTransaction(): Promise<any> {\n    try {\n      await StargateClient.connect(rpc);\n      const privateKey = Buffer.from(await this.getPrivateKey(), "hex");\n      const walletPromise = await DirectSecp256k1Wallet.fromKey(privateKey, "cosmos");\n      const fromAddress = (await walletPromise.getAccounts())[0].address;\n\n      const destination = "cosmos15aptdqmm7ddgtcrjvc5hs988rlrkze40l4q0he";\n\n      const getSignerFromKey = async (): Promise<OfflineDirectSigner> => {\n        return DirectSecp256k1Wallet.fromKey(privateKey, "cosmos");\n      };\n      const signer: OfflineDirectSigner = await getSignerFromKey();\n\n      const signingClient = await SigningStargateClient.connectWithSigner(rpc, signer);\n\n      const result = await signingClient.sendTokens(fromAddress, destination, [{ denom: "uatom", amount: "250" }], {\n        amount: [{ denom: "uatom", amount: "250" }],\n        gas: "100000",\n      });\n      const transactionHash = result.transactionHash;\n      const height = result.height;\n      return { transactionHash, height };\n    } catch (error) {\n      return error as string;\n    }\n  }\n}\n'})})]})}function g(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>i});t(67294);var r=t(36905);const a={tabItem:"tabItem_Ymn6"};var o=t(85893);function i(e){let{children:n,hidden:t,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,i),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>j});var r=t(67294),a=t(36905),o=t(12466),i=t(16550),s=t(20469),c=t(91980),l=t(67392),d=t(50012);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=h(e),[i,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[l,u]=m({queryString:t,groupId:a}),[g,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,d.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),v=(()=>{const e=l??g;return p({value:e,tabValues:o})?e:null})();(0,s.Z)((()=>{v&&c(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),b(e)}),[u,b,o]),tabValues:o}}var b=t(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(85893);function y(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.o5)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=s[t].value;a!==r&&(l(n),i(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:u,onClick:d,...o,className:(0,a.Z)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,a.Z)("tabs-container",v.tabList),children:[(0,f.jsx)(y,{...e,...n}),(0,f.jsx)(x,{...e,...n})]})}function j(e){const n=(0,b.Z)();return(0,f.jsx)(w,{...e,children:u(e.children)},String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var r=t(67294);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);